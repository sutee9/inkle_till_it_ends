{"version":3,"file":"ink-es2015.js","sources":["../src/engine/Path.ts","../src/engine/Debug.ts","../src/engine/Value.ts","../src/engine/PushPop.ts","../src/engine/Error.ts","../src/engine/TypeAssertion.ts","../src/engine/NullException.ts","../src/engine/Object.ts","../src/engine/StringBuilder.ts","../src/engine/InkList.ts","../src/engine/StoryException.ts","../src/engine/TryGetResult.ts","../src/engine/SearchResult.ts","../src/engine/Container.ts","../src/engine/Glue.ts","../src/engine/ControlCommand.ts","../src/engine/Pointer.ts","../src/engine/Divert.ts","../src/engine/ChoicePoint.ts","../src/engine/VariableReference.ts","../src/engine/VariableAssignment.ts","../src/engine/Void.ts","../src/engine/NativeFunctionCall.ts","../src/engine/Tag.ts","../src/engine/Choice.ts","../src/engine/ListDefinition.ts","../src/engine/ListDefinitionsOrigin.ts","../src/engine/JsonSerialisation.ts","../src/engine/CallStack.ts","../src/engine/VariablesState.ts","../src/engine/PRNG.ts","../src/engine/StatePatch.ts","../src/engine/SimpleJson.ts","../src/engine/Flow.ts","../src/engine/StoryState.ts","../src/engine/StopWatch.ts","../src/engine/Story.ts"],"sourcesContent":["export class Path {\n  public static parentId = \"^\";\n\n  public _isRelative: boolean;\n  public _components: Path.Component[];\n  public _componentsString: string | null;\n\n  constructor();\n  constructor(componentsString: string);\n  constructor(head: Path.Component, tail: Path);\n  constructor(head: Path.Component[], relative?: boolean);\n  constructor() {\n    this._components = [];\n    this._componentsString = null;\n    this._isRelative = false;\n\n    if (typeof arguments[0] == \"string\") {\n      let componentsString = arguments[0] as string;\n      this.componentsString = componentsString;\n    } else if (\n      arguments[0] instanceof Path.Component &&\n      arguments[1] instanceof Path\n    ) {\n      let head = arguments[0] as Path.Component;\n      let tail = arguments[1] as Path;\n      this._components.push(head);\n      this._components = this._components.concat(tail._components);\n    } else if (arguments[0] instanceof Array) {\n      let head = arguments[0] as Path.Component[];\n      let relative = !!arguments[1] as boolean;\n      this._components = this._components.concat(head);\n      this._isRelative = relative;\n    }\n  }\n  get isRelative() {\n    return this._isRelative;\n  }\n  get componentCount(): number {\n    return this._components.length;\n  }\n  get head(): Path.Component | null {\n    if (this._components.length > 0) {\n      return this._components[0];\n    } else {\n      return null;\n    }\n  }\n  get tail(): Path {\n    if (this._components.length >= 2) {\n      // careful, the original code uses length-1 here. This is because the second argument of\n      // List.GetRange is a number of elements to extract, wherease Array.slice uses an index\n      let tailComps = this._components.slice(1, this._components.length);\n      return new Path(tailComps);\n    } else {\n      return Path.self;\n    }\n  }\n  get length(): number {\n    return this._components.length;\n  }\n  get lastComponent(): Path.Component | null {\n    let lastComponentIdx = this._components.length - 1;\n    if (lastComponentIdx >= 0) {\n      return this._components[lastComponentIdx];\n    } else {\n      return null;\n    }\n  }\n  get containsNamedComponent(): boolean {\n    for (let i = 0, l = this._components.length; i < l; i++) {\n      if (!this._components[i].isIndex) {\n        return true;\n      }\n    }\n    return false;\n  }\n  static get self(): Path {\n    let path = new Path();\n    path._isRelative = true;\n    return path;\n  }\n\n  public GetComponent(index: number): Path.Component {\n    return this._components[index];\n  }\n  public PathByAppendingPath(pathToAppend: Path): Path {\n    let p = new Path();\n\n    let upwardMoves = 0;\n    for (let i = 0; i < pathToAppend._components.length; ++i) {\n      if (pathToAppend._components[i].isParent) {\n        upwardMoves++;\n      } else {\n        break;\n      }\n    }\n\n    for (let i = 0; i < this._components.length - upwardMoves; ++i) {\n      p._components.push(this._components[i]);\n    }\n\n    for (let i = upwardMoves; i < pathToAppend._components.length; ++i) {\n      p._components.push(pathToAppend._components[i]);\n    }\n\n    return p;\n  }\n  get componentsString(): string {\n    if (this._componentsString == null) {\n      this._componentsString = this._components.join(\".\");\n      if (this.isRelative)\n        this._componentsString = \".\" + this._componentsString;\n    }\n\n    return this._componentsString;\n  }\n  set componentsString(value: string) {\n    this._components.length = 0;\n\n    this._componentsString = value;\n\n    if (this._componentsString == null || this._componentsString == \"\") return;\n\n    if (this._componentsString[0] == \".\") {\n      this._isRelative = true;\n      this._componentsString = this._componentsString.substring(1);\n    }\n\n    let componentStrings = this._componentsString.split(\".\");\n    for (let str of componentStrings) {\n      // we need to distinguish between named components that start with a number, eg \"42somewhere\", and indexed components\n      // the normal parseInt won't do for the detection because it's too relaxed.\n      // see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/parseInt\n      if (/^(\\-|\\+)?([0-9]+|Infinity)$/.test(str)) {\n        this._components.push(new Path.Component(parseInt(str)));\n      } else {\n        this._components.push(new Path.Component(str));\n      }\n    }\n  }\n  public toString(): string {\n    return this.componentsString;\n  }\n  public Equals(otherPath: Path | null): boolean {\n    if (otherPath == null) return false;\n\n    if (otherPath._components.length != this._components.length) return false;\n\n    if (otherPath.isRelative != this.isRelative) return false;\n\n    // the original code uses SequenceEqual here, so we need to iterate over the components manually.\n    for (let i = 0, l = otherPath._components.length; i < l; i++) {\n      // it's not quite clear whether this test should use Equals or a simple == operator,\n      // see https://github.com/y-lohse/inkjs/issues/22\n      if (!otherPath._components[i].Equals(this._components[i])) return false;\n    }\n\n    return true;\n  }\n  public PathByAppendingComponent(c: Path.Component): Path {\n    let p = new Path();\n    p._components.push(...this._components);\n    p._components.push(c);\n    return p;\n  }\n}\n\nexport namespace Path {\n  export class Component {\n    public readonly index: number;\n    public readonly name: string | null;\n\n    constructor(indexOrName: string | number) {\n      this.index = -1;\n      this.name = null;\n      if (typeof indexOrName == \"string\") {\n        this.name = indexOrName;\n      } else {\n        this.index = indexOrName;\n      }\n    }\n    get isIndex(): boolean {\n      return this.index >= 0;\n    }\n    get isParent(): boolean {\n      return this.name == Path.parentId;\n    }\n\n    public static ToParent(): Component {\n      return new Component(Path.parentId);\n    }\n    public toString(): string | null {\n      if (this.isIndex) {\n        return this.index.toString();\n      } else {\n        return this.name;\n      }\n    }\n    public Equals(otherComp: Component): boolean {\n      if (otherComp != null && otherComp.isIndex == this.isIndex) {\n        if (this.isIndex) {\n          return this.index == otherComp.index;\n        } else {\n          return this.name == otherComp.name;\n        }\n      }\n\n      return false;\n    }\n  }\n}\n","export namespace Debug {\n  export function AssertType<T>(\n    variable: any,\n    type: new () => T,\n    message: string\n  ): void | never {\n    Assert(variable instanceof type, message);\n  }\n\n  export function Assert(condition: boolean, message?: string): void | never {\n    if (!condition) {\n      if (typeof message !== \"undefined\") {\n        console.warn(message);\n      }\n\n      if (console.trace) {\n        console.trace();\n      }\n\n      throw new Error(\"\");\n    }\n  }\n}\n","import { InkObject } from \"./Object\";\nimport { Path } from \"./Path\";\nimport { InkList, InkListItem } from \"./InkList\";\nimport { StoryException } from \"./StoryException\";\nimport { asOrNull, asOrThrows } from \"./TypeAssertion\";\nimport { tryParseInt, tryParseFloat } from \"./TryGetResult\";\nimport { throwNullException } from \"./NullException\";\n\nexport abstract class AbstractValue extends InkObject {\n  public abstract get valueType(): ValueType;\n  public abstract get isTruthy(): boolean;\n  public abstract get valueObject(): any;\n\n  public abstract Cast(newType: ValueType): Value<any>;\n\n  public static Create(\n    val: any,\n    preferredNumberType?: ValueType\n  ): Value<any> | null {\n    // This code doesn't exist in upstream and is simply here to enforce\n    // the creation of the proper number value.\n    // If `preferredNumberType` is not provided or if value doesn't match\n    // `preferredNumberType`, this conditional does nothing.\n    if (preferredNumberType) {\n      if (\n        preferredNumberType === (ValueType.Int as ValueType) &&\n        Number.isInteger(Number(val))\n      ) {\n        return new IntValue(Number(val));\n      } else if (\n        preferredNumberType === (ValueType.Float as ValueType) &&\n        !isNaN(val)\n      ) {\n        return new FloatValue(Number(val));\n      }\n    }\n\n    if (typeof val === \"boolean\") {\n      return new BoolValue(Boolean(val));\n    }\n\n    // https://github.com/y-lohse/inkjs/issues/425\n    // Changed condition sequence, because Number('') is\n    // parsed to 0, which made setting string to empty\n    // impossible\n    if (typeof val === \"string\") {\n      return new StringValue(String(val));\n    } else if (Number.isInteger(Number(val))) {\n      return new IntValue(Number(val));\n    } else if (!isNaN(val)) {\n      return new FloatValue(Number(val));\n    } else if (val instanceof Path) {\n      return new DivertTargetValue(asOrThrows(val, Path));\n    } else if (val instanceof InkList) {\n      return new ListValue(asOrThrows(val, InkList));\n    }\n\n    return null;\n  }\n  public Copy() {\n    return asOrThrows(AbstractValue.Create(this.valueObject), InkObject);\n  }\n  public BadCastException(targetType: ValueType) {\n    return new StoryException(\n      \"Can't cast \" +\n        this.valueObject +\n        \" from \" +\n        this.valueType +\n        \" to \" +\n        targetType\n    );\n  }\n}\n\nexport abstract class Value<\n  T extends { toString: () => string }\n> extends AbstractValue {\n  public value: T | null;\n\n  constructor(val: T | null) {\n    super();\n    this.value = val;\n  }\n  public get valueObject() {\n    return this.value;\n  }\n  public toString() {\n    if (this.value === null) return throwNullException(\"Value.value\");\n    return this.value.toString();\n  }\n}\n\nexport class BoolValue extends Value<boolean> {\n  constructor(val: boolean) {\n    super(val || false);\n  }\n  public get isTruthy() {\n    return Boolean(this.value);\n  }\n  public get valueType() {\n    return ValueType.Bool;\n  }\n\n  public Cast(newType: ValueType): Value<any> {\n    if (this.value === null) return throwNullException(\"Value.value\");\n\n    if (newType == this.valueType) {\n      return this;\n    }\n\n    if (newType == ValueType.Int) {\n      return new IntValue(this.value ? 1 : 0);\n    }\n\n    if (newType == ValueType.Float) {\n      return new FloatValue(this.value ? 1.0 : 0.0);\n    }\n\n    if (newType == ValueType.String) {\n      return new StringValue(this.value ? \"true\" : \"false\");\n    }\n\n    throw this.BadCastException(newType);\n  }\n\n  public toString() {\n    return this.value ? \"true\" : \"false\";\n  }\n}\n\nexport class IntValue extends Value<number> {\n  constructor(val: number) {\n    super(val || 0);\n  }\n  public get isTruthy() {\n    return this.value != 0;\n  }\n  public get valueType() {\n    return ValueType.Int;\n  }\n\n  public Cast(newType: ValueType): Value<any> {\n    if (this.value === null) return throwNullException(\"Value.value\");\n\n    if (newType == this.valueType) {\n      return this;\n    }\n\n    if (newType == ValueType.Bool) {\n      return new BoolValue(this.value === 0 ? false : true);\n    }\n\n    if (newType == ValueType.Float) {\n      return new FloatValue(this.value);\n    }\n\n    if (newType == ValueType.String) {\n      return new StringValue(\"\" + this.value);\n    }\n\n    throw this.BadCastException(newType);\n  }\n}\n\nexport class FloatValue extends Value<number> {\n  constructor(val: number) {\n    super(val || 0.0);\n  }\n  public get isTruthy() {\n    return this.value != 0.0;\n  }\n  public get valueType() {\n    return ValueType.Float;\n  }\n\n  public Cast(newType: ValueType): Value<any> {\n    if (this.value === null) return throwNullException(\"Value.value\");\n\n    if (newType == this.valueType) {\n      return this;\n    }\n\n    if (newType == ValueType.Bool) {\n      return new BoolValue(this.value === 0.0 ? false : true);\n    }\n\n    if (newType == ValueType.Int) {\n      return new IntValue(this.value);\n    }\n\n    if (newType == ValueType.String) {\n      return new StringValue(\"\" + this.value);\n    }\n\n    throw this.BadCastException(newType);\n  }\n}\n\nexport class StringValue extends Value<string> {\n  public _isNewline: boolean;\n  public _isInlineWhitespace: boolean;\n\n  constructor(val: string) {\n    super(val || \"\");\n\n    this._isNewline = this.value == \"\\n\";\n    this._isInlineWhitespace = true;\n\n    if (this.value === null) return throwNullException(\"Value.value\");\n\n    if (this.value.length > 0) {\n      this.value.split(\"\").every((c) => {\n        if (c != \" \" && c != \"\\t\") {\n          this._isInlineWhitespace = false;\n          return false;\n        }\n\n        return true;\n      });\n    }\n  }\n  public get valueType() {\n    return ValueType.String;\n  }\n  public get isTruthy() {\n    if (this.value === null) return throwNullException(\"Value.value\");\n    return this.value.length > 0;\n  }\n  public get isNewline() {\n    return this._isNewline;\n  }\n  public get isInlineWhitespace() {\n    return this._isInlineWhitespace;\n  }\n  public get isNonWhitespace() {\n    return !this.isNewline && !this.isInlineWhitespace;\n  }\n\n  public Cast(newType: ValueType): Value<any> {\n    if (newType == this.valueType) {\n      return this;\n    }\n\n    if (newType == ValueType.Int) {\n      let parsedInt = tryParseInt(this.value);\n      if (parsedInt.exists) {\n        return new IntValue(parsedInt.result);\n      } else {\n        throw this.BadCastException(newType);\n      }\n    }\n\n    if (newType == ValueType.Float) {\n      let parsedFloat = tryParseFloat(this.value);\n      if (parsedFloat.exists) {\n        return new FloatValue(parsedFloat.result);\n      } else {\n        throw this.BadCastException(newType);\n      }\n    }\n\n    throw this.BadCastException(newType);\n  }\n}\n\nexport class DivertTargetValue extends Value<Path> {\n  constructor(targetPath: Path | null = null) {\n    super(targetPath);\n  }\n  public get valueType() {\n    return ValueType.DivertTarget;\n  }\n  public get targetPath() {\n    if (this.value === null) return throwNullException(\"Value.value\");\n    return this.value;\n  }\n  public set targetPath(value: Path) {\n    this.value = value;\n  }\n  public get isTruthy(): never {\n    throw new Error(\"Shouldn't be checking the truthiness of a divert target\");\n  }\n\n  public Cast(newType: ValueType): Value<any> {\n    if (newType == this.valueType) return this;\n\n    throw this.BadCastException(newType);\n  }\n  public toString() {\n    return \"DivertTargetValue(\" + this.targetPath + \")\";\n  }\n}\n\nexport class VariablePointerValue extends Value<string> {\n  public _contextIndex: number;\n\n  constructor(variableName: string, contextIndex: number = -1) {\n    super(variableName);\n\n    this._contextIndex = contextIndex;\n  }\n\n  public get contextIndex() {\n    return this._contextIndex;\n  }\n  public set contextIndex(value: number) {\n    this._contextIndex = value;\n  }\n  public get variableName() {\n    if (this.value === null) return throwNullException(\"Value.value\");\n    return this.value;\n  }\n  public set variableName(value: string) {\n    this.value = value;\n  }\n  public get valueType() {\n    return ValueType.VariablePointer;\n  }\n\n  public get isTruthy(): never {\n    throw new Error(\n      \"Shouldn't be checking the truthiness of a variable pointer\"\n    );\n  }\n\n  public Cast(newType: ValueType): Value<any> {\n    if (newType == this.valueType) return this;\n\n    throw this.BadCastException(newType);\n  }\n  public toString() {\n    return \"VariablePointerValue(\" + this.variableName + \")\";\n  }\n  public Copy() {\n    return new VariablePointerValue(this.variableName, this.contextIndex);\n  }\n}\n\nexport class ListValue extends Value<InkList> {\n  public get isTruthy() {\n    if (this.value === null) {\n      return throwNullException(\"this.value\");\n    }\n    return this.value.Count > 0;\n  }\n  public get valueType() {\n    return ValueType.List;\n  }\n  public Cast(newType: ValueType): Value<any> {\n    if (this.value === null) return throwNullException(\"Value.value\");\n\n    if (newType == ValueType.Int) {\n      let max = this.value.maxItem;\n      if (max.Key.isNull) return new IntValue(0);\n      else return new IntValue(max.Value);\n    } else if (newType == ValueType.Float) {\n      let max = this.value.maxItem;\n      if (max.Key.isNull) return new FloatValue(0.0);\n      else return new FloatValue(max.Value);\n    } else if (newType == ValueType.String) {\n      let max = this.value.maxItem;\n      if (max.Key.isNull) return new StringValue(\"\");\n      else {\n        return new StringValue(max.Key.toString());\n      }\n    }\n\n    if (newType == this.valueType) return this;\n\n    throw this.BadCastException(newType);\n  }\n  constructor();\n  constructor(list: InkList);\n  constructor(listOrSingleItem: InkListItem, singleValue: number);\n  constructor(listOrSingleItem?: InkListItem | InkList, singleValue?: number) {\n    super(null);\n\n    if (!listOrSingleItem && !singleValue) {\n      this.value = new InkList();\n    } else if (listOrSingleItem instanceof InkList) {\n      this.value = new InkList(listOrSingleItem);\n    } else if (\n      listOrSingleItem instanceof InkListItem &&\n      typeof singleValue === \"number\"\n    ) {\n      this.value = new InkList({\n        Key: listOrSingleItem,\n        Value: singleValue,\n      });\n    }\n  }\n  public static RetainListOriginsForAssignment(\n    oldValue: InkObject | null,\n    newValue: InkObject\n  ) {\n    let oldList = asOrNull(oldValue, ListValue);\n    let newList = asOrNull(newValue, ListValue);\n\n    if (newList && newList.value === null)\n      return throwNullException(\"newList.value\");\n    if (oldList && oldList.value === null)\n      return throwNullException(\"oldList.value\");\n\n    // When assigning the empty list, try to retain any initial origin names\n    if (oldList && newList && newList.value!.Count == 0)\n      newList.value!.SetInitialOriginNames(oldList.value!.originNames);\n  }\n}\n\nexport enum ValueType {\n  Bool = -1,\n  Int = 0,\n  Float = 1,\n  List = 2,\n  String = 3,\n  DivertTarget = 4,\n  VariablePointer = 5,\n}\n","export enum PushPopType {\n  Tunnel = 0,\n  Function = 1,\n  FunctionEvaluationFromGame = 2,\n}\n","// TODO: Unify with Compiler.\n\nexport type ErrorHandler = (message: string, type: ErrorType) => void;\n\nexport enum ErrorType {\n  Author,\n  Warning,\n  Error,\n}\n","import { INamedContent } from \"./INamedContent\";\n\nexport function asOrNull<T>(\n  obj: any,\n  type: (new (...arg: any[]) => T) | (Function & { prototype: T })\n): T | null {\n  if (obj instanceof type) {\n    return unsafeTypeAssertion(obj, type);\n  } else {\n    return null;\n  }\n}\n\nexport function asOrThrows<T>(\n  obj: any,\n  type: (new (...arg: any[]) => T) | (Function & { prototype: T })\n): T | never {\n  if (obj instanceof type) {\n    return unsafeTypeAssertion(obj, type);\n  } else {\n    throw new Error(`${obj} is not of type ${type}`);\n  }\n}\n\nexport function asNumberOrThrows(obj: any) {\n  if (typeof obj === \"number\") {\n    return obj as number;\n  } else {\n    throw new Error(`${obj} is not a number`);\n  }\n}\n\nexport function asBooleanOrThrows(obj: any) {\n  if (typeof obj === \"boolean\") {\n    return obj as boolean;\n  } else {\n    throw new Error(`${obj} is not a boolean`);\n  }\n}\n\n// So here, in the reference implementation, contentObj is casted to an INamedContent\n// but here we use js-style duck typing: if it implements the same props as the interface,\n// we treat it as valid.\nexport function asINamedContentOrNull(obj: any): INamedContent | null {\n  if (obj.hasValidName && obj.name) {\n    return obj as INamedContent;\n  }\n\n  return null;\n}\n\nexport function nullIfUndefined<T>(obj: T | undefined): T | null {\n  if (typeof obj === \"undefined\") {\n    return null;\n  }\n\n  return obj;\n}\n\nexport function isEquatable(type: any) {\n  return typeof type === \"object\" && typeof type.Equals === \"function\";\n}\n\nfunction unsafeTypeAssertion<T>(\n  obj: any,\n  type: (new () => T) | (Function & { prototype: T })\n) {\n  return obj as T;\n}\n\nexport function filterUndef<T>(element: T | undefined): element is T {\n  return element != undefined;\n}\n","/**\n * In the original C# code, a SystemException would be thrown when passing\n * null to methods expected a valid instance. Javascript has no such\n * concept, but TypeScript will not allow `null` to be passed to methods\n * explicitely requiring a valid type.\n *\n * Whenever TypeScript complain about the possibility of a `null` value,\n * check the offending value and it it's null, throw this exception using\n * `throwNullException(name: string)`.\n */\nexport class NullException extends Error {}\n\n/**\n * Throw a NullException.\n *\n * @param name a short description of the offending value (often its name within the code).\n */\nexport function throwNullException(name: string): never {\n  throw new NullException(`${name} is null or undefined`);\n}\n","import { Path } from \"./Path\";\nimport { Container } from \"./Container\";\nimport { Debug } from \"./Debug\";\nimport { asOrNull, asINamedContentOrNull } from \"./TypeAssertion\";\nimport { throwNullException } from \"./NullException\";\nimport { SearchResult } from \"./SearchResult\";\nimport { DebugMetadata } from \"./DebugMetadata\";\n\nexport class InkObject {\n  public parent: InkObject | null = null;\n\n  get debugMetadata(): DebugMetadata | null {\n    if (this._debugMetadata === null) {\n      if (this.parent) {\n        return this.parent.debugMetadata;\n      }\n    }\n\n    return this._debugMetadata;\n  }\n\n  set debugMetadata(value) {\n    this._debugMetadata = value;\n  }\n\n  get ownDebugMetadata() {\n    return this._debugMetadata;\n  }\n\n  private _debugMetadata: DebugMetadata | null = null;\n\n  public DebugLineNumberOfPath(path: Path) {\n    if (path === null) return null;\n\n    // Try to get a line number from debug metadata\n    let root = this.rootContentContainer;\n    if (root) {\n      let targetContent = root.ContentAtPath(path).obj;\n      if (targetContent) {\n        let dm = targetContent.debugMetadata;\n        if (dm !== null) {\n          return dm.startLineNumber;\n        }\n      }\n    }\n\n    return null;\n  }\n\n  get path() {\n    if (this._path == null) {\n      if (this.parent == null) {\n        this._path = new Path();\n      } else {\n        let comps: Path.Component[] = [];\n\n        let child: InkObject = this;\n        let container = asOrNull(child.parent, Container);\n\n        while (container !== null) {\n          let namedChild = asINamedContentOrNull(child);\n          if (namedChild != null && namedChild.hasValidName) {\n            if (namedChild.name === null)\n              return throwNullException(\"namedChild.name\");\n            comps.unshift(new Path.Component(namedChild.name!));\n          } else {\n            comps.unshift(new Path.Component(container.content.indexOf(child)));\n          }\n\n          child = container;\n          container = asOrNull(container.parent, Container);\n        }\n\n        this._path = new Path(comps);\n      }\n    }\n\n    return this._path;\n  }\n  private _path: Path | null = null;\n\n  public ResolvePath(path: Path | null): SearchResult {\n    if (path === null) return throwNullException(\"path\");\n    if (path.isRelative) {\n      let nearestContainer = asOrNull(this, Container);\n\n      if (nearestContainer === null) {\n        Debug.Assert(\n          this.parent !== null,\n          \"Can't resolve relative path because we don't have a parent\"\n        );\n        nearestContainer = asOrNull(this.parent, Container);\n        Debug.Assert(\n          nearestContainer !== null,\n          \"Expected parent to be a container\"\n        );\n        Debug.Assert(path.GetComponent(0).isParent);\n        path = path.tail;\n      }\n\n      if (nearestContainer === null) {\n        return throwNullException(\"nearestContainer\");\n      }\n      return nearestContainer.ContentAtPath(path);\n    } else {\n      let contentContainer = this.rootContentContainer;\n      if (contentContainer === null) {\n        return throwNullException(\"contentContainer\");\n      }\n      return contentContainer.ContentAtPath(path);\n    }\n  }\n\n  public ConvertPathToRelative(globalPath: Path) {\n    let ownPath = this.path;\n\n    let minPathLength = Math.min(globalPath.length, ownPath.length);\n    let lastSharedPathCompIndex = -1;\n\n    for (let i = 0; i < minPathLength; ++i) {\n      let ownComp = ownPath.GetComponent(i);\n      let otherComp = globalPath.GetComponent(i);\n\n      if (ownComp.Equals(otherComp)) {\n        lastSharedPathCompIndex = i;\n      } else {\n        break;\n      }\n    }\n\n    // No shared path components, so just use global path\n    if (lastSharedPathCompIndex == -1) return globalPath;\n\n    let numUpwardsMoves = ownPath.componentCount - 1 - lastSharedPathCompIndex;\n\n    let newPathComps: Path.Component[] = [];\n\n    for (let up = 0; up < numUpwardsMoves; ++up)\n      newPathComps.push(Path.Component.ToParent());\n\n    for (\n      let down = lastSharedPathCompIndex + 1;\n      down < globalPath.componentCount;\n      ++down\n    )\n      newPathComps.push(globalPath.GetComponent(down));\n\n    let relativePath = new Path(newPathComps, true);\n    return relativePath;\n  }\n\n  public CompactPathString(otherPath: Path) {\n    let globalPathStr = null;\n    let relativePathStr = null;\n\n    if (otherPath.isRelative) {\n      relativePathStr = otherPath.componentsString;\n      globalPathStr = this.path.PathByAppendingPath(otherPath).componentsString;\n    } else {\n      let relativePath = this.ConvertPathToRelative(otherPath);\n      relativePathStr = relativePath.componentsString;\n      globalPathStr = otherPath.componentsString;\n    }\n\n    if (relativePathStr.length < globalPathStr.length) return relativePathStr;\n    else return globalPathStr;\n  }\n\n  get rootContentContainer() {\n    let ancestor: InkObject = this;\n    while (ancestor.parent) {\n      ancestor = ancestor.parent;\n    }\n    return asOrNull(ancestor, Container);\n  }\n\n  public Copy(): InkObject {\n    throw Error(\"Not Implemented: Doesn't support copying\");\n  }\n  // SetChild works slightly diferently in the js implementation.\n  // Since we can't pass an objets property by reference, we instead pass\n  // the object and the property string.\n  // TODO: This method can probably be rewritten with type-safety in mind.\n  public SetChild(obj: any, prop: any, value: any) {\n    if (obj[prop]) obj[prop] = null;\n\n    obj[prop] = value;\n\n    if (obj[prop]) obj[prop].parent = this;\n  }\n\n  public Equals(obj: any) {\n    return obj === this;\n  }\n}\n","export class StringBuilder {\n  private string: string;\n\n  constructor(str?: string) {\n    str = typeof str !== \"undefined\" ? str.toString() : \"\";\n    this.string = str;\n  }\n  get Length(): number {\n    return this.string.length;\n  }\n  public Append(str: string | null) {\n    if (str !== null) {\n      this.string += str;\n    }\n  }\n  public AppendLine(str?: string) {\n    if (typeof str !== \"undefined\") this.Append(str);\n    this.string += \"\\n\";\n  }\n  public AppendFormat(format: string, ...args: any[]) {\n    // taken from http://stackoverflow.com/questions/610406/javascript-equivalent-to-printf-string-format\n    this.string += format.replace(/{(\\d+)}/g, (match: string, num: number) =>\n      typeof args[num] != \"undefined\" ? args[num] : match\n    );\n  }\n  public toString(): string {\n    return this.string;\n  }\n}\n","import { throwNullException } from \"./NullException\";\nimport { StringBuilder } from \"./StringBuilder\";\nimport { ListDefinition } from \"./ListDefinition\";\nimport { Story } from \"./Story\";\n\nexport class InkListItem implements IInkListItem {\n  // InkListItem is a struct\n\n  public readonly originName: string | null = null;\n  public readonly itemName: string | null = null;\n\n  constructor(originName: string | null, itemName: string | null);\n  constructor(fullName: string | null);\n  constructor() {\n    if (typeof arguments[1] !== \"undefined\") {\n      let originName = arguments[0] as string | null;\n      let itemName = arguments[1] as string | null;\n\n      this.originName = originName;\n      this.itemName = itemName;\n    } else if (arguments[0]) {\n      let fullName = arguments[0] as string;\n\n      let nameParts = fullName.toString().split(\".\");\n      this.originName = nameParts[0];\n      this.itemName = nameParts[1];\n    }\n  }\n  public static get Null() {\n    return new InkListItem(null, null);\n  }\n  public get isNull() {\n    return this.originName == null && this.itemName == null;\n  }\n  get fullName() {\n    return (\n      (this.originName !== null ? this.originName : \"?\") + \".\" + this.itemName\n    );\n  }\n  public toString(): string {\n    return this.fullName;\n  }\n  public Equals(obj: InkListItem) {\n    if (obj instanceof InkListItem) {\n      let otherItem = obj;\n      return (\n        otherItem.itemName == this.itemName &&\n        otherItem.originName == this.originName\n      );\n    }\n\n    return false;\n  }\n\n  // These methods did not exist in the original C# code. Their purpose is to\n  // make `InkListItem` mimics the value-type semantics of the original\n  // struct. Please refer to the end of this file, for a more in-depth\n  // explanation.\n\n  /**\n   * Returns a shallow clone of the current instance.\n   */\n  public copy() {\n    return new InkListItem(this.originName, this.itemName);\n  }\n  /**\n   * Returns a `SerializedInkListItem` representing the current\n   * instance. The result is intended to be used as a key inside a Map.\n   */\n  public serialized(): SerializedInkListItem {\n    // We are simply using a JSON representation as a value-typed key.\n    return JSON.stringify({\n      originName: this.originName,\n      itemName: this.itemName,\n    });\n  }\n\n  /**\n   * Reconstructs a `InkListItem` from the given SerializedInkListItem.\n   */\n  public static fromSerializedKey(key: SerializedInkListItem): InkListItem {\n    let obj = JSON.parse(key);\n    if (!InkListItem.isLikeInkListItem(obj)) return InkListItem.Null;\n\n    let inkListItem = obj as IInkListItem;\n\n    return new InkListItem(inkListItem.originName, inkListItem.itemName);\n  }\n\n  /**\n   * Determines whether the given item is sufficiently `InkListItem`-like\n   * to be used as a template when reconstructing the InkListItem.\n   */\n  private static isLikeInkListItem(item: any) {\n    if (typeof item !== \"object\") return false;\n    if (!item.hasOwnProperty(\"originName\") || !item.hasOwnProperty(\"itemName\"))\n      return false;\n    if (typeof item.originName !== \"string\" && typeof item.originName !== null)\n      return false;\n    if (typeof item.itemName !== \"string\" && typeof item.itemName !== null)\n      return false;\n\n    return true;\n  }\n}\n\nexport class InkList extends Map<SerializedInkListItem, number> {\n  public origins: ListDefinition[] | null = null;\n  public _originNames: string[] | null = [];\n\n  constructor();\n  constructor(otherList: InkList);\n  constructor(singleOriginListName: string, originStory: Story);\n  constructor(singleElement: KeyValuePair<InkListItem, number>);\n  constructor() {\n    // Trying to be smart here, this emulates the constructor inheritance found\n    // in the original code, but only if otherList is an InkList. IIFE FTW.\n    super(\n      (() => {\n        if (arguments[0] instanceof InkList) {\n          return arguments[0];\n        } else {\n          return [];\n        }\n      })()\n    );\n\n    if (arguments[0] instanceof InkList) {\n      let otherList = arguments[0] as InkList;\n\n      this._originNames = otherList.originNames;\n      if (otherList.origins !== null) {\n        this.origins = otherList.origins.slice();\n      }\n    } else if (typeof arguments[0] === \"string\") {\n      let singleOriginListName = arguments[0] as string;\n      let originStory = arguments[1] as Story;\n      this.SetInitialOriginName(singleOriginListName);\n\n      if (originStory.listDefinitions === null) {\n        return throwNullException(\"originStory.listDefinitions\");\n      }\n      let def = originStory.listDefinitions.TryListGetDefinition(\n        singleOriginListName,\n        null\n      );\n      if (def.exists) {\n        // Throwing now, because if the value is `null` it will\n        // eventually throw down the line.\n        if (def.result === null) {\n          return throwNullException(\"def.result\");\n        }\n        this.origins = [def.result];\n      } else {\n        throw new Error(\n          \"InkList origin could not be found in story when constructing new list: \" +\n            singleOriginListName\n        );\n      }\n    } else if (\n      typeof arguments[0] === \"object\" &&\n      arguments[0].hasOwnProperty(\"Key\") &&\n      arguments[0].hasOwnProperty(\"Value\")\n    ) {\n      let singleElement = arguments[0] as KeyValuePair<InkListItem, number>;\n      this.Add(singleElement.Key, singleElement.Value);\n    }\n  }\n\n  public static FromString(myListItem: string, originStory: Story) {\n    let listValue =\n      originStory.listDefinitions?.FindSingleItemListWithName(myListItem);\n    if (listValue) {\n      if (listValue.value === null) {\n        return throwNullException(\"listValue.value\");\n      }\n      return new InkList(listValue.value);\n    } else {\n      throw new Error(\n        \"Could not find the InkListItem from the string '\" +\n          myListItem +\n          \"' to create an InkList because it doesn't exist in the original list definition in ink.\"\n      );\n    }\n  }\n\n  public AddItem(itemOrItemName: InkListItem | string | null) {\n    if (itemOrItemName instanceof InkListItem) {\n      let item = itemOrItemName;\n\n      if (item.originName == null) {\n        this.AddItem(item.itemName);\n        return;\n      }\n\n      if (this.origins === null) return throwNullException(\"this.origins\");\n\n      for (let origin of this.origins) {\n        if (origin.name == item.originName) {\n          let intVal = origin.TryGetValueForItem(item, 0);\n          if (intVal.exists) {\n            this.Add(item, intVal.result);\n            return;\n          } else {\n            throw new Error(\n              \"Could not add the item \" +\n                item +\n                \" to this list because it doesn't exist in the original list definition in ink.\"\n            );\n          }\n        }\n      }\n\n      throw new Error(\n        \"Failed to add item to list because the item was from a new list definition that wasn't previously known to this list. Only items from previously known lists can be used, so that the int value can be found.\"\n      );\n    } else {\n      let itemName = itemOrItemName as string | null;\n\n      let foundListDef: ListDefinition | null = null;\n\n      if (this.origins === null) return throwNullException(\"this.origins\");\n\n      for (let origin of this.origins) {\n        if (itemName === null) return throwNullException(\"itemName\");\n\n        if (origin.ContainsItemWithName(itemName)) {\n          if (foundListDef != null) {\n            throw new Error(\n              \"Could not add the item \" +\n                itemName +\n                \" to this list because it could come from either \" +\n                origin.name +\n                \" or \" +\n                foundListDef.name\n            );\n          } else {\n            foundListDef = origin;\n          }\n        }\n      }\n\n      if (foundListDef == null)\n        throw new Error(\n          \"Could not add the item \" +\n            itemName +\n            \" to this list because it isn't known to any list definitions previously associated with this list.\"\n        );\n\n      let item = new InkListItem(foundListDef.name, itemName);\n      let itemVal = foundListDef.ValueForItem(item);\n      this.Add(item, itemVal);\n    }\n  }\n  public ContainsItemNamed(itemName: string | null) {\n    for (let [key] of this) {\n      let item = InkListItem.fromSerializedKey(key);\n      if (item.itemName == itemName) return true;\n    }\n\n    return false;\n  }\n  public ContainsKey(key: InkListItem) {\n    return this.has(key.serialized());\n  }\n  public Add(key: InkListItem, value: number) {\n    let serializedKey = key.serialized();\n    if (this.has(serializedKey)) {\n      // Throw an exception to match the C# behavior.\n      throw new Error(`The Map already contains an entry for ${key}`);\n    }\n    this.set(serializedKey, value);\n  }\n  public Remove(key: InkListItem) {\n    return this.delete(key.serialized());\n  }\n  get Count() {\n    return this.size;\n  }\n  get originOfMaxItem(): ListDefinition | null {\n    if (this.origins == null) return null;\n\n    let maxOriginName = this.maxItem.Key.originName;\n    let result = null;\n    this.origins.every((origin) => {\n      if (origin.name == maxOriginName) {\n        result = origin;\n        return false;\n      } else return true;\n    });\n\n    return result;\n  }\n  get originNames(): string[] {\n    if (this.Count > 0) {\n      if (this._originNames == null && this.Count > 0) this._originNames = [];\n      else {\n        if (!this._originNames) this._originNames = [];\n        this._originNames.length = 0;\n      }\n\n      for (let [key] of this) {\n        let item = InkListItem.fromSerializedKey(key);\n        if (item.originName === null)\n          return throwNullException(\"item.originName\");\n        this._originNames.push(item.originName);\n      }\n    }\n\n    return this._originNames as string[];\n  }\n  public SetInitialOriginName(initialOriginName: string) {\n    this._originNames = [initialOriginName];\n  }\n  public SetInitialOriginNames(initialOriginNames: string[]) {\n    if (initialOriginNames == null) this._originNames = null;\n    else this._originNames = initialOriginNames.slice(); // store a copy\n  }\n  get maxItem() {\n    let max: KeyValuePair<InkListItem, number> = {\n      Key: InkListItem.Null,\n      Value: 0,\n    };\n    for (let [key, value] of this) {\n      let item = InkListItem.fromSerializedKey(key);\n      if (max.Key.isNull || value > max.Value)\n        max = { Key: item, Value: value };\n    }\n\n    return max;\n  }\n  get minItem() {\n    let min: KeyValuePair<InkListItem, number> = {\n      Key: InkListItem.Null,\n      Value: 0,\n    };\n    for (let [key, value] of this) {\n      let item = InkListItem.fromSerializedKey(key);\n      if (min.Key.isNull || value < min.Value) {\n        min = { Key: item, Value: value };\n      }\n    }\n    return min;\n  }\n  get inverse() {\n    let list = new InkList();\n    if (this.origins != null) {\n      for (let origin of this.origins) {\n        for (let [key, value] of origin.items) {\n          let item = InkListItem.fromSerializedKey(key);\n          if (!this.ContainsKey(item)) list.Add(item, value);\n        }\n      }\n    }\n    return list;\n  }\n  get all() {\n    let list = new InkList();\n    if (this.origins != null) {\n      for (let origin of this.origins) {\n        for (let [key, value] of origin.items) {\n          let item = InkListItem.fromSerializedKey(key);\n          list.set(item.serialized(), value);\n        }\n      }\n    }\n    return list;\n  }\n  public Union(otherList: InkList) {\n    let union = new InkList(this);\n    for (let [key, value] of otherList) {\n      union.set(key, value);\n    }\n    return union;\n  }\n  public Intersect(otherList: InkList) {\n    let intersection = new InkList();\n    for (let [key, value] of this) {\n      if (otherList.has(key)) intersection.set(key, value);\n    }\n\n    return intersection;\n  }\n  public Without(listToRemove: InkList) {\n    let result = new InkList(this);\n    for (let [key] of listToRemove) {\n      result.delete(key);\n    }\n\n    return result;\n  }\n  public Contains(otherList: InkList) {\n    for (let [key] of otherList) {\n      if (!this.has(key)) return false;\n    }\n\n    return true;\n  }\n  public GreaterThan(otherList: InkList) {\n    if (this.Count == 0) return false;\n    if (otherList.Count == 0) return true;\n\n    return this.minItem.Value > otherList.maxItem.Value;\n  }\n  public GreaterThanOrEquals(otherList: InkList) {\n    if (this.Count == 0) return false;\n    if (otherList.Count == 0) return true;\n\n    return (\n      this.minItem.Value >= otherList.minItem.Value &&\n      this.maxItem.Value >= otherList.maxItem.Value\n    );\n  }\n  public LessThan(otherList: InkList) {\n    if (otherList.Count == 0) return false;\n    if (this.Count == 0) return true;\n\n    return this.maxItem.Value < otherList.minItem.Value;\n  }\n  public LessThanOrEquals(otherList: InkList) {\n    if (otherList.Count == 0) return false;\n    if (this.Count == 0) return true;\n\n    return (\n      this.maxItem.Value <= otherList.maxItem.Value &&\n      this.minItem.Value <= otherList.minItem.Value\n    );\n  }\n  public MaxAsList() {\n    if (this.Count > 0) return new InkList(this.maxItem);\n    else return new InkList();\n  }\n  public MinAsList() {\n    if (this.Count > 0) return new InkList(this.minItem);\n    else return new InkList();\n  }\n  public ListWithSubRange(minBound: any, maxBound: any) {\n    if (this.Count == 0) return new InkList();\n\n    let ordered = this.orderedItems;\n\n    let minValue = 0;\n    let maxValue = Number.MAX_SAFE_INTEGER;\n\n    if (Number.isInteger(minBound)) {\n      minValue = minBound;\n    } else {\n      if (minBound instanceof InkList && minBound.Count > 0)\n        minValue = minBound.minItem.Value;\n    }\n\n    if (Number.isInteger(maxBound)) {\n      maxValue = maxBound;\n    } else {\n      if (minBound instanceof InkList && minBound.Count > 0)\n        maxValue = maxBound.maxItem.Value;\n    }\n\n    let subList = new InkList();\n    subList.SetInitialOriginNames(this.originNames);\n    for (let item of ordered) {\n      if (item.Value >= minValue && item.Value <= maxValue) {\n        subList.Add(item.Key, item.Value);\n      }\n    }\n\n    return subList;\n  }\n  public Equals(otherInkList: InkList) {\n    if (otherInkList instanceof InkList === false) return false;\n    if (otherInkList.Count != this.Count) return false;\n\n    for (let [key] of this) {\n      if (!otherInkList.has(key)) return false;\n    }\n\n    return true;\n  }\n  // GetHashCode not implemented\n  get orderedItems() {\n    // List<KeyValuePair<InkListItem, int>>\n    let ordered = new Array<KeyValuePair<InkListItem, number>>();\n\n    for (let [key, value] of this) {\n      let item = InkListItem.fromSerializedKey(key);\n      ordered.push({ Key: item, Value: value });\n    }\n\n    ordered.sort((x, y) => {\n      if (x.Key.originName === null) {\n        return throwNullException(\"x.Key.originName\");\n      }\n      if (y.Key.originName === null) {\n        return throwNullException(\"y.Key.originName\");\n      }\n\n      if (x.Value == y.Value) {\n        return x.Key.originName.localeCompare(y.Key.originName);\n      } else {\n        // TODO: refactor this bit into a numberCompareTo method?\n        if (x.Value < y.Value) return -1;\n        return x.Value > y.Value ? 1 : 0;\n      }\n    });\n\n    return ordered;\n  }\n  public toString() {\n    let ordered = this.orderedItems;\n\n    let sb = new StringBuilder();\n    for (let i = 0; i < ordered.length; i++) {\n      if (i > 0) sb.Append(\", \");\n\n      let item = ordered[i].Key;\n      if (item.itemName === null) return throwNullException(\"item.itemName\");\n      sb.Append(item.itemName);\n    }\n\n    return sb.toString();\n  }\n  // casting a InkList to a Number, for somereason, actually gives a number.\n  // This messes up the type detection when creating a Value from a InkList.\n  // Returning NaN here prevents that.\n  public valueOf() {\n    return NaN;\n  }\n}\n\n/**\n * In the original C# code, `InkListItem` was defined as value type, meaning\n * that two `InkListItem` would be considered equal as long as they held the\n * same values. This doesn't hold true in Javascript, as `InkListItem` is a\n * reference type (Javascript doesn't allow the creation of custom value types).\n *\n * The key equality of Map objects is based on the \"SameValueZero\" algorithm;\n * since `InkListItem` is a value type, two keys will only be considered\n * equal if they are, in fact, the same object. As we are trying to emulate\n * the original behavior as close as possible, this will lead to unforeseen\n * side effects.\n *\n * In order to have a key equality based on value semantics, we'll convert\n * `InkListItem` to a valid string representation and use this representation\n * as a key (strings are value types in Javascript). Rather than using the\n * type `string` directly, we'll alias it to `SerializedInkListItem` and use\n * this type as the key for our Map-based `InkList`.\n *\n * Reducing `InkListItem` to a JSON representation would not be bulletproof\n * in the general case, but for our needs it works well. The major downside of\n * this method is that we will have to to reconstruct the original `InkListItem`\n * every time we'll need to access its properties.\n */\nexport type SerializedInkListItem = string;\n\n/**\n * An interface inherited by `InkListItem`, defining exposed\n * properties. It's mainly used when deserializing a `InkListItem` from its\n * key (`SerializedInkListItem`)\n */\ninterface IInkListItem {\n  readonly originName: string | null;\n  readonly itemName: string | null;\n}\nexport interface KeyValuePair<K, V> {\n  Key: K;\n  Value: V;\n}\n","export class StoryException extends Error {\n  public useEndLineNumber: boolean;\n  public message: string;\n  public name: string;\n\n  constructor(message: string) {\n    super(message);\n    this.useEndLineNumber = false;\n    this.message = message;\n    this.name = \"StoryException\";\n  }\n}\n","/**\n * This interface normalize the `TryGet` behavior found in the original\n * C# project. Any `TryGet` method will return a object conforming to this\n * interface.\n *\n * The original function returns a boolean and has a second parameter called\n * item that is an `out`. Both are needed and we can't just return the item\n * because it'll always be truthy. Instead, we return an object containing\n * whether the result exists (`exists`) and the result itself (`result`).\n *\n * For instance a `TryGet` prototype would look like this:\n```\nTryGetItemWithValue(val: number, item: InkListItem): TryGetResult<InkListItem>{\n```\n *\n * On the other hand, dealing with the result can be done in the following way:\n```\nvar item = item.TryGetItemWithValue(intVal, InkListItem.Null);\nif (item.exists) {\n\tconsole.log(item.result)\n}\n```\n *\n */\nexport interface TryGetResult<T> {\n  result: T;\n  exists: boolean;\n}\n\nexport function tryGetValueFromMap<K, V>(\n  map: Map<K, V> | null,\n  key: K,\n  /* out */ value: V\n): TryGetResult<V> {\n  if (map === null) {\n    return { result: value, exists: false };\n  }\n\n  let val = map.get(key);\n\n  if (typeof val === \"undefined\") {\n    return { result: value, exists: false };\n  } else {\n    return { result: val, exists: true };\n  }\n}\n\nexport function tryParseInt(\n  value: any,\n  /* out */ defaultValue: number = 0\n): TryGetResult<number> {\n  let val = parseInt(value);\n\n  if (!Number.isNaN(val)) {\n    return { result: val, exists: true };\n  } else {\n    return { result: defaultValue, exists: false };\n  }\n}\n\nexport function tryParseFloat(\n  value: any,\n  /* out */ defaultValue: number = 0\n): TryGetResult<number> {\n  let val = parseFloat(value);\n\n  if (!Number.isNaN(val)) {\n    return { result: val, exists: true };\n  } else {\n    return { result: defaultValue, exists: false };\n  }\n}\n","import { InkObject } from \"./Object\";\nimport { Container } from \"./Container\";\n\nexport class SearchResult {\n  public obj: InkObject | null = null;\n  public approximate: boolean = false;\n\n  get correctObj() {\n    return this.approximate ? null : this.obj;\n  }\n\n  get container() {\n    return this.obj instanceof Container ? this.obj : null;\n  }\n\n  public copy() {\n    let searchResult = new SearchResult();\n    searchResult.obj = this.obj;\n    searchResult.approximate = this.approximate;\n\n    return searchResult;\n  }\n}\n","import { StringValue } from \"./Value\";\nimport { throwNullException } from \"./NullException\";\nimport { StringBuilder } from \"./StringBuilder\";\nimport { INamedContent } from \"./INamedContent\";\nimport { InkObject } from \"./Object\";\nimport { SearchResult } from \"./SearchResult\";\nimport { Path } from \"./Path\";\nimport { Debug } from \"./Debug\";\nimport { tryGetValueFromMap } from \"./TryGetResult\";\nimport { asINamedContentOrNull, asOrNull, asOrThrows } from \"./TypeAssertion\";\n\nexport class Container extends InkObject implements INamedContent {\n  public name: string | null = null;\n\n  public _content: InkObject[] = [];\n  public namedContent: Map<string, INamedContent> = new Map();\n\n  public visitsShouldBeCounted: boolean = false;\n  public turnIndexShouldBeCounted: boolean = false;\n  public countingAtStartOnly: boolean = false;\n\n  public _pathToFirstLeafContent: Path | null = null;\n\n  get hasValidName() {\n    return this.name != null && this.name.length > 0;\n  }\n  get content() {\n    return this._content;\n  }\n  set content(value: InkObject[]) {\n    this.AddContent(value);\n  }\n  get namedOnlyContent() {\n    let namedOnlyContentDict: Map<string, InkObject> | null = new Map();\n\n    for (let [key, value] of this.namedContent) {\n      let inkObject = asOrThrows(value, InkObject);\n      namedOnlyContentDict.set(key, inkObject);\n    }\n\n    for (let c of this.content) {\n      let named = asINamedContentOrNull(c);\n      if (named != null && named.hasValidName) {\n        namedOnlyContentDict.delete(named.name!);\n      }\n    }\n\n    if (namedOnlyContentDict.size == 0) namedOnlyContentDict = null;\n\n    return namedOnlyContentDict;\n  }\n  set namedOnlyContent(value: Map<string, InkObject> | null) {\n    let existingNamedOnly = this.namedOnlyContent;\n    if (existingNamedOnly != null) {\n      for (let [key] of existingNamedOnly) {\n        this.namedContent.delete(key);\n      }\n    }\n\n    if (value == null) return;\n\n    for (let [, val] of value) {\n      let named = asINamedContentOrNull(val);\n      if (named != null) this.AddToNamedContentOnly(named);\n    }\n  }\n  get countFlags(): number {\n    let flags: Container.CountFlags = 0;\n    if (this.visitsShouldBeCounted) flags |= Container.CountFlags.Visits;\n    if (this.turnIndexShouldBeCounted) flags |= Container.CountFlags.Turns;\n    if (this.countingAtStartOnly) flags |= Container.CountFlags.CountStartOnly;\n\n    if (flags == Container.CountFlags.CountStartOnly) {\n      flags = 0;\n    }\n\n    return flags;\n  }\n  set countFlags(value: number) {\n    let flag: Container.CountFlags = value;\n    if ((flag & Container.CountFlags.Visits) > 0)\n      this.visitsShouldBeCounted = true;\n    if ((flag & Container.CountFlags.Turns) > 0)\n      this.turnIndexShouldBeCounted = true;\n    if ((flag & Container.CountFlags.CountStartOnly) > 0)\n      this.countingAtStartOnly = true;\n  }\n  get pathToFirstLeafContent() {\n    if (this._pathToFirstLeafContent == null)\n      this._pathToFirstLeafContent = this.path.PathByAppendingPath(\n        this.internalPathToFirstLeafContent\n      );\n\n    return this._pathToFirstLeafContent;\n  }\n  get internalPathToFirstLeafContent() {\n    let components: Path.Component[] = [];\n    let container: Container = this;\n    while (container instanceof Container) {\n      if (container.content.length > 0) {\n        components.push(new Path.Component(0));\n        container = container.content[0] as Container;\n      }\n    }\n    return new Path(components);\n  }\n\n  public AddContent(contentObjOrList: InkObject | InkObject[]) {\n    if (contentObjOrList instanceof Array) {\n      let contentList = contentObjOrList as InkObject[];\n\n      for (let c of contentList) {\n        this.AddContent(c);\n      }\n    } else {\n      let contentObj = contentObjOrList as InkObject;\n\n      this._content.push(contentObj);\n\n      if (contentObj.parent) {\n        throw new Error(\"content is already in \" + contentObj.parent);\n      }\n\n      contentObj.parent = this;\n\n      this.TryAddNamedContent(contentObj);\n    }\n  }\n  public TryAddNamedContent(contentObj: InkObject) {\n    let namedContentObj = asINamedContentOrNull(contentObj);\n    if (namedContentObj != null && namedContentObj.hasValidName) {\n      this.AddToNamedContentOnly(namedContentObj);\n    }\n  }\n  public AddToNamedContentOnly(namedContentObj: INamedContent) {\n    Debug.AssertType(\n      namedContentObj,\n      InkObject,\n      \"Can only add Runtime.Objects to a Runtime.Container\"\n    );\n    let runtimeObj = asOrThrows(namedContentObj, InkObject);\n    runtimeObj.parent = this;\n\n    if (namedContentObj.name === null)\n      return throwNullException(\"namedContentObj.name\");\n    this.namedContent.set(namedContentObj.name!, namedContentObj);\n  }\n  public ContentAtPath(\n    path: Path,\n    partialPathStart: number = 0,\n    partialPathLength: number = -1\n  ) {\n    if (partialPathLength == -1) partialPathLength = path.length;\n\n    let result = new SearchResult();\n    result.approximate = false;\n\n    let currentContainer: Container | null = this;\n    let currentObj: InkObject = this;\n\n    for (let i = partialPathStart; i < partialPathLength; ++i) {\n      let comp = path.GetComponent(i);\n      if (currentContainer == null) {\n        result.approximate = true;\n        break;\n      }\n\n      let foundObj: InkObject | null =\n        currentContainer.ContentWithPathComponent(comp);\n\n      if (foundObj == null) {\n        result.approximate = true;\n        break;\n      }\n\n      currentObj = foundObj;\n      currentContainer = asOrNull(foundObj, Container);\n    }\n\n    result.obj = currentObj;\n\n    return result;\n  }\n  public InsertContent(contentObj: InkObject, index: number) {\n    this.content.splice(index, 0, contentObj);\n\n    if (contentObj.parent) {\n      throw new Error(\"content is already in \" + contentObj.parent);\n    }\n\n    contentObj.parent = this;\n\n    this.TryAddNamedContent(contentObj);\n  }\n  public AddContentsOfContainer(otherContainer: Container) {\n    this.content.push(...otherContainer.content);\n\n    for (let obj of otherContainer.content) {\n      obj.parent = this;\n      this.TryAddNamedContent(obj);\n    }\n  }\n  public ContentWithPathComponent(component: Path.Component): InkObject | null {\n    if (component.isIndex) {\n      if (component.index >= 0 && component.index < this.content.length) {\n        return this.content[component.index];\n      } else {\n        return null;\n      }\n    } else if (component.isParent) {\n      return this.parent;\n    } else {\n      if (component.name === null) {\n        return throwNullException(\"component.name\");\n      }\n      let foundContent = tryGetValueFromMap(\n        this.namedContent,\n        component.name,\n        null\n      );\n      if (foundContent.exists) {\n        return asOrThrows(foundContent.result, InkObject);\n      } else {\n        return null;\n      }\n    }\n  }\n  public BuildStringOfHierarchy(): string;\n  public BuildStringOfHierarchy(\n    sb: StringBuilder,\n    indentation: number,\n    pointedObj: InkObject | null\n  ): string;\n  public BuildStringOfHierarchy() {\n    let sb: StringBuilder;\n    if (arguments.length == 0) {\n      sb = new StringBuilder();\n      this.BuildStringOfHierarchy(sb, 0, null);\n      return sb.toString();\n    }\n\n    sb = arguments[0] as StringBuilder;\n    let indentation = arguments[1] as number;\n    let pointedObj = arguments[2] as InkObject | null;\n\n    function appendIndentation() {\n      const spacesPerIndent = 4; // Truly const in the original code\n      for (let i = 0; i < spacesPerIndent * indentation; ++i) {\n        sb.Append(\" \");\n      }\n    }\n\n    appendIndentation();\n    sb.Append(\"[\");\n\n    if (this.hasValidName) {\n      sb.AppendFormat(\" ({0})\", this.name);\n    }\n\n    if (this == pointedObj) {\n      sb.Append(\"  <---\");\n    }\n\n    sb.AppendLine();\n\n    indentation++;\n\n    for (let i = 0; i < this.content.length; ++i) {\n      let obj = this.content[i];\n\n      if (obj instanceof Container) {\n        let container = obj as Container;\n\n        container.BuildStringOfHierarchy(sb, indentation, pointedObj);\n      } else {\n        appendIndentation();\n        if (obj instanceof StringValue) {\n          sb.Append('\"');\n          sb.Append(obj.toString().replace(\"\\n\", \"\\\\n\"));\n          sb.Append('\"');\n        } else {\n          sb.Append(obj.toString());\n        }\n      }\n\n      if (i != this.content.length - 1) {\n        sb.Append(\",\");\n      }\n\n      if (!(obj instanceof Container) && obj == pointedObj) {\n        sb.Append(\"  <---\");\n      }\n\n      sb.AppendLine();\n    }\n\n    let onlyNamed: Map<string, INamedContent> = new Map();\n\n    for (let [key, value] of this.namedContent) {\n      if (this.content.indexOf(asOrThrows(value, InkObject)) >= 0) {\n        continue;\n      } else {\n        onlyNamed.set(key, value);\n      }\n    }\n\n    if (onlyNamed.size > 0) {\n      appendIndentation();\n      sb.AppendLine(\"-- named: --\");\n\n      for (let [, value] of onlyNamed) {\n        Debug.AssertType(\n          value,\n          Container,\n          \"Can only print out named Containers\"\n        );\n        let container = value as Container;\n        container.BuildStringOfHierarchy(sb, indentation, pointedObj);\n        sb.AppendLine();\n      }\n    }\n\n    indentation--;\n\n    appendIndentation();\n    sb.Append(\"]\");\n  }\n}\n\nexport namespace Container {\n  export enum CountFlags {\n    Visits = 1,\n    Turns = 2,\n    CountStartOnly = 4,\n  }\n}\n","import { InkObject } from \"./Object\";\n\nexport class Glue extends InkObject {\n  public toString() {\n    return \"Glue\";\n  }\n}\n","import { InkObject } from \"./Object\";\n\nexport class ControlCommand extends InkObject {\n  private _commandType: ControlCommand.CommandType;\n\n  get commandType(): ControlCommand.CommandType {\n    return this._commandType;\n  }\n\n  constructor(\n    commandType: ControlCommand.CommandType = ControlCommand.CommandType.NotSet\n  ) {\n    super();\n    this._commandType = commandType;\n  }\n\n  public Copy() {\n    return new ControlCommand(this.commandType);\n  }\n  public static EvalStart() {\n    return new ControlCommand(ControlCommand.CommandType.EvalStart);\n  }\n  public static EvalOutput() {\n    return new ControlCommand(ControlCommand.CommandType.EvalOutput);\n  }\n  public static EvalEnd() {\n    return new ControlCommand(ControlCommand.CommandType.EvalEnd);\n  }\n  public static Duplicate() {\n    return new ControlCommand(ControlCommand.CommandType.Duplicate);\n  }\n  public static PopEvaluatedValue() {\n    return new ControlCommand(ControlCommand.CommandType.PopEvaluatedValue);\n  }\n  public static PopFunction() {\n    return new ControlCommand(ControlCommand.CommandType.PopFunction);\n  }\n  public static PopTunnel() {\n    return new ControlCommand(ControlCommand.CommandType.PopTunnel);\n  }\n  public static BeginString() {\n    return new ControlCommand(ControlCommand.CommandType.BeginString);\n  }\n  public static EndString() {\n    return new ControlCommand(ControlCommand.CommandType.EndString);\n  }\n  public static NoOp() {\n    return new ControlCommand(ControlCommand.CommandType.NoOp);\n  }\n  public static ChoiceCount() {\n    return new ControlCommand(ControlCommand.CommandType.ChoiceCount);\n  }\n  public static Turns() {\n    return new ControlCommand(ControlCommand.CommandType.Turns);\n  }\n  public static TurnsSince() {\n    return new ControlCommand(ControlCommand.CommandType.TurnsSince);\n  }\n  public static ReadCount() {\n    return new ControlCommand(ControlCommand.CommandType.ReadCount);\n  }\n  public static Random() {\n    return new ControlCommand(ControlCommand.CommandType.Random);\n  }\n  public static SeedRandom() {\n    return new ControlCommand(ControlCommand.CommandType.SeedRandom);\n  }\n  public static VisitIndex() {\n    return new ControlCommand(ControlCommand.CommandType.VisitIndex);\n  }\n  public static SequenceShuffleIndex() {\n    return new ControlCommand(ControlCommand.CommandType.SequenceShuffleIndex);\n  }\n  public static StartThread() {\n    return new ControlCommand(ControlCommand.CommandType.StartThread);\n  }\n  public static Done() {\n    return new ControlCommand(ControlCommand.CommandType.Done);\n  }\n  public static End() {\n    return new ControlCommand(ControlCommand.CommandType.End);\n  }\n  public static ListFromInt() {\n    return new ControlCommand(ControlCommand.CommandType.ListFromInt);\n  }\n  public static ListRange() {\n    return new ControlCommand(ControlCommand.CommandType.ListRange);\n  }\n  public static ListRandom() {\n    return new ControlCommand(ControlCommand.CommandType.ListRandom);\n  }\n  public toString() {\n    return this.commandType.toString();\n  }\n}\n\nexport namespace ControlCommand {\n  export enum CommandType {\n    NotSet = -1,\n    EvalStart, // 0\n    EvalOutput, // 1\n    EvalEnd, // 2\n    Duplicate, // 3\n    PopEvaluatedValue, // 4\n    PopFunction, // 5\n    PopTunnel, // 6\n    BeginString, // 7\n    EndString, // 8\n    NoOp, // 9\n    ChoiceCount, // 10\n    Turns, // 11\n    TurnsSince, // 12\n    Random, // 13\n    SeedRandom, // 14\n    VisitIndex, // 15\n    SequenceShuffleIndex, // 16\n    StartThread, // 17\n    Done, // 18\n    End, // 19\n    ListFromInt, // 20\n    ListRange, // 21\n    ListRandom, // 22\n    ReadCount, // 23\n\n    TOTAL_VALUES,\n  }\n}\n","import { Path } from \"./Path\";\nimport { Container } from \"./Container\";\nimport { InkObject } from \"./Object\";\n\nexport class Pointer {\n  public container: Container | null = null;\n  public index: number = -1;\n\n  constructor();\n  constructor(container: Container | null, index: number);\n  constructor() {\n    if (arguments.length === 2) {\n      this.container = arguments[0];\n      this.index = arguments[1];\n    }\n  }\n\n  public Resolve(): InkObject | null {\n    if (this.index < 0) return this.container;\n    if (this.container == null) return null;\n    if (this.container.content.length == 0) return this.container;\n    if (this.index >= this.container.content.length) return null;\n\n    return this.container.content[this.index];\n  }\n\n  get isNull(): boolean {\n    return this.container == null;\n  }\n\n  get path(): Path | null {\n    if (this.isNull) return null;\n\n    if (this.index >= 0)\n      return this.container!.path.PathByAppendingComponent(\n        new Path.Component(this.index)\n      );\n    else return this.container!.path;\n  }\n\n  public toString(): string {\n    if (!this.container) return \"Ink Pointer (null)\";\n\n    return (\n      \"Ink Pointer -> \" +\n      this.container.path.toString() +\n      \" -- index \" +\n      this.index\n    );\n  }\n\n  // This method does not exist in the original C# code, but is here to maintain the\n  // value semantics of Pointer.\n  public copy(): Pointer {\n    return new Pointer(this.container, this.index);\n  }\n\n  public static StartOf(container: Container | null): Pointer {\n    return new Pointer(container, 0);\n  }\n\n  public static get Null(): Pointer {\n    return new Pointer(null, -1);\n  }\n}\n","import { Path } from \"./Path\";\nimport { PushPopType } from \"./PushPop\";\nimport { StringBuilder } from \"./StringBuilder\";\nimport { InkObject } from \"./Object\";\nimport { Pointer } from \"./Pointer\";\nimport { Container } from \"./Container\";\nimport { throwNullException } from \"./NullException\";\n\nexport class Divert extends InkObject {\n  get targetPath() {\n    if (this._targetPath != null && this._targetPath.isRelative) {\n      let targetObj = this.targetPointer.Resolve();\n      if (targetObj) {\n        this._targetPath = targetObj.path;\n      }\n    }\n\n    return this._targetPath;\n  }\n  set targetPath(value: Path | null) {\n    this._targetPath = value;\n    this._targetPointer = Pointer.Null;\n  }\n\n  public _targetPath: Path | null = null;\n\n  get targetPointer() {\n    if (this._targetPointer.isNull) {\n      let targetObj = this.ResolvePath(this._targetPath).obj;\n\n      if (this._targetPath === null)\n        return throwNullException(\"this._targetPath\");\n      if (this._targetPath.lastComponent === null)\n        return throwNullException(\"this._targetPath.lastComponent\");\n\n      if (this._targetPath.lastComponent.isIndex) {\n        if (targetObj === null) return throwNullException(\"targetObj\");\n        this._targetPointer.container =\n          targetObj.parent instanceof Container ? targetObj.parent : null;\n        this._targetPointer.index = this._targetPath.lastComponent.index;\n      } else {\n        this._targetPointer = Pointer.StartOf(\n          targetObj instanceof Container ? targetObj : null\n        );\n      }\n    }\n\n    return this._targetPointer.copy();\n  }\n\n  public _targetPointer: Pointer = Pointer.Null;\n\n  get targetPathString() {\n    if (this.targetPath == null) return null;\n\n    return this.CompactPathString(this.targetPath);\n  }\n  set targetPathString(value: string | null) {\n    if (value == null) {\n      this.targetPath = null;\n    } else {\n      this.targetPath = new Path(value);\n    }\n  }\n\n  public variableDivertName: string | null = null;\n  get hasVariableTarget() {\n    return this.variableDivertName != null;\n  }\n\n  public pushesToStack: boolean = false;\n  public stackPushType: PushPopType = 0;\n\n  public isExternal: boolean = false;\n  public externalArgs: number = 0;\n\n  public isConditional: boolean = false;\n\n  constructor(stackPushType?: PushPopType) {\n    super();\n    this.pushesToStack = false;\n\n    if (typeof stackPushType !== \"undefined\") {\n      this.pushesToStack = true;\n      this.stackPushType = stackPushType;\n    }\n  }\n\n  public Equals(obj: Divert | null) {\n    let otherDivert = obj;\n    if (otherDivert instanceof Divert) {\n      if (this.hasVariableTarget == otherDivert.hasVariableTarget) {\n        if (this.hasVariableTarget) {\n          return this.variableDivertName == otherDivert.variableDivertName;\n        } else {\n          if (this.targetPath === null)\n            return throwNullException(\"this.targetPath\");\n          return this.targetPath.Equals(otherDivert.targetPath);\n        }\n      }\n    }\n    return false;\n  }\n\n  public toString() {\n    if (this.hasVariableTarget) {\n      return \"Divert(variable: \" + this.variableDivertName + \")\";\n    } else if (this.targetPath == null) {\n      return \"Divert(null)\";\n    } else {\n      let sb = new StringBuilder();\n\n      let targetStr = this.targetPath.toString();\n      // int? targetLineNum = DebugLineNumberOfPath (targetPath);\n      let targetLineNum = null;\n      if (targetLineNum != null) {\n        targetStr = \"line \" + targetLineNum;\n      }\n\n      sb.Append(\"Divert\");\n\n      if (this.isConditional) sb.Append(\"?\");\n\n      if (this.pushesToStack) {\n        if (this.stackPushType == PushPopType.Function) {\n          sb.Append(\" function\");\n        } else {\n          sb.Append(\" tunnel\");\n        }\n      }\n\n      sb.Append(\" -> \");\n      sb.Append(this.targetPathString);\n\n      sb.Append(\" (\");\n      sb.Append(targetStr);\n      sb.Append(\")\");\n\n      return sb.toString();\n    }\n  }\n}\n","import { InkObject } from \"./Object\";\nimport { Path } from \"./Path\";\nimport { Container } from \"./Container\";\nimport { throwNullException } from \"./NullException\";\n\nexport class ChoicePoint extends InkObject {\n  public _pathOnChoice: Path | null = null;\n  public hasCondition: boolean = false;\n  public hasStartContent: boolean = false;\n  public hasChoiceOnlyContent: boolean = false;\n  public isInvisibleDefault: boolean = false;\n  public onceOnly: boolean = true;\n\n  constructor(onceOnly: boolean = true) {\n    super();\n    this.onceOnly = onceOnly;\n  }\n  get pathOnChoice(): Path | null {\n    if (this._pathOnChoice != null && this._pathOnChoice.isRelative) {\n      let choiceTargetObj = this.choiceTarget;\n      if (choiceTargetObj) {\n        this._pathOnChoice = choiceTargetObj.path;\n      }\n    }\n    return this._pathOnChoice;\n  }\n  set pathOnChoice(value: Path | null) {\n    this._pathOnChoice = value;\n  }\n  get choiceTarget(): Container | null {\n    if (this._pathOnChoice === null)\n      return throwNullException(\"ChoicePoint._pathOnChoice\");\n    return this.ResolvePath(this._pathOnChoice).container;\n  }\n  get pathStringOnChoice(): string {\n    if (this.pathOnChoice === null)\n      return throwNullException(\"ChoicePoint.pathOnChoice\");\n    return this.CompactPathString(this.pathOnChoice);\n  }\n  set pathStringOnChoice(value: string) {\n    this.pathOnChoice = new Path(value);\n  }\n  get flags(): number {\n    let flags = 0;\n    if (this.hasCondition) flags |= 1;\n    if (this.hasStartContent) flags |= 2;\n    if (this.hasChoiceOnlyContent) flags |= 4;\n    if (this.isInvisibleDefault) flags |= 8;\n    if (this.onceOnly) flags |= 16;\n    return flags;\n  }\n  set flags(value: number) {\n    this.hasCondition = (value & 1) > 0;\n    this.hasStartContent = (value & 2) > 0;\n    this.hasChoiceOnlyContent = (value & 4) > 0;\n    this.isInvisibleDefault = (value & 8) > 0;\n    this.onceOnly = (value & 16) > 0;\n  }\n  public toString(): string {\n    if (this.pathOnChoice === null)\n      return throwNullException(\"ChoicePoint.pathOnChoice\");\n    // int? targetLineNum = DebugLineNumberOfPath (pathOnChoice);\n    let targetLineNum = null;\n    let targetString = this.pathOnChoice.toString();\n\n    if (targetLineNum != null) {\n      targetString = \" line \" + targetLineNum + \"(\" + targetString + \")\";\n    }\n\n    return \"Choice: -> \" + targetString;\n  }\n}\n","import { InkObject } from \"./Object\";\nimport { Path } from \"./Path\";\n\nexport class VariableReference extends InkObject {\n  public name: string | null;\n  public pathForCount: Path | null = null;\n\n  get containerForCount() {\n    if (this.pathForCount === null) return null;\n    return this.ResolvePath(this.pathForCount).container;\n  }\n  get pathStringForCount() {\n    if (this.pathForCount === null) return null;\n\n    return this.CompactPathString(this.pathForCount);\n  }\n  set pathStringForCount(value: string | null) {\n    if (value === null) this.pathForCount = null;\n    else this.pathForCount = new Path(value);\n  }\n\n  constructor(name: string | null = null) {\n    super();\n    this.name = name;\n  }\n\n  public toString() {\n    if (this.name != null) {\n      return \"var(\" + this.name + \")\";\n    } else {\n      let pathStr = this.pathStringForCount;\n      return \"read_count(\" + pathStr + \")\";\n    }\n  }\n}\n","import { InkObject } from \"./Object\";\n\nexport class VariableAssignment extends InkObject {\n  public readonly variableName: string | null;\n  public readonly isNewDeclaration: boolean;\n  public isGlobal: boolean;\n\n  constructor(variableName: string | null, isNewDeclaration: boolean) {\n    super();\n    this.variableName = variableName || null;\n    this.isNewDeclaration = !!isNewDeclaration;\n    this.isGlobal = false;\n  }\n\n  public toString(): string {\n    return \"VarAssign to \" + this.variableName;\n  }\n}\n","import { InkObject } from \"./Object\";\n\nexport class Void extends InkObject {}\n","import { Value, ValueType, IntValue, ListValue, BoolValue } from \"./Value\";\nimport { StoryException } from \"./StoryException\";\nimport { Void } from \"./Void\";\nimport { Path } from \"./Path\";\nimport { InkList, InkListItem } from \"./InkList\";\nimport { InkObject } from \"./Object\";\nimport { asOrNull, asOrThrows, asBooleanOrThrows } from \"./TypeAssertion\";\nimport { throwNullException } from \"./NullException\";\n\ntype BinaryOp<T> = (left: T, right: T) => any;\ntype UnaryOp<T> = (val: T) => any;\n\nexport class NativeFunctionCall extends InkObject {\n  public static readonly Add: string = \"+\";\n  public static readonly Subtract: string = \"-\";\n  public static readonly Divide: string = \"/\";\n  public static readonly Multiply: string = \"*\";\n  public static readonly Mod: string = \"%\";\n  public static readonly Negate: string = \"_\";\n  public static readonly Equal: string = \"==\";\n  public static readonly Greater: string = \">\";\n  public static readonly Less: string = \"<\";\n  public static readonly GreaterThanOrEquals: string = \">=\";\n  public static readonly LessThanOrEquals: string = \"<=\";\n  public static readonly NotEquals: string = \"!=\";\n  public static readonly Not: string = \"!\";\n  public static readonly And: string = \"&&\";\n  public static readonly Or: string = \"||\";\n  public static readonly Min: string = \"MIN\";\n  public static readonly Max: string = \"MAX\";\n  public static readonly Pow: string = \"POW\";\n  public static readonly Floor: string = \"FLOOR\";\n  public static readonly Ceiling: string = \"CEILING\";\n  public static readonly Int: string = \"INT\";\n  public static readonly Float: string = \"FLOAT\";\n  public static readonly Has: string = \"?\";\n  public static readonly Hasnt: string = \"!?\";\n  public static readonly Intersect: string = \"^\";\n  public static readonly ListMin: string = \"LIST_MIN\";\n  public static readonly ListMax: string = \"LIST_MAX\";\n  public static readonly All: string = \"LIST_ALL\";\n  public static readonly Count: string = \"LIST_COUNT\";\n  public static readonly ValueOfList: string = \"LIST_VALUE\";\n  public static readonly Invert: string = \"LIST_INVERT\";\n\n  public static CallWithName(functionName: string) {\n    return new NativeFunctionCall(functionName);\n  }\n\n  public static CallExistsWithName(functionName: string) {\n    this.GenerateNativeFunctionsIfNecessary();\n    return this._nativeFunctions!.get(functionName);\n  }\n\n  get name() {\n    if (this._name === null)\n      return throwNullException(\"NativeFunctionCall._name\");\n    return this._name;\n  }\n  set name(value: string) {\n    this._name = value;\n    if (!this._isPrototype) {\n      if (NativeFunctionCall._nativeFunctions === null)\n        throwNullException(\"NativeFunctionCall._nativeFunctions\");\n      else\n        this._prototype =\n          NativeFunctionCall._nativeFunctions.get(this._name) || null;\n    }\n  }\n  public _name: string | null = null;\n\n  get numberOfParameters() {\n    if (this._prototype) {\n      return this._prototype.numberOfParameters;\n    } else {\n      return this._numberOfParameters;\n    }\n  }\n  set numberOfParameters(value: number) {\n    this._numberOfParameters = value;\n  }\n  public _numberOfParameters: number = 0;\n\n  public Call(parameters: InkObject[]): InkObject | null {\n    if (this._prototype) {\n      return this._prototype.Call(parameters);\n    }\n\n    if (this.numberOfParameters != parameters.length) {\n      throw new Error(\"Unexpected number of parameters\");\n    }\n\n    let hasList = false;\n    for (let p of parameters) {\n      if (p instanceof Void)\n        throw new StoryException(\n          'Attempting to perform operation on a void value. Did you forget to \"return\" a value from a function you called here?'\n        );\n      if (p instanceof ListValue) hasList = true;\n    }\n\n    if (parameters.length == 2 && hasList) {\n      return this.CallBinaryListOperation(parameters);\n    }\n\n    let coercedParams = this.CoerceValuesToSingleType(parameters);\n    let coercedType = coercedParams[0].valueType;\n\n    if (coercedType == ValueType.Int) {\n      return this.CallType<number>(coercedParams);\n    } else if (coercedType == ValueType.Float) {\n      return this.CallType<number>(coercedParams);\n    } else if (coercedType == ValueType.String) {\n      return this.CallType<string>(coercedParams);\n    } else if (coercedType == ValueType.DivertTarget) {\n      return this.CallType<Path>(coercedParams);\n    } else if (coercedType == ValueType.List) {\n      return this.CallType<InkList>(coercedParams);\n    }\n\n    return null;\n  }\n\n  public CallType<T>(parametersOfSingleType: Array<Value<T>>) {\n    let param1 = asOrThrows(parametersOfSingleType[0], Value);\n    let valType = param1.valueType;\n\n    let val1 = param1 as Value<T>;\n\n    let paramCount = parametersOfSingleType.length;\n\n    if (paramCount == 2 || paramCount == 1) {\n      if (this._operationFuncs === null)\n        return throwNullException(\"NativeFunctionCall._operationFuncs\");\n      let opForTypeObj = this._operationFuncs.get(valType);\n      if (!opForTypeObj) {\n        const key = ValueType[valType];\n        throw new StoryException(\n          \"Cannot perform operation \" + this.name + \" on \" + key\n        );\n      }\n\n      if (paramCount == 2) {\n        let param2 = asOrThrows(parametersOfSingleType[1], Value);\n\n        let val2 = param2 as Value<T>;\n\n        let opForType = opForTypeObj as BinaryOp<T>;\n\n        if (val1.value === null || val2.value === null)\n          return throwNullException(\"NativeFunctionCall.Call BinaryOp values\");\n        let resultVal = opForType(val1.value, val2.value);\n\n        return Value.Create(resultVal);\n      } else {\n        let opForType = opForTypeObj as UnaryOp<T>;\n\n        if (val1.value === null)\n          return throwNullException(\"NativeFunctionCall.Call UnaryOp value\");\n        let resultVal = opForType(val1.value);\n\n        // This code is different from upstream. Since JavaScript treats\n        // integers and floats as the same numbers, it's impossible\n        // to force an number to be either an integer or a float.\n        //\n        // It can be useful to force a specific number type\n        // (especially for divisions), so the result of INT() & FLOAT()\n        // is coerced to the the proper value type.\n        //\n        // Note that we also force all other unary operation to\n        // return the same value type, although this is only\n        // meaningful for numbers. See `Value.Create`.\n        if (this.name === NativeFunctionCall.Int) {\n          return Value.Create(resultVal, ValueType.Int);\n        } else if (this.name === NativeFunctionCall.Float) {\n          return Value.Create(resultVal, ValueType.Float);\n        } else {\n          return Value.Create(resultVal, param1.valueType);\n        }\n      }\n    } else {\n      throw new Error(\n        \"Unexpected number of parameters to NativeFunctionCall: \" +\n          parametersOfSingleType.length\n      );\n    }\n  }\n\n  public CallBinaryListOperation(parameters: InkObject[]) {\n    if (\n      (this.name == \"+\" || this.name == \"-\") &&\n      parameters[0] instanceof ListValue &&\n      parameters[1] instanceof IntValue\n    )\n      return this.CallListIncrementOperation(parameters);\n\n    let v1 = asOrThrows(parameters[0], Value);\n    let v2 = asOrThrows(parameters[1], Value);\n\n    if (\n      (this.name == \"&&\" || this.name == \"||\") &&\n      (v1.valueType != ValueType.List || v2.valueType != ValueType.List)\n    ) {\n      if (this._operationFuncs === null)\n        return throwNullException(\"NativeFunctionCall._operationFuncs\");\n      let op = this._operationFuncs.get(ValueType.Int) as BinaryOp<number>;\n      if (op === null)\n        return throwNullException(\n          \"NativeFunctionCall.CallBinaryListOperation op\"\n        );\n      let result = asBooleanOrThrows(\n        op(v1.isTruthy ? 1 : 0, v2.isTruthy ? 1 : 0)\n      );\n      return new BoolValue(result);\n    }\n\n    if (v1.valueType == ValueType.List && v2.valueType == ValueType.List)\n      return this.CallType<InkList>([v1, v2]);\n\n    throw new StoryException(\n      \"Can not call use \" +\n        this.name +\n        \" operation on \" +\n        ValueType[v1.valueType] +\n        \" and \" +\n        ValueType[v2.valueType]\n    );\n  }\n\n  public CallListIncrementOperation(listIntParams: InkObject[]) {\n    let listVal = asOrThrows(listIntParams[0], ListValue);\n    let intVal = asOrThrows(listIntParams[1], IntValue);\n\n    let resultInkList = new InkList();\n\n    if (listVal.value === null)\n      return throwNullException(\n        \"NativeFunctionCall.CallListIncrementOperation listVal.value\"\n      );\n    for (let [listItemKey, listItemValue] of listVal.value) {\n      let listItem = InkListItem.fromSerializedKey(listItemKey);\n\n      if (this._operationFuncs === null)\n        return throwNullException(\"NativeFunctionCall._operationFuncs\");\n      let intOp = this._operationFuncs.get(ValueType.Int) as BinaryOp<number>;\n\n      if (intVal.value === null)\n        return throwNullException(\n          \"NativeFunctionCall.CallListIncrementOperation intVal.value\"\n        );\n      let targetInt = intOp(listItemValue, intVal.value);\n\n      let itemOrigin = null;\n      if (listVal.value.origins === null)\n        return throwNullException(\n          \"NativeFunctionCall.CallListIncrementOperation listVal.value.origins\"\n        );\n      for (let origin of listVal.value.origins) {\n        if (origin.name == listItem.originName) {\n          itemOrigin = origin;\n          break;\n        }\n      }\n      if (itemOrigin != null) {\n        let incrementedItem = itemOrigin.TryGetItemWithValue(\n          targetInt,\n          InkListItem.Null\n        );\n        if (incrementedItem.exists)\n          resultInkList.Add(incrementedItem.result, targetInt);\n      }\n    }\n\n    return new ListValue(resultInkList);\n  }\n\n  public CoerceValuesToSingleType(parametersIn: InkObject[]) {\n    let valType = ValueType.Int;\n\n    let specialCaseList: null | ListValue = null;\n\n    for (let obj of parametersIn) {\n      let val = asOrThrows(obj, Value);\n      if (val.valueType > valType) {\n        valType = val.valueType;\n      }\n\n      if (val.valueType == ValueType.List) {\n        specialCaseList = asOrNull(val, ListValue);\n      }\n    }\n\n    let parametersOut = [];\n\n    if (ValueType[valType] == ValueType[ValueType.List]) {\n      for (let inkObjectVal of parametersIn) {\n        let val = asOrThrows(inkObjectVal, Value);\n        if (val.valueType == ValueType.List) {\n          parametersOut.push(val);\n        } else if (val.valueType == ValueType.Int) {\n          let intVal = parseInt(val.valueObject);\n\n          specialCaseList = asOrThrows(specialCaseList, ListValue);\n          if (specialCaseList.value === null)\n            return throwNullException(\n              \"NativeFunctionCall.CoerceValuesToSingleType specialCaseList.value\"\n            );\n          let list = specialCaseList.value.originOfMaxItem;\n\n          if (list === null)\n            return throwNullException(\n              \"NativeFunctionCall.CoerceValuesToSingleType list\"\n            );\n          let item = list.TryGetItemWithValue(intVal, InkListItem.Null);\n          if (item.exists) {\n            let castedValue = new ListValue(item.result, intVal);\n            parametersOut.push(castedValue);\n          } else\n            throw new StoryException(\n              \"Could not find List item with the value \" +\n                intVal +\n                \" in \" +\n                list.name\n            );\n        } else {\n          const key = ValueType[val.valueType];\n          throw new StoryException(\n            \"Cannot mix Lists and \" + key + \" values in this operation\"\n          );\n        }\n      }\n    } else {\n      for (let inkObjectVal of parametersIn) {\n        let val = asOrThrows(inkObjectVal, Value);\n        let castedValue = val.Cast(valType);\n        parametersOut.push(castedValue);\n      }\n    }\n\n    return parametersOut;\n  }\n\n  constructor(name: string);\n  constructor(name: string, numberOfParameters: number);\n  constructor();\n  constructor() {\n    super();\n\n    if (arguments.length === 0) {\n      NativeFunctionCall.GenerateNativeFunctionsIfNecessary();\n    } else if (arguments.length === 1) {\n      let name = arguments[0];\n      NativeFunctionCall.GenerateNativeFunctionsIfNecessary();\n      this.name = name;\n    } else if (arguments.length === 2) {\n      let name = arguments[0];\n      let numberOfParameters = arguments[1];\n\n      this._isPrototype = true;\n      this.name = name;\n      this.numberOfParameters = numberOfParameters;\n    }\n  }\n\n  public static Identity<T>(t: T): any {\n    return t;\n  }\n\n  public static GenerateNativeFunctionsIfNecessary() {\n    if (this._nativeFunctions == null) {\n      this._nativeFunctions = new Map();\n\n      // Int operations\n      this.AddIntBinaryOp(this.Add, (x, y) => x + y);\n      this.AddIntBinaryOp(this.Subtract, (x, y) => x - y);\n      this.AddIntBinaryOp(this.Multiply, (x, y) => x * y);\n      this.AddIntBinaryOp(this.Divide, (x, y) => Math.floor(x / y));\n      this.AddIntBinaryOp(this.Mod, (x, y) => x % y);\n      this.AddIntUnaryOp(this.Negate, (x) => -x);\n\n      this.AddIntBinaryOp(this.Equal, (x, y) => x == y);\n      this.AddIntBinaryOp(this.Greater, (x, y) => x > y);\n      this.AddIntBinaryOp(this.Less, (x, y) => x < y);\n      this.AddIntBinaryOp(this.GreaterThanOrEquals, (x, y) => x >= y);\n      this.AddIntBinaryOp(this.LessThanOrEquals, (x, y) => x <= y);\n      this.AddIntBinaryOp(this.NotEquals, (x, y) => x != y);\n      this.AddIntUnaryOp(this.Not, (x) => x == 0);\n\n      this.AddIntBinaryOp(this.And, (x, y) => x != 0 && y != 0);\n      this.AddIntBinaryOp(this.Or, (x, y) => x != 0 || y != 0);\n\n      this.AddIntBinaryOp(this.Max, (x, y) => Math.max(x, y));\n      this.AddIntBinaryOp(this.Min, (x, y) => Math.min(x, y));\n\n      this.AddIntBinaryOp(this.Pow, (x, y) => Math.pow(x, y));\n      this.AddIntUnaryOp(this.Floor, NativeFunctionCall.Identity);\n      this.AddIntUnaryOp(this.Ceiling, NativeFunctionCall.Identity);\n      this.AddIntUnaryOp(this.Int, NativeFunctionCall.Identity);\n      this.AddIntUnaryOp(this.Float, (x) => x);\n\n      // Float operations\n      this.AddFloatBinaryOp(this.Add, (x, y) => x + y);\n      this.AddFloatBinaryOp(this.Subtract, (x, y) => x - y);\n      this.AddFloatBinaryOp(this.Multiply, (x, y) => x * y);\n      this.AddFloatBinaryOp(this.Divide, (x, y) => x / y);\n      this.AddFloatBinaryOp(this.Mod, (x, y) => x % y);\n      this.AddFloatUnaryOp(this.Negate, (x) => -x);\n\n      this.AddFloatBinaryOp(this.Equal, (x, y) => x == y);\n      this.AddFloatBinaryOp(this.Greater, (x, y) => x > y);\n      this.AddFloatBinaryOp(this.Less, (x, y) => x < y);\n      this.AddFloatBinaryOp(this.GreaterThanOrEquals, (x, y) => x >= y);\n      this.AddFloatBinaryOp(this.LessThanOrEquals, (x, y) => x <= y);\n      this.AddFloatBinaryOp(this.NotEquals, (x, y) => x != y);\n      this.AddFloatUnaryOp(this.Not, (x) => x == 0.0);\n\n      this.AddFloatBinaryOp(this.And, (x, y) => x != 0.0 && y != 0.0);\n      this.AddFloatBinaryOp(this.Or, (x, y) => x != 0.0 || y != 0.0);\n\n      this.AddFloatBinaryOp(this.Max, (x, y) => Math.max(x, y));\n      this.AddFloatBinaryOp(this.Min, (x, y) => Math.min(x, y));\n\n      this.AddFloatBinaryOp(this.Pow, (x, y) => Math.pow(x, y));\n      this.AddFloatUnaryOp(this.Floor, (x) => Math.floor(x));\n      this.AddFloatUnaryOp(this.Ceiling, (x) => Math.ceil(x));\n      this.AddFloatUnaryOp(this.Int, (x) => Math.floor(x));\n      this.AddFloatUnaryOp(this.Float, NativeFunctionCall.Identity);\n\n      // String operations\n      this.AddStringBinaryOp(this.Add, (x, y) => x + y); // concat\n      this.AddStringBinaryOp(this.Equal, (x, y) => x === y);\n      this.AddStringBinaryOp(this.NotEquals, (x, y) => !(x === y));\n      this.AddStringBinaryOp(this.Has, (x, y) => x.includes(y));\n      this.AddStringBinaryOp(this.Hasnt, (x, y) => !x.includes(y));\n\n      this.AddListBinaryOp(this.Add, (x, y) => x.Union(y));\n      this.AddListBinaryOp(this.Subtract, (x, y) => x.Without(y));\n      this.AddListBinaryOp(this.Has, (x, y) => x.Contains(y));\n      this.AddListBinaryOp(this.Hasnt, (x, y) => !x.Contains(y));\n      this.AddListBinaryOp(this.Intersect, (x, y) => x.Intersect(y));\n\n      this.AddListBinaryOp(this.Equal, (x, y) => x.Equals(y));\n      this.AddListBinaryOp(this.Greater, (x, y) => x.GreaterThan(y));\n      this.AddListBinaryOp(this.Less, (x, y) => x.LessThan(y));\n      this.AddListBinaryOp(this.GreaterThanOrEquals, (x, y) =>\n        x.GreaterThanOrEquals(y)\n      );\n      this.AddListBinaryOp(this.LessThanOrEquals, (x, y) =>\n        x.LessThanOrEquals(y)\n      );\n      this.AddListBinaryOp(this.NotEquals, (x, y) => !x.Equals(y));\n\n      this.AddListBinaryOp(this.And, (x, y) => x.Count > 0 && y.Count > 0);\n      this.AddListBinaryOp(this.Or, (x, y) => x.Count > 0 || y.Count > 0);\n\n      this.AddListUnaryOp(this.Not, (x) => (x.Count == 0 ? 1 : 0));\n\n      this.AddListUnaryOp(this.Invert, (x) => x.inverse);\n      this.AddListUnaryOp(this.All, (x) => x.all);\n      this.AddListUnaryOp(this.ListMin, (x) => x.MinAsList());\n      this.AddListUnaryOp(this.ListMax, (x) => x.MaxAsList());\n      this.AddListUnaryOp(this.Count, (x) => x.Count);\n      this.AddListUnaryOp(this.ValueOfList, (x) => x.maxItem.Value);\n\n      let divertTargetsEqual = (d1: Path, d2: Path) => d1.Equals(d2);\n      let divertTargetsNotEqual = (d1: Path, d2: Path) => !d1.Equals(d2);\n      this.AddOpToNativeFunc(\n        this.Equal,\n        2,\n        ValueType.DivertTarget,\n        divertTargetsEqual\n      );\n      this.AddOpToNativeFunc(\n        this.NotEquals,\n        2,\n        ValueType.DivertTarget,\n        divertTargetsNotEqual\n      );\n    }\n  }\n\n  public AddOpFuncForType(\n    valType: ValueType,\n    op: UnaryOp<number | InkList> | BinaryOp<number | string | InkList | Path>\n  ): void {\n    if (this._operationFuncs == null) {\n      this._operationFuncs = new Map();\n    }\n\n    this._operationFuncs.set(valType, op);\n  }\n\n  public static AddOpToNativeFunc(\n    name: string,\n    args: number,\n    valType: ValueType,\n    op: UnaryOp<any> | BinaryOp<any>\n  ): void {\n    if (this._nativeFunctions === null)\n      return throwNullException(\"NativeFunctionCall._nativeFunctions\");\n    let nativeFunc = this._nativeFunctions.get(name);\n    if (!nativeFunc) {\n      nativeFunc = new NativeFunctionCall(name, args);\n      this._nativeFunctions.set(name, nativeFunc);\n    }\n\n    nativeFunc.AddOpFuncForType(valType, op);\n  }\n\n  public static AddIntBinaryOp(name: string, op: BinaryOp<number>) {\n    this.AddOpToNativeFunc(name, 2, ValueType.Int, op);\n  }\n  public static AddIntUnaryOp(name: string, op: UnaryOp<number>) {\n    this.AddOpToNativeFunc(name, 1, ValueType.Int, op);\n  }\n\n  public static AddFloatBinaryOp(name: string, op: BinaryOp<number>) {\n    this.AddOpToNativeFunc(name, 2, ValueType.Float, op);\n  }\n  public static AddFloatUnaryOp(name: string, op: UnaryOp<number>) {\n    this.AddOpToNativeFunc(name, 1, ValueType.Float, op);\n  }\n\n  public static AddStringBinaryOp(name: string, op: BinaryOp<string>) {\n    this.AddOpToNativeFunc(name, 2, ValueType.String, op);\n  }\n\n  public static AddListBinaryOp(name: string, op: BinaryOp<InkList>) {\n    this.AddOpToNativeFunc(name, 2, ValueType.List, op);\n  }\n  public static AddListUnaryOp(name: string, op: UnaryOp<InkList>) {\n    this.AddOpToNativeFunc(name, 1, ValueType.List, op);\n  }\n\n  public toString() {\n    return 'Native \"' + this.name + '\"';\n  }\n\n  public _prototype: NativeFunctionCall | null = null;\n  public _isPrototype: boolean = false;\n  public _operationFuncs: Map<ValueType, BinaryOp<any> | UnaryOp<any>> | null =\n    null;\n  public static _nativeFunctions: Map<string, NativeFunctionCall> | null = null;\n}\n","import { InkObject } from \"./Object\";\n\nexport class Tag extends InkObject {\n  public readonly text: string;\n\n  constructor(tagText: string) {\n    super();\n    this.text = tagText.toString() || \"\";\n  }\n\n  public toString(): string {\n    return \"# \" + this.text;\n  }\n}\n","import { Path } from \"./Path\";\nimport { CallStack } from \"./CallStack\";\nimport { throwNullException } from \"./NullException\";\nimport { InkObject } from \"./Object\";\n\nexport class Choice extends InkObject {\n  public text: string = \"\";\n  public index: number = 0;\n  public threadAtGeneration: CallStack.Thread | null = null;\n  public sourcePath: string = \"\";\n  public targetPath: Path | null = null;\n  public isInvisibleDefault: boolean = false;\n  public originalThreadIndex: number = 0;\n\n  get pathStringOnChoice(): string {\n    if (this.targetPath === null)\n      return throwNullException(\"Choice.targetPath\");\n    return this.targetPath.toString();\n  }\n  set pathStringOnChoice(value: string) {\n    this.targetPath = new Path(value);\n  }\n}\n","import { InkListItem, SerializedInkListItem } from \"./InkList\";\nimport { TryGetResult } from \"./TryGetResult\";\n\nexport class ListDefinition {\n  public _name: string;\n  public _items: Map<SerializedInkListItem, number> | null;\n  public _itemNameToValues: Map<string, number>;\n\n  constructor(name: string, items: Map<string, number> | null) {\n    this._name = name || \"\";\n    this._items = null;\n    this._itemNameToValues = items || new Map();\n  }\n  get name() {\n    return this._name;\n  }\n  get items() {\n    if (this._items == null) {\n      this._items = new Map();\n      for (let [key, value] of this._itemNameToValues) {\n        let item = new InkListItem(this.name, key);\n        this._items.set(item.serialized(), value);\n      }\n    }\n\n    return this._items;\n  }\n\n  public ValueForItem(item: InkListItem) {\n    if (!item.itemName) return 0;\n\n    let intVal = this._itemNameToValues.get(item.itemName);\n    if (typeof intVal !== \"undefined\") return intVal;\n    else return 0;\n  }\n  public ContainsItem(item: InkListItem) {\n    if (!item.itemName) return false;\n    if (item.originName != this.name) return false;\n\n    return this._itemNameToValues.has(item.itemName);\n  }\n  public ContainsItemWithName(itemName: string) {\n    return this._itemNameToValues.has(itemName);\n  }\n  public TryGetItemWithValue(\n    val: number,\n    /* out */ item: InkListItem\n  ): TryGetResult<InkListItem> {\n    for (let [key, value] of this._itemNameToValues) {\n      if (value == val) {\n        item = new InkListItem(this.name, key);\n        return { result: item, exists: true };\n      }\n    }\n\n    item = InkListItem.Null;\n    return { result: item, exists: false };\n  }\n  public TryGetValueForItem(\n    item: InkListItem,\n    /* out */ intVal: number\n  ): TryGetResult<number> {\n    if (!item.itemName) return { result: 0, exists: false };\n    let value = this._itemNameToValues.get(item.itemName);\n\n    if (!value) return { result: 0, exists: false };\n    return { result: value, exists: true };\n  }\n}\n","import { InkListItem } from \"./InkList\";\nimport { ListValue } from \"./Value\";\nimport { ListDefinition } from \"./ListDefinition\";\nimport { TryGetResult } from \"./TryGetResult\";\nimport { throwNullException } from \"./NullException\";\n\nexport class ListDefinitionsOrigin {\n  protected _lists: Map<string, ListDefinition>;\n  protected _allUnambiguousListValueCache: Map<string, ListValue>;\n\n  constructor(lists: ListDefinition[]) {\n    this._lists = new Map();\n    this._allUnambiguousListValueCache = new Map();\n\n    for (let list of lists) {\n      this._lists.set(list.name, list);\n\n      for (let [key, val] of list.items) {\n        let item = InkListItem.fromSerializedKey(key);\n        let listValue = new ListValue(item, val);\n\n        if (!item.itemName) {\n          throw new Error(\"item.itemName is null or undefined.\");\n        }\n\n        this._allUnambiguousListValueCache.set(item.itemName, listValue);\n        this._allUnambiguousListValueCache.set(item.fullName, listValue);\n      }\n    }\n  }\n  get lists(): ListDefinition[] {\n    let listOfLists: ListDefinition[] = [];\n\n    for (let [, value] of this._lists) {\n      listOfLists.push(value);\n    }\n\n    return listOfLists;\n  }\n  public TryListGetDefinition(\n    name: string | null,\n    /* out */ def: ListDefinition | null\n  ): TryGetResult<ListDefinition | null> {\n    if (name === null) {\n      return { result: def, exists: false };\n    }\n    // initially, this function returns a boolean and the second parameter is an out.\n    let definition = this._lists.get(name);\n    if (!definition) return { result: def, exists: false };\n\n    return { result: definition, exists: true };\n  }\n  public FindSingleItemListWithName(name: string | null) {\n    if (name === null) {\n      return throwNullException(\"name\");\n    }\n    let val = this._allUnambiguousListValueCache.get(name);\n\n    if (typeof val !== \"undefined\") {\n      return val;\n    }\n\n    return null;\n  }\n}\n","import { Container } from \"./Container\";\nimport {\n  Value,\n  IntValue,\n  FloatValue,\n  StringValue,\n  DivertTargetValue,\n  VariablePointerValue,\n  ListValue,\n  BoolValue,\n} from \"./Value\";\nimport { Glue } from \"./Glue\";\nimport { ControlCommand } from \"./ControlCommand\";\nimport { PushPopType } from \"./PushPop\";\nimport { Divert } from \"./Divert\";\nimport { ChoicePoint } from \"./ChoicePoint\";\nimport { VariableReference } from \"./VariableReference\";\nimport { VariableAssignment } from \"./VariableAssignment\";\nimport { NativeFunctionCall } from \"./NativeFunctionCall\";\nimport { Void } from \"./Void\";\nimport { Tag } from \"./Tag\";\nimport { Path } from \"./Path\";\nimport { Choice } from \"./Choice\";\nimport { ListDefinition } from \"./ListDefinition\";\nimport { ListDefinitionsOrigin } from \"./ListDefinitionsOrigin\";\nimport { InkListItem, InkList } from \"./InkList\";\nimport { InkObject } from \"./Object\";\nimport { asOrNull } from \"./TypeAssertion\";\nimport { throwNullException } from \"./NullException\";\nimport { SimpleJson } from \"./SimpleJson\";\n\nexport class JsonSerialisation {\n  public static JArrayToRuntimeObjList(\n    jArray: any[],\n    skipLast: boolean = false\n  ) {\n    let count = jArray.length;\n    if (skipLast) count--;\n\n    let list: InkObject[] = [];\n\n    for (let i = 0; i < count; i++) {\n      let jTok = jArray[i];\n      let runtimeObj = this.JTokenToRuntimeObject(jTok);\n      if (runtimeObj === null) {\n        return throwNullException(\"runtimeObj\");\n      }\n      list.push(runtimeObj);\n    }\n\n    return list;\n  }\n\n  public static WriteDictionaryRuntimeObjs(\n    writer: SimpleJson.Writer,\n    dictionary: Map<string, InkObject>\n  ) {\n    writer.WriteObjectStart();\n    for (let [key, value] of dictionary) {\n      writer.WritePropertyStart(key);\n      this.WriteRuntimeObject(writer, value);\n      writer.WritePropertyEnd();\n    }\n    writer.WriteObjectEnd();\n  }\n\n  public static WriteListRuntimeObjs(\n    writer: SimpleJson.Writer,\n    list: InkObject[]\n  ) {\n    writer.WriteArrayStart();\n    for (let value of list) {\n      this.WriteRuntimeObject(writer, value);\n    }\n    writer.WriteArrayEnd();\n  }\n\n  public static WriteIntDictionary(\n    writer: SimpleJson.Writer,\n    dict: Map<string, number>\n  ) {\n    writer.WriteObjectStart();\n    for (let [key, value] of dict) {\n      writer.WriteIntProperty(key, value);\n    }\n    writer.WriteObjectEnd();\n  }\n\n  public static WriteRuntimeObject(\n    writer: SimpleJson.Writer,\n    obj: InkObject\n  ): void {\n    let container = asOrNull(obj, Container);\n    if (container) {\n      this.WriteRuntimeContainer(writer, container);\n      return;\n    }\n\n    let divert = asOrNull(obj, Divert);\n    if (divert) {\n      let divTypeKey = \"->\";\n      if (divert.isExternal) {\n        divTypeKey = \"x()\";\n      } else if (divert.pushesToStack) {\n        if (divert.stackPushType == PushPopType.Function) {\n          divTypeKey = \"f()\";\n        } else if (divert.stackPushType == PushPopType.Tunnel) {\n          divTypeKey = \"->t->\";\n        }\n      }\n\n      let targetStr;\n      if (divert.hasVariableTarget) {\n        targetStr = divert.variableDivertName;\n      } else {\n        targetStr = divert.targetPathString;\n      }\n\n      writer.WriteObjectStart();\n      writer.WriteProperty(divTypeKey, targetStr);\n\n      if (divert.hasVariableTarget) {\n        writer.WriteProperty(\"var\", true);\n      }\n\n      if (divert.isConditional) {\n        writer.WriteProperty(\"c\", true);\n      }\n\n      if (divert.externalArgs > 0) {\n        writer.WriteIntProperty(\"exArgs\", divert.externalArgs);\n      }\n\n      writer.WriteObjectEnd();\n      return;\n    }\n\n    let choicePoint = asOrNull(obj, ChoicePoint);\n    if (choicePoint) {\n      writer.WriteObjectStart();\n      writer.WriteProperty(\"*\", choicePoint.pathStringOnChoice);\n      writer.WriteIntProperty(\"flg\", choicePoint.flags);\n      writer.WriteObjectEnd();\n      return;\n    }\n\n    let boolVal = asOrNull(obj, BoolValue);\n    if (boolVal) {\n      writer.WriteBool(boolVal.value);\n      return;\n    }\n\n    let intVal = asOrNull(obj, IntValue);\n    if (intVal) {\n      writer.WriteInt(intVal.value);\n      return;\n    }\n\n    let floatVal = asOrNull(obj, FloatValue);\n    if (floatVal) {\n      writer.WriteFloat(floatVal.value);\n      return;\n    }\n\n    let strVal = asOrNull(obj, StringValue);\n    if (strVal) {\n      if (strVal.isNewline) {\n        writer.Write(\"\\n\", false);\n      } else {\n        writer.WriteStringStart();\n        writer.WriteStringInner(\"^\");\n        writer.WriteStringInner(strVal.value);\n        writer.WriteStringEnd();\n      }\n      return;\n    }\n\n    let listVal = asOrNull(obj, ListValue);\n    if (listVal) {\n      this.WriteInkList(writer, listVal);\n      return;\n    }\n\n    let divTargetVal = asOrNull(obj, DivertTargetValue);\n    if (divTargetVal) {\n      writer.WriteObjectStart();\n      if (divTargetVal.value === null) {\n        return throwNullException(\"divTargetVal.value\");\n      }\n      writer.WriteProperty(\"^->\", divTargetVal.value.componentsString);\n      writer.WriteObjectEnd();\n\n      return;\n    }\n\n    let varPtrVal = asOrNull(obj, VariablePointerValue);\n    if (varPtrVal) {\n      writer.WriteObjectStart();\n      writer.WriteProperty(\"^var\", varPtrVal.value);\n      writer.WriteIntProperty(\"ci\", varPtrVal.contextIndex);\n      writer.WriteObjectEnd();\n      return;\n    }\n\n    let glue = asOrNull(obj, Glue);\n    if (glue) {\n      writer.Write(\"<>\");\n      return;\n    }\n\n    let controlCmd = asOrNull(obj, ControlCommand);\n    if (controlCmd) {\n      writer.Write(\n        JsonSerialisation._controlCommandNames[controlCmd.commandType]\n      );\n      return;\n    }\n\n    let nativeFunc = asOrNull(obj, NativeFunctionCall);\n    if (nativeFunc) {\n      let name = nativeFunc.name;\n\n      if (name == \"^\") name = \"L^\";\n\n      writer.Write(name);\n      return;\n    }\n\n    let varRef = asOrNull(obj, VariableReference);\n    if (varRef) {\n      writer.WriteObjectStart();\n      let readCountPath = varRef.pathStringForCount;\n      if (readCountPath != null) {\n        writer.WriteProperty(\"CNT?\", readCountPath);\n      } else {\n        writer.WriteProperty(\"VAR?\", varRef.name);\n      }\n\n      writer.WriteObjectEnd();\n      return;\n    }\n\n    let varAss = asOrNull(obj, VariableAssignment);\n    if (varAss) {\n      writer.WriteObjectStart();\n\n      let key = varAss.isGlobal ? \"VAR=\" : \"temp=\";\n      writer.WriteProperty(key, varAss.variableName);\n\n      // Reassignment?\n      if (!varAss.isNewDeclaration) writer.WriteProperty(\"re\", true);\n\n      writer.WriteObjectEnd();\n\n      return;\n    }\n\n    let voidObj = asOrNull(obj, Void);\n    if (voidObj) {\n      writer.Write(\"void\");\n      return;\n    }\n\n    let tag = asOrNull(obj, Tag);\n    if (tag) {\n      writer.WriteObjectStart();\n      writer.WriteProperty(\"#\", tag.text);\n      writer.WriteObjectEnd();\n      return;\n    }\n\n    let choice = asOrNull(obj, Choice);\n    if (choice) {\n      this.WriteChoice(writer, choice);\n      return;\n    }\n\n    throw new Error(\"Failed to convert runtime object to Json token: \" + obj);\n  }\n\n  public static JObjectToDictionaryRuntimeObjs(jObject: Record<string, any>) {\n    let dict: Map<string, InkObject> = new Map();\n\n    for (let key in jObject) {\n      if (jObject.hasOwnProperty(key)) {\n        let inkObject = this.JTokenToRuntimeObject(jObject[key]);\n        if (inkObject === null) {\n          return throwNullException(\"inkObject\");\n        }\n        dict.set(key, inkObject);\n      }\n    }\n\n    return dict;\n  }\n\n  public static JObjectToIntDictionary(jObject: Record<string, any>) {\n    let dict: Map<string, number> = new Map();\n    for (let key in jObject) {\n      if (jObject.hasOwnProperty(key)) {\n        dict.set(key, parseInt(jObject[key]));\n      }\n    }\n    return dict;\n  }\n\n  public static JTokenToRuntimeObject(token: any): InkObject | null {\n    if (\n      (typeof token === \"number\" && !isNaN(token)) ||\n      typeof token === \"boolean\"\n    ) {\n      return Value.Create(token);\n    }\n\n    if (typeof token === \"string\") {\n      let str = token.toString();\n\n      // String value\n      let firstChar = str[0];\n      if (firstChar == \"^\") return new StringValue(str.substring(1));\n      else if (firstChar == \"\\n\" && str.length == 1)\n        return new StringValue(\"\\n\");\n\n      // Glue\n      if (str == \"<>\") return new Glue();\n\n      // Control commands (would looking up in a hash set be faster?)\n      for (let i = 0; i < JsonSerialisation._controlCommandNames.length; ++i) {\n        let cmdName = JsonSerialisation._controlCommandNames[i];\n        if (str == cmdName) {\n          return new ControlCommand(i);\n        }\n      }\n\n      // Native functions\n      if (str == \"L^\") str = \"^\";\n      if (NativeFunctionCall.CallExistsWithName(str))\n        return NativeFunctionCall.CallWithName(str);\n\n      // Pop\n      if (str == \"->->\") return ControlCommand.PopTunnel();\n      else if (str == \"~ret\") return ControlCommand.PopFunction();\n\n      // Void\n      if (str == \"void\") return new Void();\n    }\n\n    if (typeof token === \"object\" && !Array.isArray(token)) {\n      let obj = token as Record<string, any>;\n      let propValue;\n\n      // Divert target value to path\n      if (obj[\"^->\"]) {\n        propValue = obj[\"^->\"];\n        return new DivertTargetValue(new Path(propValue.toString()));\n      }\n\n      // VariablePointerValue\n      if (obj[\"^var\"]) {\n        propValue = obj[\"^var\"];\n        let varPtr = new VariablePointerValue(propValue.toString());\n        if (\"ci\" in obj) {\n          propValue = obj[\"ci\"];\n          varPtr.contextIndex = parseInt(propValue);\n        }\n        return varPtr;\n      }\n\n      // Divert\n      let isDivert = false;\n      let pushesToStack = false;\n      let divPushType = PushPopType.Function;\n      let external = false;\n      if ((propValue = obj[\"->\"])) {\n        isDivert = true;\n      } else if ((propValue = obj[\"f()\"])) {\n        isDivert = true;\n        pushesToStack = true;\n        divPushType = PushPopType.Function;\n      } else if ((propValue = obj[\"->t->\"])) {\n        isDivert = true;\n        pushesToStack = true;\n        divPushType = PushPopType.Tunnel;\n      } else if ((propValue = obj[\"x()\"])) {\n        isDivert = true;\n        external = true;\n        pushesToStack = false;\n        divPushType = PushPopType.Function;\n      }\n\n      if (isDivert) {\n        let divert = new Divert();\n        divert.pushesToStack = pushesToStack;\n        divert.stackPushType = divPushType;\n        divert.isExternal = external;\n\n        let target = propValue.toString();\n\n        if ((propValue = obj[\"var\"])) divert.variableDivertName = target;\n        else divert.targetPathString = target;\n\n        divert.isConditional = !!obj[\"c\"];\n\n        if (external) {\n          if ((propValue = obj[\"exArgs\"]))\n            divert.externalArgs = parseInt(propValue);\n        }\n\n        return divert;\n      }\n\n      // Choice\n      if ((propValue = obj[\"*\"])) {\n        let choice = new ChoicePoint();\n        choice.pathStringOnChoice = propValue.toString();\n\n        if ((propValue = obj[\"flg\"])) choice.flags = parseInt(propValue);\n\n        return choice;\n      }\n\n      // Variable reference\n      if ((propValue = obj[\"VAR?\"])) {\n        return new VariableReference(propValue.toString());\n      } else if ((propValue = obj[\"CNT?\"])) {\n        let readCountVarRef = new VariableReference();\n        readCountVarRef.pathStringForCount = propValue.toString();\n        return readCountVarRef;\n      }\n\n      // Variable assignment\n      let isVarAss = false;\n      let isGlobalVar = false;\n      if ((propValue = obj[\"VAR=\"])) {\n        isVarAss = true;\n        isGlobalVar = true;\n      } else if ((propValue = obj[\"temp=\"])) {\n        isVarAss = true;\n        isGlobalVar = false;\n      }\n      if (isVarAss) {\n        let varName = propValue.toString();\n        let isNewDecl = !obj[\"re\"];\n        let varAss = new VariableAssignment(varName, isNewDecl);\n        varAss.isGlobal = isGlobalVar;\n        return varAss;\n      }\n      if (obj[\"#\"] !== undefined) {\n        propValue = obj[\"#\"];\n        return new Tag(propValue.toString());\n      }\n\n      // List value\n      if ((propValue = obj[\"list\"])) {\n        // var listContent = (Dictionary<string, object>)propValue;\n        let listContent = propValue as Record<string, any>;\n        let rawList = new InkList();\n        if ((propValue = obj[\"origins\"])) {\n          // var namesAsObjs = (List<object>)propValue;\n          let namesAsObjs = propValue as string[];\n          // rawList.SetInitialOriginNames(namesAsObjs.Cast<string>().ToList());\n          rawList.SetInitialOriginNames(namesAsObjs);\n        }\n\n        for (let key in listContent) {\n          if (listContent.hasOwnProperty(key)) {\n            let nameToVal = listContent[key];\n            let item = new InkListItem(key);\n            let val = parseInt(nameToVal);\n            rawList.Add(item, val);\n          }\n        }\n\n        return new ListValue(rawList);\n      }\n\n      if (obj[\"originalChoicePath\"] != null) return this.JObjectToChoice(obj);\n    }\n\n    // Array is always a Runtime.Container\n    if (Array.isArray(token)) {\n      return this.JArrayToContainer(token);\n    }\n\n    if (token === null || token === undefined) return null;\n\n    throw new Error(\n      \"Failed to convert token to runtime object: \" +\n        this.toJson(token, [\"parent\"])\n    );\n  }\n\n  public static toJson<T>(\n    me: T,\n    removes?: (keyof T)[],\n    space?: number\n  ): string {\n    return JSON.stringify(\n      me,\n      (k, v) => (removes?.some((r) => r === k) ? undefined : v),\n      space\n    );\n  }\n\n  public static WriteRuntimeContainer(\n    writer: SimpleJson.Writer,\n    container: Container | null,\n    withoutName: boolean = false\n  ) {\n    writer.WriteArrayStart();\n    if (container === null) {\n      return throwNullException(\"container\");\n    }\n    for (let c of container.content) this.WriteRuntimeObject(writer, c);\n\n    let namedOnlyContent = container.namedOnlyContent;\n    let countFlags = container.countFlags;\n    let hasNameProperty = container.name != null && !withoutName;\n\n    let hasTerminator =\n      namedOnlyContent != null || countFlags > 0 || hasNameProperty;\n    if (hasTerminator) {\n      writer.WriteObjectStart();\n    }\n\n    if (namedOnlyContent != null) {\n      for (let [key, value] of namedOnlyContent) {\n        let name = key;\n        let namedContainer = asOrNull(value, Container);\n        writer.WritePropertyStart(name);\n        this.WriteRuntimeContainer(writer, namedContainer, true);\n        writer.WritePropertyEnd();\n      }\n    }\n\n    if (countFlags > 0) writer.WriteIntProperty(\"#f\", countFlags);\n\n    if (hasNameProperty) writer.WriteProperty(\"#n\", container.name);\n\n    if (hasTerminator) writer.WriteObjectEnd();\n    else writer.WriteNull();\n\n    writer.WriteArrayEnd();\n  }\n\n  public static JArrayToContainer(jArray: any[]) {\n    let container = new Container();\n    container.content = this.JArrayToRuntimeObjList(jArray, true);\n\n    let terminatingObj = jArray[jArray.length - 1] as Record<string, any>;\n    if (terminatingObj != null) {\n      let namedOnlyContent = new Map();\n\n      for (let key in terminatingObj) {\n        if (key == \"#f\") {\n          container.countFlags = parseInt(terminatingObj[key]);\n        } else if (key == \"#n\") {\n          container.name = terminatingObj[key].toString();\n        } else {\n          let namedContentItem = this.JTokenToRuntimeObject(\n            terminatingObj[key]\n          );\n          // var namedSubContainer = namedContentItem as Container;\n          let namedSubContainer = asOrNull(namedContentItem, Container);\n          if (namedSubContainer) namedSubContainer.name = key;\n          namedOnlyContent.set(key, namedContentItem);\n        }\n      }\n\n      container.namedOnlyContent = namedOnlyContent;\n    }\n\n    return container;\n  }\n\n  public static JObjectToChoice(jObj: Record<string, any>) {\n    let choice = new Choice();\n    choice.text = jObj[\"text\"].toString();\n    choice.index = parseInt(jObj[\"index\"]);\n    choice.sourcePath = jObj[\"originalChoicePath\"].toString();\n    choice.originalThreadIndex = parseInt(jObj[\"originalThreadIndex\"]);\n    choice.pathStringOnChoice = jObj[\"targetPath\"].toString();\n    return choice;\n  }\n\n  public static WriteChoice(writer: SimpleJson.Writer, choice: Choice) {\n    writer.WriteObjectStart();\n    writer.WriteProperty(\"text\", choice.text);\n    writer.WriteIntProperty(\"index\", choice.index);\n    writer.WriteProperty(\"originalChoicePath\", choice.sourcePath);\n    writer.WriteIntProperty(\"originalThreadIndex\", choice.originalThreadIndex);\n    writer.WriteProperty(\"targetPath\", choice.pathStringOnChoice);\n    writer.WriteObjectEnd();\n  }\n\n  public static WriteInkList(writer: SimpleJson.Writer, listVal: ListValue) {\n    let rawList = listVal.value;\n    if (rawList === null) {\n      return throwNullException(\"rawList\");\n    }\n\n    writer.WriteObjectStart();\n    writer.WritePropertyStart(\"list\");\n    writer.WriteObjectStart();\n\n    for (let [key, val] of rawList) {\n      let item = InkListItem.fromSerializedKey(key);\n      let itemVal = val;\n\n      if (item.itemName === null) {\n        return throwNullException(\"item.itemName\");\n      }\n\n      writer.WritePropertyNameStart();\n      writer.WritePropertyNameInner(item.originName ? item.originName : \"?\");\n      writer.WritePropertyNameInner(\".\");\n      writer.WritePropertyNameInner(item.itemName);\n      writer.WritePropertyNameEnd();\n\n      writer.Write(itemVal);\n\n      writer.WritePropertyEnd();\n    }\n\n    writer.WriteObjectEnd();\n\n    writer.WritePropertyEnd();\n\n    if (\n      rawList.Count == 0 &&\n      rawList.originNames != null &&\n      rawList.originNames.length > 0\n    ) {\n      writer.WritePropertyStart(\"origins\");\n      writer.WriteArrayStart();\n      for (let name of rawList.originNames) writer.Write(name);\n      writer.WriteArrayEnd();\n      writer.WritePropertyEnd();\n    }\n\n    writer.WriteObjectEnd();\n  }\n\n  public static ListDefinitionsToJToken(origin: ListDefinitionsOrigin) {\n    let result: Record<string, any> = {};\n\n    for (let def of origin.lists) {\n      let listDefJson: Record<string, any> = {};\n\n      for (let [key, val] of def.items) {\n        let item = InkListItem.fromSerializedKey(key);\n        if (item.itemName === null) {\n          return throwNullException(\"item.itemName\");\n        }\n        listDefJson[item.itemName] = val;\n      }\n\n      result[def.name] = listDefJson;\n    }\n\n    return result;\n  }\n\n  public static JTokenToListDefinitions(obj: Record<string, any>) {\n    // var defsObj = (Dictionary<string, object>)obj;\n    let defsObj = obj;\n\n    let allDefs: ListDefinition[] = [];\n\n    for (let key in defsObj) {\n      if (defsObj.hasOwnProperty(key)) {\n        let name = key.toString();\n        // var listDefJson = (Dictionary<string, object>)kv.Value;\n        let listDefJson = defsObj[key] as Record<string, any>;\n\n        // Cast (string, object) to (string, int) for items\n        let items: Map<string, number> = new Map();\n\n        for (let nameValueKey in listDefJson) {\n          if (defsObj.hasOwnProperty(key)) {\n            let nameValue = listDefJson[nameValueKey];\n            items.set(nameValueKey, parseInt(nameValue));\n          }\n        }\n\n        let def = new ListDefinition(name, items);\n        allDefs.push(def);\n      }\n    }\n\n    return new ListDefinitionsOrigin(allDefs);\n  }\n\n  private static _controlCommandNames = (() => {\n    let _controlCommandNames: string[] = [];\n\n    _controlCommandNames[ControlCommand.CommandType.EvalStart] = \"ev\";\n    _controlCommandNames[ControlCommand.CommandType.EvalOutput] = \"out\";\n    _controlCommandNames[ControlCommand.CommandType.EvalEnd] = \"/ev\";\n    _controlCommandNames[ControlCommand.CommandType.Duplicate] = \"du\";\n    _controlCommandNames[ControlCommand.CommandType.PopEvaluatedValue] = \"pop\";\n    _controlCommandNames[ControlCommand.CommandType.PopFunction] = \"~ret\";\n    _controlCommandNames[ControlCommand.CommandType.PopTunnel] = \"->->\";\n    _controlCommandNames[ControlCommand.CommandType.BeginString] = \"str\";\n    _controlCommandNames[ControlCommand.CommandType.EndString] = \"/str\";\n    _controlCommandNames[ControlCommand.CommandType.NoOp] = \"nop\";\n    _controlCommandNames[ControlCommand.CommandType.ChoiceCount] = \"choiceCnt\";\n    _controlCommandNames[ControlCommand.CommandType.Turns] = \"turn\";\n    _controlCommandNames[ControlCommand.CommandType.TurnsSince] = \"turns\";\n    _controlCommandNames[ControlCommand.CommandType.ReadCount] = \"readc\";\n    _controlCommandNames[ControlCommand.CommandType.Random] = \"rnd\";\n    _controlCommandNames[ControlCommand.CommandType.SeedRandom] = \"srnd\";\n    _controlCommandNames[ControlCommand.CommandType.VisitIndex] = \"visit\";\n    _controlCommandNames[ControlCommand.CommandType.SequenceShuffleIndex] =\n      \"seq\";\n    _controlCommandNames[ControlCommand.CommandType.StartThread] = \"thread\";\n    _controlCommandNames[ControlCommand.CommandType.Done] = \"done\";\n    _controlCommandNames[ControlCommand.CommandType.End] = \"end\";\n    _controlCommandNames[ControlCommand.CommandType.ListFromInt] = \"listInt\";\n    _controlCommandNames[ControlCommand.CommandType.ListRange] = \"range\";\n    _controlCommandNames[ControlCommand.CommandType.ListRandom] = \"lrnd\";\n\n    for (let i = 0; i < ControlCommand.CommandType.TOTAL_VALUES; ++i) {\n      if (_controlCommandNames[i] == null)\n        throw new Error(\"Control command not accounted for in serialisation\");\n    }\n\n    return _controlCommandNames;\n  })();\n}\n","import { PushPopType } from \"./PushPop\";\nimport { Path } from \"./Path\";\nimport { Story } from \"./Story\";\nimport { JsonSerialisation } from \"./JsonSerialisation\";\nimport { ListValue } from \"./Value\";\nimport { StringBuilder } from \"./StringBuilder\";\nimport { Pointer } from \"./Pointer\";\nimport { InkObject } from \"./Object\";\nimport { Debug } from \"./Debug\";\nimport { tryGetValueFromMap } from \"./TryGetResult\";\nimport { throwNullException } from \"./NullException\";\nimport { SimpleJson } from \"./SimpleJson\";\n\nexport class CallStack {\n  get elements() {\n    return this.callStack;\n  }\n\n  get depth() {\n    return this.elements.length;\n  }\n\n  get currentElement() {\n    let thread = this._threads[this._threads.length - 1];\n    let cs = thread.callstack;\n    return cs[cs.length - 1];\n  }\n\n  get currentElementIndex() {\n    return this.callStack.length - 1;\n  }\n\n  get currentThread(): CallStack.Thread {\n    return this._threads[this._threads.length - 1];\n  }\n  set currentThread(value: CallStack.Thread) {\n    Debug.Assert(\n      this._threads.length == 1,\n      \"Shouldn't be directly setting the current thread when we have a stack of them\"\n    );\n\n    this._threads.length = 0;\n    this._threads.push(value);\n  }\n\n  get canPop() {\n    return this.callStack.length > 1;\n  }\n\n  constructor(storyContext: Story);\n  constructor(toCopy: CallStack);\n  constructor() {\n    if (arguments[0] instanceof Story) {\n      let storyContext = arguments[0] as Story;\n\n      this._startOfRoot = Pointer.StartOf(storyContext.rootContentContainer);\n      this.Reset();\n    } else {\n      let toCopy = arguments[0] as CallStack;\n\n      this._threads = [];\n      for (let otherThread of toCopy._threads) {\n        this._threads.push(otherThread.Copy());\n      }\n      this._threadCounter = toCopy._threadCounter;\n      this._startOfRoot = toCopy._startOfRoot.copy();\n    }\n  }\n\n  public Reset() {\n    this._threads = [];\n    this._threads.push(new CallStack.Thread());\n\n    this._threads[0].callstack.push(\n      new CallStack.Element(PushPopType.Tunnel, this._startOfRoot)\n    );\n  }\n\n  public SetJsonToken(jObject: Record<string, any>, storyContext: Story) {\n    this._threads.length = 0;\n\n    // TODO: (List<object>) jObject [\"threads\"];\n    let jThreads: any[] = jObject[\"threads\"];\n\n    for (let jThreadTok of jThreads) {\n      // TODO: var jThreadObj = (Dictionary<string, object>)jThreadTok;\n      let jThreadObj = jThreadTok;\n      let thread = new CallStack.Thread(jThreadObj, storyContext);\n      this._threads.push(thread);\n    }\n\n    // TODO: (int)jObject [\"threadCounter\"];\n    this._threadCounter = parseInt(jObject[\"threadCounter\"]);\n    this._startOfRoot = Pointer.StartOf(storyContext.rootContentContainer);\n  }\n  public WriteJson(w: SimpleJson.Writer) {\n    w.WriteObject((writer) => {\n      writer.WritePropertyStart(\"threads\");\n      writer.WriteArrayStart();\n\n      for (let thread of this._threads) {\n        thread.WriteJson(writer);\n      }\n\n      writer.WriteArrayEnd();\n      writer.WritePropertyEnd();\n\n      writer.WritePropertyStart(\"threadCounter\");\n      writer.WriteInt(this._threadCounter);\n      writer.WritePropertyEnd();\n    });\n  }\n\n  public PushThread() {\n    let newThread = this.currentThread.Copy();\n    this._threadCounter++;\n    newThread.threadIndex = this._threadCounter;\n    this._threads.push(newThread);\n  }\n\n  public ForkThread() {\n    let forkedThread = this.currentThread.Copy();\n    this._threadCounter++;\n    forkedThread.threadIndex = this._threadCounter;\n    return forkedThread;\n  }\n\n  public PopThread() {\n    if (this.canPopThread) {\n      this._threads.splice(this._threads.indexOf(this.currentThread), 1); // should be equivalent to a pop()\n    } else {\n      throw new Error(\"Can't pop thread\");\n    }\n  }\n\n  get canPopThread() {\n    return this._threads.length > 1 && !this.elementIsEvaluateFromGame;\n  }\n\n  get elementIsEvaluateFromGame() {\n    return this.currentElement.type == PushPopType.FunctionEvaluationFromGame;\n  }\n\n  public Push(\n    type: PushPopType,\n    externalEvaluationStackHeight: number = 0,\n    outputStreamLengthWithPushed: number = 0\n  ) {\n    let element = new CallStack.Element(\n      type,\n      this.currentElement.currentPointer,\n      false\n    );\n\n    element.evaluationStackHeightWhenPushed = externalEvaluationStackHeight;\n    element.functionStartInOutputStream = outputStreamLengthWithPushed;\n\n    this.callStack.push(element);\n  }\n\n  public CanPop(type: PushPopType | null = null) {\n    if (!this.canPop) return false;\n\n    if (type == null) return true;\n\n    return this.currentElement.type == type;\n  }\n\n  public Pop(type: PushPopType | null = null) {\n    if (this.CanPop(type)) {\n      this.callStack.pop();\n      return;\n    } else {\n      throw new Error(\"Mismatched push/pop in Callstack\");\n    }\n  }\n\n  public GetTemporaryVariableWithName(\n    name: string | null,\n    contextIndex: number = -1\n  ) {\n    if (contextIndex == -1) contextIndex = this.currentElementIndex + 1;\n\n    let contextElement = this.callStack[contextIndex - 1];\n\n    let varValue = tryGetValueFromMap(\n      contextElement.temporaryVariables,\n      name,\n      null\n    );\n    if (varValue.exists) {\n      return varValue.result;\n    } else {\n      return null;\n    }\n  }\n\n  public SetTemporaryVariable(\n    name: string,\n    value: any,\n    declareNew: boolean,\n    contextIndex: number = -1\n  ) {\n    if (contextIndex == -1) contextIndex = this.currentElementIndex + 1;\n\n    let contextElement = this.callStack[contextIndex - 1];\n\n    if (!declareNew && !contextElement.temporaryVariables.get(name)) {\n      throw new Error(\"Could not find temporary variable to set: \" + name);\n    }\n\n    let oldValue = tryGetValueFromMap(\n      contextElement.temporaryVariables,\n      name,\n      null\n    );\n    if (oldValue.exists)\n      ListValue.RetainListOriginsForAssignment(oldValue.result, value);\n\n    contextElement.temporaryVariables.set(name, value);\n  }\n\n  public ContextForVariableNamed(name: string) {\n    if (this.currentElement.temporaryVariables.get(name)) {\n      return this.currentElementIndex + 1;\n    } else {\n      return 0;\n    }\n  }\n\n  public ThreadWithIndex(index: number) {\n    let filtered = this._threads.filter((t) => {\n      if (t.threadIndex == index) return t;\n    });\n\n    return filtered.length > 0 ? filtered[0] : null;\n  }\n\n  get callStack() {\n    return this.currentThread.callstack;\n  }\n\n  get callStackTrace() {\n    let sb = new StringBuilder();\n\n    for (let t = 0; t < this._threads.length; t++) {\n      let thread = this._threads[t];\n      let isCurrent = t == this._threads.length - 1;\n      sb.AppendFormat(\n        \"=== THREAD {0}/{1} {2}===\\n\",\n        t + 1,\n        this._threads.length,\n        isCurrent ? \"(current) \" : \"\"\n      );\n\n      for (let i = 0; i < thread.callstack.length; i++) {\n        if (thread.callstack[i].type == PushPopType.Function)\n          sb.Append(\"  [FUNCTION] \");\n        else sb.Append(\"  [TUNNEL] \");\n\n        let pointer = thread.callstack[i].currentPointer;\n        if (!pointer.isNull) {\n          sb.Append(\"<SOMEWHERE IN \");\n          if (pointer.container === null) {\n            return throwNullException(\"pointer.container\");\n          }\n          sb.Append(pointer.container.path.toString());\n          sb.AppendLine(\">\");\n        }\n      }\n    }\n\n    return sb.toString();\n  }\n\n  public _threads!: CallStack.Thread[]; // Banged because it's initialized in Reset().\n  public _threadCounter: number = 0;\n  public _startOfRoot: Pointer = Pointer.Null;\n}\n\nexport namespace CallStack {\n  export class Element {\n    public currentPointer: Pointer;\n    public inExpressionEvaluation: boolean;\n    public temporaryVariables: Map<string, InkObject>;\n    public type: PushPopType;\n\n    public evaluationStackHeightWhenPushed: number = 0;\n    public functionStartInOutputStream: number = 0;\n\n    constructor(\n      type: PushPopType,\n      pointer: Pointer,\n      inExpressionEvaluation: boolean = false\n    ) {\n      this.currentPointer = pointer.copy();\n      this.inExpressionEvaluation = inExpressionEvaluation;\n      this.temporaryVariables = new Map();\n      this.type = type;\n    }\n\n    public Copy() {\n      let copy = new Element(\n        this.type,\n        this.currentPointer,\n        this.inExpressionEvaluation\n      );\n      copy.temporaryVariables = new Map(this.temporaryVariables);\n      copy.evaluationStackHeightWhenPushed =\n        this.evaluationStackHeightWhenPushed;\n      copy.functionStartInOutputStream = this.functionStartInOutputStream;\n      return copy;\n    }\n  }\n\n  export class Thread {\n    public callstack: Element[];\n    public threadIndex: number = 0;\n    public previousPointer: Pointer = Pointer.Null;\n\n    constructor();\n    constructor(jThreadObj: any, storyContext: Story);\n    constructor() {\n      this.callstack = [];\n\n      if (arguments[0] && arguments[1]) {\n        let jThreadObj = arguments[0];\n        let storyContext = arguments[1];\n\n        // TODO: (int) jThreadObj['threadIndex'] can raise;\n        this.threadIndex = parseInt(jThreadObj[\"threadIndex\"]);\n\n        let jThreadCallstack = jThreadObj[\"callstack\"];\n\n        for (let jElTok of jThreadCallstack) {\n          let jElementObj = jElTok;\n\n          // TODO: (int) jElementObj['type'] can raise;\n          let pushPopType: PushPopType = parseInt(jElementObj[\"type\"]);\n\n          let pointer = Pointer.Null;\n\n          let currentContainerPathStr: string;\n          // TODO: jElementObj.TryGetValue (\"cPath\", out currentContainerPathStrToken);\n          let currentContainerPathStrToken = jElementObj[\"cPath\"];\n          if (typeof currentContainerPathStrToken !== \"undefined\") {\n            currentContainerPathStr = currentContainerPathStrToken.toString();\n\n            let threadPointerResult = storyContext.ContentAtPath(\n              new Path(currentContainerPathStr)\n            );\n            pointer.container = threadPointerResult.container;\n            pointer.index = parseInt(jElementObj[\"idx\"]);\n\n            if (threadPointerResult.obj == null)\n              throw new Error(\n                \"When loading state, internal story location couldn't be found: \" +\n                  currentContainerPathStr +\n                  \". Has the story changed since this save data was created?\"\n              );\n            else if (threadPointerResult.approximate) {\n              if (pointer.container === null) {\n                return throwNullException(\"pointer.container\");\n              }\n              storyContext.Warning(\n                \"When loading state, exact internal story location couldn't be found: '\" +\n                  currentContainerPathStr +\n                  \"', so it was approximated to '\" +\n                  pointer.container.path.toString() +\n                  \"' to recover. Has the story changed since this save data was created?\"\n              );\n            }\n          }\n\n          let inExpressionEvaluation = !!jElementObj[\"exp\"];\n\n          let el = new Element(pushPopType, pointer, inExpressionEvaluation);\n\n          let temps = jElementObj[\"temp\"];\n          if (typeof temps !== \"undefined\") {\n            el.temporaryVariables =\n              JsonSerialisation.JObjectToDictionaryRuntimeObjs(temps);\n          } else {\n            el.temporaryVariables.clear();\n          }\n\n          this.callstack.push(el);\n        }\n\n        let prevContentObjPath = jThreadObj[\"previousContentObject\"];\n        if (typeof prevContentObjPath !== \"undefined\") {\n          let prevPath = new Path(prevContentObjPath.toString());\n          this.previousPointer = storyContext.PointerAtPath(prevPath);\n        }\n      }\n    }\n\n    public Copy() {\n      let copy = new Thread();\n      copy.threadIndex = this.threadIndex;\n      for (let e of this.callstack) {\n        copy.callstack.push(e.Copy());\n      }\n      copy.previousPointer = this.previousPointer.copy();\n      return copy;\n    }\n\n    public WriteJson(writer: SimpleJson.Writer) {\n      writer.WriteObjectStart();\n\n      writer.WritePropertyStart(\"callstack\");\n      writer.WriteArrayStart();\n      for (let el of this.callstack) {\n        writer.WriteObjectStart();\n        if (!el.currentPointer.isNull) {\n          if (el.currentPointer.container === null) {\n            return throwNullException(\"el.currentPointer.container\");\n          }\n          writer.WriteProperty(\n            \"cPath\",\n            el.currentPointer.container.path.componentsString\n          );\n          writer.WriteIntProperty(\"idx\", el.currentPointer.index);\n        }\n\n        writer.WriteProperty(\"exp\", el.inExpressionEvaluation);\n        writer.WriteIntProperty(\"type\", el.type);\n\n        if (el.temporaryVariables.size > 0) {\n          writer.WritePropertyStart(\"temp\");\n          JsonSerialisation.WriteDictionaryRuntimeObjs(\n            writer,\n            el.temporaryVariables\n          );\n          writer.WritePropertyEnd();\n        }\n\n        writer.WriteObjectEnd();\n      }\n      writer.WriteArrayEnd();\n      writer.WritePropertyEnd();\n\n      writer.WriteIntProperty(\"threadIndex\", this.threadIndex);\n\n      if (!this.previousPointer.isNull) {\n        let resolvedPointer = this.previousPointer.Resolve();\n        if (resolvedPointer === null) {\n          return throwNullException(\"this.previousPointer.Resolve()\");\n        }\n        writer.WriteProperty(\n          \"previousContentObject\",\n          resolvedPointer.path.toString()\n        );\n      }\n\n      writer.WriteObjectEnd();\n    }\n  }\n}\n","import {\n  AbstractValue,\n  Value,\n  VariablePointerValue,\n  ListValue,\n  IntValue,\n  FloatValue,\n  BoolValue,\n} from \"./Value\";\nimport { VariableAssignment } from \"./VariableAssignment\";\nimport { InkObject } from \"./Object\";\nimport { ListDefinitionsOrigin } from \"./ListDefinitionsOrigin\";\nimport { StoryException } from \"./StoryException\";\nimport { JsonSerialisation } from \"./JsonSerialisation\";\nimport { asOrThrows, asOrNull, isEquatable } from \"./TypeAssertion\";\nimport { tryGetValueFromMap } from \"./TryGetResult\";\nimport { throwNullException } from \"./NullException\";\nimport { CallStack } from \"./CallStack\";\nimport { StatePatch } from \"./StatePatch\";\nimport { SimpleJson } from \"./SimpleJson\";\n\nexport class VariablesState {\n  // The way variableChangedEvent is a bit different than the reference implementation.\n  // Originally it uses the C# += operator to add delegates, but in js we need to maintain\n  // an actual collection of delegates (ie. callbacks) to register a new one, there is a\n  // special ObserveVariableChange method below.\n  public variableChangedEventCallbacks: Array<\n    (variableName: string, newValue: InkObject) => void\n  > = [];\n  public variableChangedEvent(variableName: string, newValue: InkObject): void {\n    for (let callback of this.variableChangedEventCallbacks) {\n      callback(variableName, newValue);\n    }\n  }\n\n  public patch: StatePatch | null = null;\n\n  get batchObservingVariableChanges() {\n    return this._batchObservingVariableChanges;\n  }\n  set batchObservingVariableChanges(value: boolean) {\n    this._batchObservingVariableChanges = value;\n    if (value) {\n      this._changedVariablesForBatchObs = new Set();\n    } else {\n      if (this._changedVariablesForBatchObs != null) {\n        for (let variableName of this._changedVariablesForBatchObs) {\n          let currentValue = this._globalVariables.get(variableName);\n          if (!currentValue) {\n            throwNullException(\"currentValue\");\n          } else {\n            this.variableChangedEvent(variableName, currentValue);\n          }\n        }\n\n        this._changedVariablesForBatchObs = null;\n      }\n    }\n  }\n\n  get callStack() {\n    return this._callStack;\n  }\n  set callStack(callStack) {\n    this._callStack = callStack;\n  }\n\n  private _batchObservingVariableChanges: boolean = false;\n\n  // the original code uses a magic getter and setter for global variables,\n  // allowing things like variableState['varname]. This is not quite possible\n  // in js without a Proxy, so it is replaced with this $ function.\n  public $(variableName: string, value: any) {\n    if (typeof value === \"undefined\") {\n      let varContents = null;\n\n      if (this.patch !== null) {\n        varContents = this.patch.TryGetGlobal(variableName, null);\n        if (varContents.exists)\n          return (varContents.result as AbstractValue).valueObject;\n      }\n\n      varContents = this._globalVariables.get(variableName);\n\n      if (typeof varContents === \"undefined\") {\n        varContents = this._defaultGlobalVariables.get(variableName);\n      }\n\n      if (typeof varContents !== \"undefined\")\n        return (varContents as AbstractValue).valueObject;\n      else return null;\n    } else {\n      if (typeof this._defaultGlobalVariables.get(variableName) === \"undefined\")\n        throw new StoryException(\n          \"Cannot assign to a variable (\" +\n            variableName +\n            \") that hasn't been declared in the story\"\n        );\n\n      let val = Value.Create(value);\n      if (val == null) {\n        if (value == null) {\n          throw new Error(\"Cannot pass null to VariableState\");\n        } else {\n          throw new Error(\n            \"Invalid value passed to VariableState: \" + value.toString()\n          );\n        }\n      }\n\n      this.SetGlobal(variableName, val);\n    }\n  }\n\n  constructor(\n    callStack: CallStack,\n    listDefsOrigin: ListDefinitionsOrigin | null\n  ) {\n    this._globalVariables = new Map();\n    this._callStack = callStack;\n    this._listDefsOrigin = listDefsOrigin;\n\n    // if es6 proxies are available, use them.\n    try {\n      // the proxy is used to allow direct manipulation of global variables.\n      // It first tries to access the objects own property, and if none is\n      // found it delegates the call to the $ method, defined below\n      let p = new Proxy(this, {\n        get(target: any, name) {\n          return name in target ? target[name] : target.$(name);\n        },\n        set(target: any, name, value) {\n          if (name in target) target[name] = value;\n          else target.$(name, value);\n          return true; // returning a falsy value make the trap fail\n        },\n      });\n\n      return p;\n    } catch (e) {\n      // thr proxy object is not available in this context. we should warn the\n      // dev but writting to the console feels a bit intrusive.\n      // console.log(\"ES6 Proxy not available - direct manipulation of global variables can't work, use $() instead.\");\n    }\n  }\n\n  public ApplyPatch() {\n    if (this.patch === null) {\n      return throwNullException(\"this.patch\");\n    }\n\n    for (let [namedVarKey, namedVarValue] of this.patch.globals) {\n      this._globalVariables.set(namedVarKey, namedVarValue);\n    }\n\n    if (this._changedVariablesForBatchObs !== null) {\n      for (let name of this.patch.changedVariables) {\n        this._changedVariablesForBatchObs.add(name);\n      }\n    }\n\n    this.patch = null;\n  }\n\n  public SetJsonToken(jToken: Record<string, any>) {\n    this._globalVariables.clear();\n\n    for (let [varValKey, varValValue] of this._defaultGlobalVariables) {\n      let loadedToken = jToken[varValKey];\n      if (typeof loadedToken !== \"undefined\") {\n        let tokenInkObject =\n          JsonSerialisation.JTokenToRuntimeObject(loadedToken);\n        if (tokenInkObject === null) {\n          return throwNullException(\"tokenInkObject\");\n        }\n        this._globalVariables.set(varValKey, tokenInkObject);\n      } else {\n        this._globalVariables.set(varValKey, varValValue);\n      }\n    }\n  }\n\n  public static dontSaveDefaultValues: boolean = true;\n\n  public WriteJson(writer: SimpleJson.Writer) {\n    writer.WriteObjectStart();\n    for (let [keyValKey, keyValValue] of this._globalVariables) {\n      let name = keyValKey;\n      let val = keyValValue;\n\n      if (VariablesState.dontSaveDefaultValues) {\n        if (this._defaultGlobalVariables.has(name)) {\n          let defaultVal = this._defaultGlobalVariables.get(name)!;\n          if (this.RuntimeObjectsEqual(val, defaultVal)) continue;\n        }\n      }\n\n      writer.WritePropertyStart(name);\n      JsonSerialisation.WriteRuntimeObject(writer, val);\n      writer.WritePropertyEnd();\n    }\n    writer.WriteObjectEnd();\n  }\n\n  public RuntimeObjectsEqual(\n    obj1: InkObject | null,\n    obj2: InkObject | null\n  ): boolean {\n    if (obj1 === null) {\n      return throwNullException(\"obj1\");\n    }\n    if (obj2 === null) {\n      return throwNullException(\"obj2\");\n    }\n\n    if (obj1.constructor !== obj2.constructor) return false;\n\n    let boolVal = asOrNull(obj1, BoolValue);\n    if (boolVal !== null) {\n      return boolVal.value === asOrThrows(obj2, BoolValue).value;\n    }\n\n    let intVal = asOrNull(obj1, IntValue);\n    if (intVal !== null) {\n      return intVal.value === asOrThrows(obj2, IntValue).value;\n    }\n\n    let floatVal = asOrNull(obj1, FloatValue);\n    if (floatVal !== null) {\n      return floatVal.value === asOrThrows(obj2, FloatValue).value;\n    }\n\n    let val1 = asOrNull(obj1, Value);\n    let val2 = asOrNull(obj2, Value);\n    if (val1 !== null && val2 !== null) {\n      if (isEquatable(val1.valueObject) && isEquatable(val2.valueObject)) {\n        return val1.valueObject.Equals(val2.valueObject);\n      } else {\n        return val1.valueObject === val2.valueObject;\n      }\n    }\n\n    throw new Error(\n      \"FastRoughDefinitelyEquals: Unsupported runtime object type: \" +\n        obj1.constructor.name\n    );\n  }\n\n  public GetVariableWithName(\n    name: string | null,\n    contextIndex: number = -1\n  ): InkObject | null {\n    let varValue = this.GetRawVariableWithName(name, contextIndex);\n\n    // var varPointer = varValue as VariablePointerValue;\n    let varPointer = asOrNull(varValue, VariablePointerValue);\n    if (varPointer !== null) {\n      varValue = this.ValueAtVariablePointer(varPointer);\n    }\n\n    return varValue;\n  }\n\n  public TryGetDefaultVariableValue(name: string | null): InkObject | null {\n    let val = tryGetValueFromMap(this._defaultGlobalVariables, name, null);\n    return val.exists ? val.result : null;\n  }\n\n  public GlobalVariableExistsWithName(name: string) {\n    return (\n      this._globalVariables.has(name) ||\n      (this._defaultGlobalVariables !== null &&\n        this._defaultGlobalVariables.has(name))\n    );\n  }\n\n  public GetRawVariableWithName(name: string | null, contextIndex: number) {\n    let varValue: InkObject | null = null;\n\n    if (contextIndex == 0 || contextIndex == -1) {\n      let variableValue = null;\n      if (this.patch !== null) {\n        variableValue = this.patch.TryGetGlobal(name, null);\n        if (variableValue.exists) return variableValue.result!;\n      }\n\n      // this is a conditional assignment\n      variableValue = tryGetValueFromMap(this._globalVariables, name, null);\n      if (variableValue.exists) return variableValue.result;\n\n      if (this._defaultGlobalVariables !== null) {\n        variableValue = tryGetValueFromMap(\n          this._defaultGlobalVariables,\n          name,\n          null\n        );\n        if (variableValue.exists) return variableValue.result;\n      }\n\n      if (this._listDefsOrigin === null)\n        return throwNullException(\"VariablesState._listDefsOrigin\");\n      let listItemValue = this._listDefsOrigin.FindSingleItemListWithName(name);\n      if (listItemValue) return listItemValue;\n    }\n\n    varValue = this._callStack.GetTemporaryVariableWithName(name, contextIndex);\n\n    return varValue;\n  }\n\n  public ValueAtVariablePointer(pointer: VariablePointerValue) {\n    return this.GetVariableWithName(pointer.variableName, pointer.contextIndex);\n  }\n\n  public Assign(varAss: VariableAssignment, value: InkObject) {\n    let name = varAss.variableName;\n    if (name === null) {\n      return throwNullException(\"name\");\n    }\n    let contextIndex = -1;\n\n    let setGlobal = false;\n    if (varAss.isNewDeclaration) {\n      setGlobal = varAss.isGlobal;\n    } else {\n      setGlobal = this.GlobalVariableExistsWithName(name);\n    }\n\n    if (varAss.isNewDeclaration) {\n      // var varPointer = value as VariablePointerValue;\n      let varPointer = asOrNull(value, VariablePointerValue);\n      if (varPointer !== null) {\n        let fullyResolvedVariablePointer =\n          this.ResolveVariablePointer(varPointer);\n        value = fullyResolvedVariablePointer;\n      }\n    } else {\n      let existingPointer = null;\n      do {\n        // existingPointer = GetRawVariableWithName (name, contextIndex) as VariablePointerValue;\n        existingPointer = asOrNull(\n          this.GetRawVariableWithName(name, contextIndex),\n          VariablePointerValue\n        );\n        if (existingPointer != null) {\n          name = existingPointer.variableName;\n          contextIndex = existingPointer.contextIndex;\n          setGlobal = contextIndex == 0;\n        }\n      } while (existingPointer != null);\n    }\n\n    if (setGlobal) {\n      this.SetGlobal(name, value);\n    } else {\n      this._callStack.SetTemporaryVariable(\n        name,\n        value,\n        varAss.isNewDeclaration,\n        contextIndex\n      );\n    }\n  }\n\n  public SnapshotDefaultGlobals() {\n    this._defaultGlobalVariables = new Map(this._globalVariables);\n  }\n\n  public RetainListOriginsForAssignment(\n    oldValue: InkObject,\n    newValue: InkObject\n  ) {\n    let oldList = asOrThrows(oldValue, ListValue);\n    let newList = asOrThrows(newValue, ListValue);\n\n    if (oldList.value && newList.value && newList.value.Count == 0) {\n      newList.value.SetInitialOriginNames(oldList.value.originNames);\n    }\n  }\n\n  public SetGlobal(variableName: string | null, value: InkObject) {\n    let oldValue = null;\n\n    if (this.patch === null) {\n      oldValue = tryGetValueFromMap(this._globalVariables, variableName, null);\n    }\n\n    if (this.patch !== null) {\n      oldValue = this.patch.TryGetGlobal(variableName, null);\n      if (!oldValue.exists) {\n        oldValue = tryGetValueFromMap(\n          this._globalVariables,\n          variableName,\n          null\n        );\n      }\n    }\n\n    ListValue.RetainListOriginsForAssignment(oldValue!.result!, value);\n\n    if (variableName === null) {\n      return throwNullException(\"variableName\");\n    }\n\n    if (this.patch !== null) {\n      this.patch.SetGlobal(variableName, value);\n    } else {\n      this._globalVariables.set(variableName, value);\n    }\n\n    // TODO: Not sure !== is equivalent to !value.Equals(oldValue)\n    if (\n      this.variableChangedEvent !== null &&\n      oldValue !== null &&\n      value !== oldValue.result\n    ) {\n      if (this.batchObservingVariableChanges) {\n        if (this._changedVariablesForBatchObs === null) {\n          return throwNullException(\"this._changedVariablesForBatchObs\");\n        }\n\n        if (this.patch !== null) {\n          this.patch.AddChangedVariable(variableName);\n        } else if (this._changedVariablesForBatchObs !== null) {\n          this._changedVariablesForBatchObs.add(variableName);\n        }\n      } else {\n        this.variableChangedEvent(variableName, value);\n      }\n    }\n  }\n\n  public ResolveVariablePointer(varPointer: VariablePointerValue) {\n    let contextIndex = varPointer.contextIndex;\n\n    if (contextIndex == -1)\n      contextIndex = this.GetContextIndexOfVariableNamed(\n        varPointer.variableName\n      );\n\n    let valueOfVariablePointedTo = this.GetRawVariableWithName(\n      varPointer.variableName,\n      contextIndex\n    );\n\n    // var doubleRedirectionPointer = valueOfVariablePointedTo as VariablePointerValue;\n    let doubleRedirectionPointer = asOrNull(\n      valueOfVariablePointedTo,\n      VariablePointerValue\n    );\n    if (doubleRedirectionPointer != null) {\n      return doubleRedirectionPointer;\n    } else {\n      return new VariablePointerValue(varPointer.variableName, contextIndex);\n    }\n  }\n\n  public GetContextIndexOfVariableNamed(varName: string) {\n    if (this.GlobalVariableExistsWithName(varName)) return 0;\n\n    return this._callStack.currentElementIndex;\n  }\n\n  /**\n   * This function is specific to the js version of ink. It allows to register a\n   * callback that will be called when a variable changes. The original code uses\n   * `state.variableChangedEvent += callback` instead.\n   *\n   * @param {function} callback\n   */\n  public ObserveVariableChange(\n    callback: (variableName: string, newValue: InkObject) => void\n  ) {\n    this.variableChangedEventCallbacks.push(callback);\n  }\n\n  private _globalVariables: Map<string, InkObject>;\n  private _defaultGlobalVariables: Map<string, InkObject> = new Map();\n\n  private _callStack: CallStack;\n  private _changedVariablesForBatchObs: Set<string> | null = new Set();\n  private _listDefsOrigin: ListDefinitionsOrigin | null;\n}\n","// Taken from https://gist.github.com/blixt/f17b47c62508be59987b\n// Ink uses a seedable PRNG of which there is none in native javascript.\nexport class PRNG {\n  private seed: number;\n\n  constructor(seed: number) {\n    this.seed = seed % 2147483647;\n    if (this.seed <= 0) this.seed += 2147483646;\n  }\n  public next(): number {\n    return (this.seed = (this.seed * 48271) % 2147483647);\n  }\n  public nextFloat(): number {\n    return (this.next() - 1) / 2147483646;\n  }\n}\n","import { InkObject } from \"./Object\";\nimport { Container } from \"./Container\";\n\nexport class StatePatch {\n  get globals() {\n    return this._globals;\n  }\n  get changedVariables() {\n    return this._changedVariables;\n  }\n  get visitCounts() {\n    return this._visitCounts;\n  }\n  get turnIndices() {\n    return this._turnIndices;\n  }\n\n  constructor();\n  constructor(toCopy: StatePatch | null);\n  constructor() {\n    if (arguments.length === 1 && arguments[0] !== null) {\n      let toCopy = arguments[0] as StatePatch;\n      this._globals = new Map(toCopy._globals);\n      this._changedVariables = new Set(toCopy._changedVariables);\n      this._visitCounts = new Map(toCopy._visitCounts);\n      this._turnIndices = new Map(toCopy._turnIndices);\n    } else {\n      this._globals = new Map();\n      this._changedVariables = new Set();\n      this._visitCounts = new Map();\n      this._turnIndices = new Map();\n    }\n  }\n\n  public TryGetGlobal(name: string | null, /* out */ value: InkObject | null) {\n    if (name !== null && this._globals.has(name)) {\n      return { result: this._globals.get(name), exists: true };\n    }\n\n    return { result: value, exists: false };\n  }\n\n  public SetGlobal(name: string, value: InkObject) {\n    this._globals.set(name, value);\n  }\n\n  public AddChangedVariable(name: string) {\n    return this._changedVariables.add(name);\n  }\n\n  public TryGetVisitCount(container: Container, /* out */ count: number) {\n    if (this._visitCounts.has(container)) {\n      return { result: this._visitCounts.get(container), exists: true };\n    }\n\n    return { result: count, exists: false };\n  }\n\n  public SetVisitCount(container: Container, count: number) {\n    this._visitCounts.set(container, count);\n  }\n\n  public SetTurnIndex(container: Container, index: number) {\n    this._turnIndices.set(container, index);\n  }\n\n  public TryGetTurnIndex(container: Container, /* out */ index: number) {\n    if (this._turnIndices.has(container)) {\n      return { result: this._turnIndices.get(container), exists: true };\n    }\n\n    return { result: index, exists: false };\n  }\n\n  private _globals: Map<string, InkObject>;\n  private _changedVariables: Set<string> = new Set();\n  private _visitCounts: Map<Container, number> = new Map();\n  private _turnIndices: Map<Container, number> = new Map();\n}\n","export class SimpleJson {\n  public static TextToDictionary(text: string) {\n    return new SimpleJson.Reader(text).ToDictionary();\n  }\n\n  public static TextToArray(text: string) {\n    return new SimpleJson.Reader(text).ToArray();\n  }\n}\n\nexport namespace SimpleJson {\n  export class Reader {\n    constructor(text: string) {\n      this._rootObject = JSON.parse(text);\n    }\n\n    public ToDictionary() {\n      return this._rootObject as Record<string, any>;\n    }\n\n    public ToArray() {\n      return this._rootObject as any[];\n    }\n\n    private _rootObject: any[] | Record<string, any>;\n  }\n\n  // In C#, this class writes json tokens directly to a StringWriter or\n  // another stream. Here, a temporary hierarchy is created in the form\n  // of a javascript object, which is serialised in the `toString` method.\n  // See individual methods and properties for more information.\n  export class Writer {\n    public WriteObject(inner: (w: Writer) => void) {\n      this.WriteObjectStart();\n      inner(this);\n      this.WriteObjectEnd();\n    }\n\n    // Add a new object.\n    public WriteObjectStart() {\n      this.StartNewObject(true);\n\n      let newObject: Record<string, any> = {};\n\n      if (this.state === SimpleJson.Writer.State.Property) {\n        // This object is created as the value of a property,\n        // inside an other object.\n        this.Assert(this.currentCollection !== null);\n        this.Assert(this.currentPropertyName !== null);\n\n        let propertyName = this._propertyNameStack.pop();\n        this.currentCollection![propertyName!] = newObject;\n        this._collectionStack.push(newObject);\n      } else if (this.state === SimpleJson.Writer.State.Array) {\n        // This object is created as the child of an array.\n        this.Assert(this.currentCollection !== null);\n\n        this.currentCollection!.push(newObject);\n        this._collectionStack.push(newObject);\n      } else {\n        // This object is the root object.\n        this.Assert(this.state === SimpleJson.Writer.State.None);\n        this._jsonObject = newObject;\n        this._collectionStack.push(newObject);\n      }\n\n      this._stateStack.push(\n        new SimpleJson.Writer.StateElement(SimpleJson.Writer.State.Object)\n      );\n    }\n\n    public WriteObjectEnd() {\n      this.Assert(this.state === SimpleJson.Writer.State.Object);\n      this._collectionStack.pop();\n      this._stateStack.pop();\n    }\n\n    // Write a property name / value pair to the current object.\n    public WriteProperty(\n      name: any,\n      // eslint-disable-next-line @typescript-eslint/no-unused-vars\n      innerOrContent: ((w: Writer) => void) | string | boolean | null\n    ) {\n      this.WritePropertyStart(name);\n      if (arguments[1] instanceof Function) {\n        let inner = arguments[1];\n        inner(this);\n      } else {\n        let content: string | boolean | null = arguments[1];\n        this.Write(content);\n      }\n      this.WritePropertyEnd();\n    }\n\n    // Int and Float are separate calls, since there both are\n    // numbers in JavaScript, but need to be handled differently.\n\n    public WriteIntProperty(name: any, content: number) {\n      this.WritePropertyStart(name);\n      this.WriteInt(content);\n      this.WritePropertyEnd();\n    }\n\n    public WriteFloatProperty(name: any, content: number) {\n      this.WritePropertyStart(name);\n      this.WriteFloat(content);\n      this.WritePropertyEnd();\n    }\n\n    // Prepare a new property name, which will be use to add the\n    // new object when calling _addToCurrentObject() from a Write\n    // method.\n    public WritePropertyStart(name: any) {\n      this.Assert(this.state === SimpleJson.Writer.State.Object);\n      this._propertyNameStack.push(name);\n\n      this.IncrementChildCount();\n\n      this._stateStack.push(\n        new SimpleJson.Writer.StateElement(SimpleJson.Writer.State.Property)\n      );\n    }\n\n    public WritePropertyEnd() {\n      this.Assert(this.state === SimpleJson.Writer.State.Property);\n      this.Assert(this.childCount === 1);\n      this._stateStack.pop();\n    }\n\n    // Prepare a new property name, except this time, the property name\n    // will be created by concatenating all the strings passed to\n    // WritePropertyNameInner.\n    public WritePropertyNameStart() {\n      this.Assert(this.state === SimpleJson.Writer.State.Object);\n      this.IncrementChildCount();\n\n      this._currentPropertyName = \"\";\n\n      this._stateStack.push(\n        new SimpleJson.Writer.StateElement(SimpleJson.Writer.State.Property)\n      );\n      this._stateStack.push(\n        new SimpleJson.Writer.StateElement(SimpleJson.Writer.State.PropertyName)\n      );\n    }\n\n    public WritePropertyNameEnd() {\n      this.Assert(this.state === SimpleJson.Writer.State.PropertyName);\n      this.Assert(this._currentPropertyName !== null);\n      this._propertyNameStack.push(this._currentPropertyName!);\n      this._currentPropertyName = null;\n      this._stateStack.pop();\n    }\n\n    public WritePropertyNameInner(str: string) {\n      this.Assert(this.state === SimpleJson.Writer.State.PropertyName);\n      this.Assert(this._currentPropertyName !== null);\n      this._currentPropertyName += str;\n    }\n\n    // Add a new array.\n    public WriteArrayStart() {\n      this.StartNewObject(true);\n\n      let newObject: any[] = [];\n\n      if (this.state === SimpleJson.Writer.State.Property) {\n        // This array is created as the value of a property,\n        // inside an object.\n        this.Assert(this.currentCollection !== null);\n        this.Assert(this.currentPropertyName !== null);\n\n        let propertyName = this._propertyNameStack.pop();\n        this.currentCollection![propertyName!] = newObject;\n        this._collectionStack.push(newObject);\n      } else if (this.state === SimpleJson.Writer.State.Array) {\n        // This array is created as the child of another array.\n        this.Assert(this.currentCollection !== null);\n\n        this.currentCollection!.push(newObject);\n        this._collectionStack.push(newObject);\n      } else {\n        // This array is the root object.\n        this.Assert(this.state === SimpleJson.Writer.State.None);\n        this._jsonObject = newObject;\n        this._collectionStack.push(newObject);\n      }\n\n      this._stateStack.push(\n        new SimpleJson.Writer.StateElement(SimpleJson.Writer.State.Array)\n      );\n    }\n\n    public WriteArrayEnd() {\n      this.Assert(this.state === SimpleJson.Writer.State.Array);\n      this._collectionStack.pop();\n      this._stateStack.pop();\n    }\n\n    // Add the value to the appropriate collection (array / object), given the current\n    // context.\n    public Write(\n      value: number | string | boolean | null,\n      // eslint-disable-next-line @typescript-eslint/no-unused-vars\n      escape: boolean = true\n    ) {\n      if (value === null) {\n        console.error(\"Warning: trying to write a null value\");\n        return;\n      }\n\n      this.StartNewObject(false);\n      this._addToCurrentObject(value);\n    }\n\n    public WriteBool(value: boolean | null) {\n      if (value === null) {\n        return;\n      }\n\n      this.StartNewObject(false);\n      this._addToCurrentObject(value);\n    }\n\n    public WriteInt(value: number | null) {\n      if (value === null) {\n        return;\n      }\n\n      this.StartNewObject(false);\n\n      // Math.floor is used as a precaution:\n      //     1. to ensure that the value is written as an integer\n      //        (without a fractional part -> 1 instead of 1.0), even\n      //        though it should be the default behaviour of\n      //        JSON.serialize;\n      //     2. to ensure that if a floating number is passed\n      //        accidentally, it's converted to an integer.\n      //\n      // This guarantees savegame compatibility with the reference\n      // implementation.\n      this._addToCurrentObject(Math.floor(value));\n    }\n\n    // Since JSON doesn't support NaN and Infinity, these values\n    // are converted here.\n    public WriteFloat(value: number | null) {\n      if (value === null) {\n        return;\n      }\n\n      this.StartNewObject(false);\n      if (value == Number.POSITIVE_INFINITY) {\n        this._addToCurrentObject(3.4e38);\n      } else if (value == Number.NEGATIVE_INFINITY) {\n        this._addToCurrentObject(-3.4e38);\n      } else if (isNaN(value)) {\n        this._addToCurrentObject(0.0);\n      } else {\n        this._addToCurrentObject(value);\n      }\n    }\n\n    public WriteNull() {\n      this.StartNewObject(false);\n      this._addToCurrentObject(null);\n    }\n\n    // Prepare a string before adding it to the current collection in\n    // WriteStringEnd(). The string will be a concatenation of all the\n    // strings passed to WriteStringInner.\n    public WriteStringStart() {\n      this.StartNewObject(false);\n      this._currentString = \"\";\n      this._stateStack.push(\n        new SimpleJson.Writer.StateElement(SimpleJson.Writer.State.String)\n      );\n    }\n\n    public WriteStringEnd() {\n      this.Assert(this.state == SimpleJson.Writer.State.String);\n      this._stateStack.pop();\n      this._addToCurrentObject(this._currentString);\n      this._currentString = null;\n    }\n\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    public WriteStringInner(str: string | null, escape: boolean = true) {\n      this.Assert(this.state === SimpleJson.Writer.State.String);\n\n      if (str === null) {\n        console.error(\"Warning: trying to write a null string\");\n        return;\n      }\n\n      this._currentString += str;\n    }\n\n    // Serialise the root object into a JSON string.\n    public toString() {\n      if (this._jsonObject === null) {\n        return \"\";\n      }\n\n      return JSON.stringify(this._jsonObject);\n    }\n\n    // Prepare the state stack when adding new objects / values.\n    private StartNewObject(container: boolean) {\n      if (container) {\n        this.Assert(\n          this.state === SimpleJson.Writer.State.None ||\n            this.state === SimpleJson.Writer.State.Property ||\n            this.state === SimpleJson.Writer.State.Array\n        );\n      } else {\n        this.Assert(\n          this.state === SimpleJson.Writer.State.Property ||\n            this.state === SimpleJson.Writer.State.Array\n        );\n      }\n\n      if (this.state === SimpleJson.Writer.State.Property) {\n        this.Assert(this.childCount === 0);\n      }\n\n      if (\n        this.state === SimpleJson.Writer.State.Array ||\n        this.state === SimpleJson.Writer.State.Property\n      ) {\n        this.IncrementChildCount();\n      }\n    }\n\n    // These getters peek all the different stacks.\n\n    private get state() {\n      if (this._stateStack.length > 0) {\n        return this._stateStack[this._stateStack.length - 1].type;\n      } else {\n        return SimpleJson.Writer.State.None;\n      }\n    }\n\n    private get childCount() {\n      if (this._stateStack.length > 0) {\n        return this._stateStack[this._stateStack.length - 1].childCount;\n      } else {\n        return 0;\n      }\n    }\n\n    private get currentCollection() {\n      if (this._collectionStack.length > 0) {\n        return this._collectionStack[this._collectionStack.length - 1];\n      } else {\n        return null;\n      }\n    }\n\n    private get currentPropertyName() {\n      if (this._propertyNameStack.length > 0) {\n        return this._propertyNameStack[this._propertyNameStack.length - 1];\n      } else {\n        return null;\n      }\n    }\n\n    private IncrementChildCount() {\n      this.Assert(this._stateStack.length > 0);\n      let currEl = this._stateStack.pop()!;\n      currEl.childCount++;\n      this._stateStack.push(currEl);\n    }\n\n    private Assert(condition: boolean) {\n      if (!condition) throw Error(\"Assert failed while writing JSON\");\n    }\n\n    // This method did not exist in the original C# code. It adds\n    // the given value to the current collection (used by Write methods).\n    private _addToCurrentObject(value: number | string | boolean | null) {\n      this.Assert(this.currentCollection !== null);\n      if (this.state === SimpleJson.Writer.State.Array) {\n        this.Assert(Array.isArray(this.currentCollection));\n        (this.currentCollection as any[]).push(value);\n      } else if (this.state === SimpleJson.Writer.State.Property) {\n        this.Assert(!Array.isArray(this.currentCollection));\n        this.Assert(this.currentPropertyName !== null);\n        (this.currentCollection as Record<string, any>)[\n          this.currentPropertyName!\n        ] = value;\n        this._propertyNameStack.pop();\n      }\n    }\n\n    // In addition to `_stateStack` present in the original code,\n    // this implementation of SimpleJson use two other stacks and two\n    // temporary variables holding the current context.\n\n    // Used to keep track of the current property name being built\n    // with `WritePropertyNameStart`, `WritePropertyNameInner` and\n    // `WritePropertyNameEnd`.\n    private _currentPropertyName: string | null = null;\n\n    // Used to keep track of the current string value being built\n    // with `WriteStringStart`, `WriteStringInner` and\n    // `WriteStringEnd`.\n    private _currentString: string | null = null;\n\n    private _stateStack: SimpleJson.Writer.StateElement[] = [];\n\n    // Keep track of the current collection being built (either an array\n    // or an object). For instance, at the '?' step during the hiarchy\n    // creation, this hierarchy:\n    // [3, {a: [b, ?]}] will have this corresponding stack:\n    // (bottom) [Array, Object, Array] (top)\n    private _collectionStack: Array<any[] | Record<string, any>> = [];\n\n    // Keep track of the current property being assigned. For instance, at\n    // the '?' step during the hiarchy creation, this hierarchy:\n    // [3, {a: [b, {c: ?}]}] will have this corresponding stack:\n    // (bottom) [a, c] (top)\n    private _propertyNameStack: string[] = [];\n\n    // Object containing the entire hiearchy.\n    private _jsonObject: Record<string, any> | any[] | null = null;\n  }\n\n  export namespace Writer {\n    export enum State {\n      None,\n      Object,\n      Array,\n      Property,\n      PropertyName,\n      String,\n    }\n\n    export class StateElement {\n      public type: SimpleJson.Writer.State = SimpleJson.Writer.State.None;\n      public childCount: number = 0;\n\n      constructor(type: SimpleJson.Writer.State) {\n        this.type = type;\n      }\n    }\n  }\n}\n","import { CallStack } from \"./CallStack\";\nimport { Choice } from \"./Choice\";\nimport { JsonSerialisation } from \"./JsonSerialisation\";\nimport { InkObject } from \"./Object\";\nimport { SimpleJson } from \"./SimpleJson\";\nimport { Story } from \"./Story\";\nimport { throwNullException } from \"./NullException\";\n\nexport class Flow {\n  public name: string;\n  public callStack: CallStack;\n  public outputStream: InkObject[];\n  public currentChoices: Choice[];\n\n  constructor(name: String, story: Story);\n  constructor(name: String, story: Story, jObject: Record<string, any>);\n  constructor() {\n    let name = arguments[0] as string;\n    let story = arguments[1] as Story;\n\n    this.name = name;\n    this.callStack = new CallStack(story);\n\n    if (arguments[2]) {\n      let jObject = arguments[2] as Record<string, any>;\n\n      this.callStack.SetJsonToken(jObject[\"callstack\"], story);\n      this.outputStream = JsonSerialisation.JArrayToRuntimeObjList(\n        jObject[\"outputStream\"]\n      );\n      this.currentChoices = JsonSerialisation.JArrayToRuntimeObjList(\n        jObject[\"currentChoices\"]\n      ) as Choice[];\n\n      let jChoiceThreadsObj = jObject[\"choiceThreads\"];\n      if (typeof jChoiceThreadsObj !== \"undefined\") {\n        this.LoadFlowChoiceThreads(jChoiceThreadsObj, story);\n      }\n    } else {\n      this.outputStream = [];\n      this.currentChoices = [];\n    }\n  }\n\n  public WriteJson(writer: SimpleJson.Writer) {\n    writer.WriteObjectStart();\n\n    writer.WriteProperty(\"callstack\", (w) => this.callStack.WriteJson(w));\n    writer.WriteProperty(\"outputStream\", (w) =>\n      JsonSerialisation.WriteListRuntimeObjs(w, this.outputStream)\n    );\n\n    let hasChoiceThreads = false;\n    for (let c of this.currentChoices) {\n      if (c.threadAtGeneration === null)\n        return throwNullException(\"c.threadAtGeneration\");\n\n      c.originalThreadIndex = c.threadAtGeneration.threadIndex;\n\n      if (this.callStack.ThreadWithIndex(c.originalThreadIndex) === null) {\n        if (!hasChoiceThreads) {\n          hasChoiceThreads = true;\n          writer.WritePropertyStart(\"choiceThreads\");\n          writer.WriteObjectStart();\n        }\n\n        writer.WritePropertyStart(c.originalThreadIndex);\n        c.threadAtGeneration.WriteJson(writer);\n        writer.WritePropertyEnd();\n      }\n    }\n\n    if (hasChoiceThreads) {\n      writer.WriteObjectEnd();\n      writer.WritePropertyEnd();\n    }\n\n    writer.WriteProperty(\"currentChoices\", (w) => {\n      w.WriteArrayStart();\n      for (let c of this.currentChoices) {\n        JsonSerialisation.WriteChoice(w, c);\n      }\n      w.WriteArrayEnd();\n    });\n\n    writer.WriteObjectEnd();\n  }\n\n  public LoadFlowChoiceThreads(\n    jChoiceThreads: Record<string, any>,\n    story: Story\n  ) {\n    for (let choice of this.currentChoices) {\n      let foundActiveThread = this.callStack.ThreadWithIndex(\n        choice.originalThreadIndex\n      );\n      if (foundActiveThread !== null) {\n        choice.threadAtGeneration = foundActiveThread.Copy();\n      } else {\n        let jSavedChoiceThread =\n          jChoiceThreads[`${choice.originalThreadIndex}`];\n        choice.threadAtGeneration = new CallStack.Thread(\n          jSavedChoiceThread,\n          story\n        );\n      }\n    }\n  }\n}\n","import { CallStack } from \"./CallStack\";\nimport { VariablesState } from \"./VariablesState\";\nimport { ValueType, Value, StringValue, ListValue } from \"./Value\";\nimport { PushPopType } from \"./PushPop\";\nimport { Tag } from \"./Tag\";\nimport { Glue } from \"./Glue\";\nimport { Path } from \"./Path\";\nimport { ControlCommand } from \"./ControlCommand\";\nimport { StringBuilder } from \"./StringBuilder\";\nimport { JsonSerialisation } from \"./JsonSerialisation\";\nimport { PRNG } from \"./PRNG\";\nimport { Void } from \"./Void\";\nimport { Pointer } from \"./Pointer\";\nimport { tryGetValueFromMap } from \"./TryGetResult\";\nimport { Choice } from \"./Choice\";\nimport { asOrNull, asOrThrows, nullIfUndefined } from \"./TypeAssertion\";\nimport { Debug } from \"./Debug\";\nimport { Container } from \"./Container\";\nimport { InkObject } from \"./Object\";\nimport { throwNullException } from \"./NullException\";\nimport { Story } from \"./Story\";\nimport { StatePatch } from \"./StatePatch\";\nimport { SimpleJson } from \"./SimpleJson\";\nimport { Flow } from \"./Flow\";\nimport { InkList } from \"./InkList\";\n\nexport class StoryState {\n  public readonly kInkSaveStateVersion = 9;\n  public readonly kMinCompatibleLoadVersion = 8;\n\n  public onDidLoadState: (() => void) | null = null;\n\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  public ToJson(indented: boolean = false) {\n    let writer = new SimpleJson.Writer();\n    this.WriteJson(writer);\n    return writer.toString();\n  }\n  public toJson(indented: boolean = false) {\n    return this.ToJson(indented);\n  }\n\n  public LoadJson(json: string) {\n    let jObject = SimpleJson.TextToDictionary(json);\n    this.LoadJsonObj(jObject);\n    if (this.onDidLoadState !== null) this.onDidLoadState();\n  }\n\n  public VisitCountAtPathString(pathString: string) {\n    let visitCountOut;\n\n    if (this._patch !== null) {\n      let container = this.story.ContentAtPath(new Path(pathString)).container;\n      if (container === null)\n        throw new Error(\"Content at path not found: \" + pathString);\n\n      visitCountOut = this._patch.TryGetVisitCount(container, 0);\n      if (visitCountOut.exists) return visitCountOut.result;\n    }\n\n    visitCountOut = tryGetValueFromMap(this._visitCounts, pathString, null);\n    if (visitCountOut.exists) return visitCountOut.result;\n\n    return 0;\n  }\n\n  public VisitCountForContainer(container: Container | null): number {\n    if (container === null) {\n      return throwNullException(\"container\");\n    }\n    if (!container.visitsShouldBeCounted) {\n      this.story.Error(\n        \"Read count for target (\" +\n          container.name +\n          \" - on \" +\n          container.debugMetadata +\n          \") unknown. The story may need to be compiled with countAllVisits flag (-c).\"\n      );\n      return 0;\n    }\n\n    if (this._patch !== null) {\n      let count = this._patch.TryGetVisitCount(container, 0);\n      if (count.exists) {\n        return count.result!;\n      }\n    }\n\n    let containerPathStr = container.path.toString();\n    let count2 = tryGetValueFromMap(this._visitCounts, containerPathStr, null);\n    if (count2.exists) {\n      return count2.result!;\n    }\n\n    return 0;\n  }\n\n  public IncrementVisitCountForContainer(container: Container) {\n    if (this._patch !== null) {\n      let currCount = this.VisitCountForContainer(container);\n      currCount++;\n      this._patch.SetVisitCount(container, currCount);\n      return;\n    }\n\n    let containerPathStr = container.path.toString();\n    let count = tryGetValueFromMap(this._visitCounts, containerPathStr, null);\n    if (count.exists) {\n      this._visitCounts.set(containerPathStr, count.result! + 1);\n    } else {\n      this._visitCounts.set(containerPathStr, 1);\n    }\n  }\n\n  public RecordTurnIndexVisitToContainer(container: Container) {\n    if (this._patch !== null) {\n      this._patch.SetTurnIndex(container, this.currentTurnIndex);\n      return;\n    }\n\n    let containerPathStr = container.path.toString();\n    this._turnIndices.set(containerPathStr, this.currentTurnIndex);\n  }\n\n  public TurnsSinceForContainer(container: Container) {\n    if (!container.turnIndexShouldBeCounted) {\n      this.story.Error(\n        \"TURNS_SINCE() for target (\" +\n          container.name +\n          \" - on \" +\n          container.debugMetadata +\n          \") unknown. The story may need to be compiled with countAllVisits flag (-c).\"\n      );\n    }\n\n    if (this._patch !== null) {\n      let index = this._patch.TryGetTurnIndex(container, 0);\n      if (index.exists) {\n        return this.currentTurnIndex - index.result!;\n      }\n    }\n\n    let containerPathStr = container.path.toString();\n    let index2 = tryGetValueFromMap(this._turnIndices, containerPathStr, 0);\n    if (index2.exists) {\n      return this.currentTurnIndex - index2.result!;\n    } else {\n      return -1;\n    }\n  }\n\n  get callstackDepth() {\n    return this.callStack.depth;\n  }\n\n  get outputStream() {\n    return this._currentFlow.outputStream;\n  }\n\n  get currentChoices() {\n    // If we can continue generating text content rather than choices,\n    // then we reflect the choice list as being empty, since choices\n    // should always come at the end.\n    if (this.canContinue) return [];\n    return this._currentFlow.currentChoices;\n  }\n\n  get generatedChoices() {\n    return this._currentFlow.currentChoices;\n  }\n\n  get currentErrors() {\n    return this._currentErrors;\n  }\n  private _currentErrors: string[] | null = null;\n\n  get currentWarnings() {\n    return this._currentWarnings;\n  }\n  private _currentWarnings: string[] | null = null;\n\n  get variablesState() {\n    return this._variablesState;\n  }\n  set variablesState(value) {\n    this._variablesState = value;\n  }\n  private _variablesState: VariablesState;\n\n  get callStack() {\n    return this._currentFlow.callStack;\n  }\n\n  get evaluationStack() {\n    return this._evaluationStack;\n  }\n  private _evaluationStack: InkObject[];\n\n  public divertedPointer: Pointer = Pointer.Null;\n\n  get currentTurnIndex() {\n    return this._currentTurnIndex;\n  }\n  set currentTurnIndex(value) {\n    this._currentTurnIndex = value;\n  }\n  private _currentTurnIndex: number = 0;\n\n  public storySeed: number = 0;\n  public previousRandom: number = 0;\n  public didSafeExit: boolean = false;\n\n  public story: Story;\n\n  get currentPathString() {\n    let pointer = this.currentPointer;\n    if (pointer.isNull) {\n      return null;\n    } else {\n      if (pointer.path === null) {\n        return throwNullException(\"pointer.path\");\n      }\n      return pointer.path.toString();\n    }\n  }\n\n  get currentPointer() {\n    return this.callStack.currentElement.currentPointer.copy();\n  }\n\n  set currentPointer(value) {\n    this.callStack.currentElement.currentPointer = value.copy();\n  }\n\n  get previousPointer() {\n    return this.callStack.currentThread.previousPointer.copy();\n  }\n\n  set previousPointer(value) {\n    this.callStack.currentThread.previousPointer = value.copy();\n  }\n\n  get canContinue() {\n    return !this.currentPointer.isNull && !this.hasError;\n  }\n\n  get hasError() {\n    return this.currentErrors != null && this.currentErrors.length > 0;\n  }\n\n  get hasWarning() {\n    return this.currentWarnings != null && this.currentWarnings.length > 0;\n  }\n\n  get currentText() {\n    if (this._outputStreamTextDirty) {\n      let sb = new StringBuilder();\n\n      for (let outputObj of this.outputStream) {\n        // var textContent = outputObj as StringValue;\n        let textContent = asOrNull(outputObj, StringValue);\n        if (textContent !== null) {\n          sb.Append(textContent.value);\n        }\n      }\n\n      this._currentText = this.CleanOutputWhitespace(sb.toString());\n      this._outputStreamTextDirty = false;\n    }\n\n    return this._currentText;\n  }\n  private _currentText: string | null = null;\n\n  public CleanOutputWhitespace(str: string) {\n    let sb = new StringBuilder();\n\n    let currentWhitespaceStart = -1;\n    let startOfLine = 0;\n\n    for (let i = 0; i < str.length; i++) {\n      let c = str.charAt(i);\n\n      let isInlineWhitespace = c == \" \" || c == \"\\t\";\n\n      if (isInlineWhitespace && currentWhitespaceStart == -1)\n        currentWhitespaceStart = i;\n\n      if (!isInlineWhitespace) {\n        if (\n          c != \"\\n\" &&\n          currentWhitespaceStart > 0 &&\n          currentWhitespaceStart != startOfLine\n        ) {\n          sb.Append(\" \");\n        }\n        currentWhitespaceStart = -1;\n      }\n\n      if (c == \"\\n\") startOfLine = i + 1;\n\n      if (!isInlineWhitespace) sb.Append(c);\n    }\n\n    return sb.toString();\n  }\n\n  get currentTags() {\n    if (this._outputStreamTagsDirty) {\n      this._currentTags = [];\n\n      for (let outputObj of this.outputStream) {\n        // var tag = outputObj as Tag;\n        let tag = asOrNull(outputObj, Tag);\n        if (tag !== null) {\n          this._currentTags.push(tag.text);\n        }\n      }\n\n      this._outputStreamTagsDirty = false;\n    }\n\n    return this._currentTags;\n  }\n  private _currentTags: string[] | null = null;\n\n  get currentFlowName() {\n    return this._currentFlow.name;\n  }\n\n  get inExpressionEvaluation() {\n    return this.callStack.currentElement.inExpressionEvaluation;\n  }\n  set inExpressionEvaluation(value) {\n    this.callStack.currentElement.inExpressionEvaluation = value;\n  }\n\n  constructor(story: Story) {\n    this.story = story;\n\n    this._currentFlow = new Flow(this.kDefaultFlowName, story);\n    this.OutputStreamDirty();\n\n    this._evaluationStack = [];\n\n    this._variablesState = new VariablesState(\n      this.callStack,\n      story.listDefinitions\n    );\n\n    this._visitCounts = new Map();\n    this._turnIndices = new Map();\n    this.currentTurnIndex = -1;\n\n    let timeSeed = new Date().getTime();\n    this.storySeed = new PRNG(timeSeed).next() % 100;\n    this.previousRandom = 0;\n\n    this.GoToStart();\n  }\n\n  public GoToStart() {\n    this.callStack.currentElement.currentPointer = Pointer.StartOf(\n      this.story.mainContentContainer\n    );\n  }\n\n  public SwitchFlow_Internal(flowName: string | null) {\n    if (flowName === null)\n      throw new Error(\"Must pass a non-null string to Story.SwitchFlow\");\n\n    if (this._namedFlows === null) {\n      this._namedFlows = new Map();\n      this._namedFlows.set(this.kDefaultFlowName, this._currentFlow);\n    }\n\n    if (flowName === this._currentFlow.name) {\n      return;\n    }\n\n    let flow: Flow;\n    let content = tryGetValueFromMap(this._namedFlows, flowName, null);\n    if (content.exists) {\n      flow = content.result!;\n    } else {\n      flow = new Flow(flowName, this.story);\n      this._namedFlows.set(flowName, flow);\n    }\n\n    this._currentFlow = flow;\n    this.variablesState.callStack = this._currentFlow.callStack;\n\n    this.OutputStreamDirty();\n  }\n\n  public SwitchToDefaultFlow_Internal() {\n    if (this._namedFlows === null) return;\n    this.SwitchFlow_Internal(this.kDefaultFlowName);\n  }\n\n  public RemoveFlow_Internal(flowName: string | null) {\n    if (flowName === null)\n      throw new Error(\"Must pass a non-null string to Story.DestroyFlow\");\n    if (flowName === this.kDefaultFlowName)\n      throw new Error(\"Cannot destroy default flow\");\n\n    if (this._currentFlow.name === flowName) {\n      this.SwitchToDefaultFlow_Internal();\n    }\n\n    if (this._namedFlows === null)\n      return throwNullException(\"this._namedFlows\");\n    this._namedFlows.delete(flowName);\n  }\n\n  public CopyAndStartPatching() {\n    let copy = new StoryState(this.story);\n\n    copy._patch = new StatePatch(this._patch);\n\n    copy._currentFlow.name = this._currentFlow.name;\n    copy._currentFlow.callStack = new CallStack(this._currentFlow.callStack);\n    copy._currentFlow.currentChoices.push(...this._currentFlow.currentChoices);\n    copy._currentFlow.outputStream.push(...this._currentFlow.outputStream);\n    copy.OutputStreamDirty();\n\n    if (this._namedFlows !== null) {\n      copy._namedFlows = new Map();\n      for (let [namedFlowKey, namedFlowValue] of this._namedFlows) {\n        copy._namedFlows.set(namedFlowKey, namedFlowValue);\n      }\n      copy._namedFlows.set(this._currentFlow.name, copy._currentFlow);\n    }\n\n    if (this.hasError) {\n      copy._currentErrors = [];\n      copy._currentErrors.push(...(this.currentErrors || []));\n    }\n\n    if (this.hasWarning) {\n      copy._currentWarnings = [];\n      copy._currentWarnings.push(...(this.currentWarnings || []));\n    }\n\n    copy.variablesState = this.variablesState;\n    copy.variablesState.callStack = copy.callStack;\n    copy.variablesState.patch = copy._patch;\n\n    copy.evaluationStack.push(...this.evaluationStack);\n\n    if (!this.divertedPointer.isNull)\n      copy.divertedPointer = this.divertedPointer.copy();\n\n    copy.previousPointer = this.previousPointer.copy();\n\n    copy._visitCounts = this._visitCounts;\n    copy._turnIndices = this._turnIndices;\n\n    copy.currentTurnIndex = this.currentTurnIndex;\n    copy.storySeed = this.storySeed;\n    copy.previousRandom = this.previousRandom;\n\n    copy.didSafeExit = this.didSafeExit;\n\n    return copy;\n  }\n\n  public RestoreAfterPatch() {\n    this.variablesState.callStack = this.callStack;\n    this.variablesState.patch = this._patch;\n  }\n\n  public ApplyAnyPatch() {\n    if (this._patch === null) return;\n\n    this.variablesState.ApplyPatch();\n\n    for (let [key, value] of this._patch.visitCounts)\n      this.ApplyCountChanges(key, value, true);\n\n    for (let [key, value] of this._patch.turnIndices)\n      this.ApplyCountChanges(key, value, false);\n\n    this._patch = null;\n  }\n\n  public ApplyCountChanges(\n    container: Container,\n    newCount: number,\n    isVisit: boolean\n  ) {\n    let counts = isVisit ? this._visitCounts : this._turnIndices;\n    counts.set(container.path.toString(), newCount);\n  }\n\n  public WriteJson(writer: SimpleJson.Writer) {\n    writer.WriteObjectStart();\n\n    writer.WritePropertyStart(\"flows\");\n    writer.WriteObjectStart();\n\n    // NOTE: Never pass `WriteJson` directly as an argument to `WriteProperty`.\n    // Call it inside a function to make sure `this` is correctly bound\n    // and passed down the call hierarchy.\n\n    if (this._namedFlows !== null) {\n      for (let [namedFlowKey, namedFlowValue] of this._namedFlows) {\n        writer.WriteProperty(namedFlowKey, (w) => namedFlowValue.WriteJson(w));\n      }\n    } else {\n      writer.WriteProperty(this._currentFlow.name, (w) =>\n        this._currentFlow.WriteJson(w)\n      );\n    }\n\n    writer.WriteObjectEnd();\n    writer.WritePropertyEnd();\n\n    writer.WriteProperty(\"currentFlowName\", this._currentFlow.name);\n\n    writer.WriteProperty(\"variablesState\", (w) =>\n      this.variablesState.WriteJson(w)\n    );\n\n    writer.WriteProperty(\"evalStack\", (w) =>\n      JsonSerialisation.WriteListRuntimeObjs(w, this.evaluationStack)\n    );\n\n    if (!this.divertedPointer.isNull) {\n      if (this.divertedPointer.path === null) {\n        return throwNullException(\"divertedPointer\");\n      }\n      writer.WriteProperty(\n        \"currentDivertTarget\",\n        this.divertedPointer.path.componentsString\n      );\n    }\n\n    writer.WriteProperty(\"visitCounts\", (w) =>\n      JsonSerialisation.WriteIntDictionary(w, this._visitCounts)\n    );\n    writer.WriteProperty(\"turnIndices\", (w) =>\n      JsonSerialisation.WriteIntDictionary(w, this._turnIndices)\n    );\n\n    writer.WriteIntProperty(\"turnIdx\", this.currentTurnIndex);\n    writer.WriteIntProperty(\"storySeed\", this.storySeed);\n    writer.WriteIntProperty(\"previousRandom\", this.previousRandom);\n\n    writer.WriteIntProperty(\"inkSaveVersion\", this.kInkSaveStateVersion);\n\n    writer.WriteIntProperty(\"inkFormatVersion\", Story.inkVersionCurrent);\n\n    writer.WriteObjectEnd();\n  }\n\n  public LoadJsonObj(value: Record<string, any>) {\n    let jObject = value;\n\n    let jSaveVersion = jObject[\"inkSaveVersion\"];\n    if (jSaveVersion == null) {\n      throw new Error(\"ink save format incorrect, can't load.\");\n    } else if (parseInt(jSaveVersion) < this.kMinCompatibleLoadVersion) {\n      throw new Error(\n        \"Ink save format isn't compatible with the current version (saw '\" +\n          jSaveVersion +\n          \"', but minimum is \" +\n          this.kMinCompatibleLoadVersion +\n          \"), so can't load.\"\n      );\n    }\n\n    let flowsObj = jObject[\"flows\"];\n    if (flowsObj != null) {\n      let flowsObjDict = flowsObj as Record<string, any>;\n\n      // Single default flow\n      if (Object.keys(flowsObjDict).length === 1) {\n        this._namedFlows = null;\n      } else if (this._namedFlows === null) {\n        this._namedFlows = new Map();\n      } else {\n        this._namedFlows.clear();\n      }\n\n      let flowsObjDictEntries = Object.entries(flowsObjDict);\n      for (let [namedFlowObjKey, namedFlowObjValue] of flowsObjDictEntries) {\n        let name = namedFlowObjKey;\n        let flowObj = namedFlowObjValue as Record<string, any>;\n\n        let flow = new Flow(name, this.story, flowObj);\n\n        if (Object.keys(flowsObjDict).length === 1) {\n          this._currentFlow = new Flow(name, this.story, flowObj);\n        } else {\n          if (this._namedFlows === null)\n            return throwNullException(\"this._namedFlows\");\n          this._namedFlows.set(name, flow);\n        }\n      }\n\n      if (this._namedFlows != null && this._namedFlows.size > 1) {\n        let currFlowName = jObject[\"currentFlowName\"] as string;\n        // Adding a bang at the end, because we're trusting the save, as\n        // done in upstream.  If the save is corrupted, the execution\n        // is undefined.\n        this._currentFlow = this._namedFlows.get(currFlowName)!;\n      }\n    } else {\n      this._namedFlows = null;\n      this._currentFlow.name = this.kDefaultFlowName;\n      this._currentFlow.callStack.SetJsonToken(\n        jObject[\"callstackThreads\"] as Record<string, any>,\n        this.story\n      );\n      this._currentFlow.outputStream = JsonSerialisation.JArrayToRuntimeObjList(\n        jObject[\"outputStream\"] as any[]\n      );\n      this._currentFlow.currentChoices =\n        JsonSerialisation.JArrayToRuntimeObjList(\n          jObject[\"currentChoices\"] as any[]\n        ) as Choice[];\n\n      let jChoiceThreadsObj = jObject[\"choiceThreads\"];\n      this._currentFlow.LoadFlowChoiceThreads(jChoiceThreadsObj, this.story);\n    }\n\n    this.OutputStreamDirty();\n\n    this.variablesState.SetJsonToken(jObject[\"variablesState\"]);\n    this.variablesState.callStack = this._currentFlow.callStack;\n\n    this._evaluationStack = JsonSerialisation.JArrayToRuntimeObjList(\n      jObject[\"evalStack\"]\n    );\n\n    let currentDivertTargetPath = jObject[\"currentDivertTarget\"];\n    if (currentDivertTargetPath != null) {\n      let divertPath = new Path(currentDivertTargetPath.toString());\n      this.divertedPointer = this.story.PointerAtPath(divertPath);\n    }\n\n    this._visitCounts = JsonSerialisation.JObjectToIntDictionary(\n      jObject[\"visitCounts\"]\n    );\n    this._turnIndices = JsonSerialisation.JObjectToIntDictionary(\n      jObject[\"turnIndices\"]\n    );\n    this.currentTurnIndex = parseInt(jObject[\"turnIdx\"]);\n    this.storySeed = parseInt(jObject[\"storySeed\"]);\n    this.previousRandom = parseInt(jObject[\"previousRandom\"]);\n  }\n\n  public ResetErrors() {\n    this._currentErrors = null;\n    this._currentWarnings = null;\n  }\n  public ResetOutput(objs: InkObject[] | null = null) {\n    this.outputStream.length = 0;\n    if (objs !== null) this.outputStream.push(...objs);\n    this.OutputStreamDirty();\n  }\n\n  public PushToOutputStream(obj: InkObject | null) {\n    // var text = obj as StringValue;\n    let text = asOrNull(obj, StringValue);\n    if (text !== null) {\n      let listText = this.TrySplittingHeadTailWhitespace(text);\n      if (listText !== null) {\n        for (let textObj of listText) {\n          this.PushToOutputStreamIndividual(textObj);\n        }\n        this.OutputStreamDirty();\n        return;\n      }\n    }\n\n    this.PushToOutputStreamIndividual(obj);\n    this.OutputStreamDirty();\n  }\n\n  public PopFromOutputStream(count: number) {\n    this.outputStream.splice(this.outputStream.length - count, count);\n    this.OutputStreamDirty();\n  }\n\n  public TrySplittingHeadTailWhitespace(single: StringValue) {\n    let str = single.value;\n    if (str === null) {\n      return throwNullException(\"single.value\");\n    }\n\n    let headFirstNewlineIdx = -1;\n    let headLastNewlineIdx = -1;\n    for (let i = 0; i < str.length; i++) {\n      let c = str[i];\n      if (c == \"\\n\") {\n        if (headFirstNewlineIdx == -1) headFirstNewlineIdx = i;\n        headLastNewlineIdx = i;\n      } else if (c == \" \" || c == \"\\t\") continue;\n      else break;\n    }\n\n    let tailLastNewlineIdx = -1;\n    let tailFirstNewlineIdx = -1;\n    for (let i = str.length - 1; i >= 0; i--) {\n      let c = str[i];\n      if (c == \"\\n\") {\n        if (tailLastNewlineIdx == -1) tailLastNewlineIdx = i;\n        tailFirstNewlineIdx = i;\n      } else if (c == \" \" || c == \"\\t\") continue;\n      else break;\n    }\n\n    // No splitting to be done?\n    if (headFirstNewlineIdx == -1 && tailLastNewlineIdx == -1) return null;\n\n    let listTexts: StringValue[] = [];\n    let innerStrStart = 0;\n    let innerStrEnd = str.length;\n\n    if (headFirstNewlineIdx != -1) {\n      if (headFirstNewlineIdx > 0) {\n        let leadingSpaces = new StringValue(\n          str.substring(0, headFirstNewlineIdx)\n        );\n        listTexts.push(leadingSpaces);\n      }\n      listTexts.push(new StringValue(\"\\n\"));\n      innerStrStart = headLastNewlineIdx + 1;\n    }\n\n    if (tailLastNewlineIdx != -1) {\n      innerStrEnd = tailFirstNewlineIdx;\n    }\n\n    if (innerStrEnd > innerStrStart) {\n      let innerStrText = str.substring(\n        innerStrStart,\n        innerStrEnd - innerStrStart\n      );\n      listTexts.push(new StringValue(innerStrText));\n    }\n\n    if (tailLastNewlineIdx != -1 && tailFirstNewlineIdx > headLastNewlineIdx) {\n      listTexts.push(new StringValue(\"\\n\"));\n      if (tailLastNewlineIdx < str.length - 1) {\n        let numSpaces = str.length - tailLastNewlineIdx - 1;\n        let trailingSpaces = new StringValue(\n          str.substring(tailLastNewlineIdx + 1, numSpaces)\n        );\n        listTexts.push(trailingSpaces);\n      }\n    }\n\n    return listTexts;\n  }\n\n  public PushToOutputStreamIndividual(obj: InkObject | null) {\n    let glue = asOrNull(obj, Glue);\n    let text = asOrNull(obj, StringValue);\n\n    let includeInOutput = true;\n\n    if (glue) {\n      this.TrimNewlinesFromOutputStream();\n      includeInOutput = true;\n    } else if (text) {\n      let functionTrimIndex = -1;\n      let currEl = this.callStack.currentElement;\n      if (currEl.type == PushPopType.Function) {\n        functionTrimIndex = currEl.functionStartInOutputStream;\n      }\n\n      let glueTrimIndex = -1;\n      for (let i = this.outputStream.length - 1; i >= 0; i--) {\n        let o = this.outputStream[i];\n        let c = o instanceof ControlCommand ? o : null;\n        let g = o instanceof Glue ? o : null;\n\n        if (g != null) {\n          glueTrimIndex = i;\n          break;\n        } else if (\n          c != null &&\n          c.commandType == ControlCommand.CommandType.BeginString\n        ) {\n          if (i >= functionTrimIndex) {\n            functionTrimIndex = -1;\n          }\n          break;\n        }\n      }\n\n      let trimIndex = -1;\n      if (glueTrimIndex != -1 && functionTrimIndex != -1)\n        trimIndex = Math.min(functionTrimIndex, glueTrimIndex);\n      else if (glueTrimIndex != -1) trimIndex = glueTrimIndex;\n      else trimIndex = functionTrimIndex;\n\n      if (trimIndex != -1) {\n        if (text.isNewline) {\n          includeInOutput = false;\n        } else if (text.isNonWhitespace) {\n          if (glueTrimIndex > -1) this.RemoveExistingGlue();\n\n          if (functionTrimIndex > -1) {\n            let callStackElements = this.callStack.elements;\n            for (let i = callStackElements.length - 1; i >= 0; i--) {\n              let el = callStackElements[i];\n              if (el.type == PushPopType.Function) {\n                el.functionStartInOutputStream = -1;\n              } else {\n                break;\n              }\n            }\n          }\n        }\n      } else if (text.isNewline) {\n        if (this.outputStreamEndsInNewline || !this.outputStreamContainsContent)\n          includeInOutput = false;\n      }\n    }\n\n    if (includeInOutput) {\n      if (obj === null) {\n        return throwNullException(\"obj\");\n      }\n      this.outputStream.push(obj);\n      this.OutputStreamDirty();\n    }\n  }\n\n  public TrimNewlinesFromOutputStream() {\n    let removeWhitespaceFrom = -1;\n\n    let i = this.outputStream.length - 1;\n    while (i >= 0) {\n      let obj = this.outputStream[i];\n      let cmd = asOrNull(obj, ControlCommand);\n      let txt = asOrNull(obj, StringValue);\n\n      if (cmd != null || (txt != null && txt.isNonWhitespace)) {\n        break;\n      } else if (txt != null && txt.isNewline) {\n        removeWhitespaceFrom = i;\n      }\n      i--;\n    }\n\n    // Remove the whitespace\n    if (removeWhitespaceFrom >= 0) {\n      i = removeWhitespaceFrom;\n      while (i < this.outputStream.length) {\n        let text = asOrNull(this.outputStream[i], StringValue);\n        if (text) {\n          this.outputStream.splice(i, 1);\n        } else {\n          i++;\n        }\n      }\n    }\n\n    this.OutputStreamDirty();\n  }\n\n  public RemoveExistingGlue() {\n    for (let i = this.outputStream.length - 1; i >= 0; i--) {\n      let c = this.outputStream[i];\n      if (c instanceof Glue) {\n        this.outputStream.splice(i, 1);\n      } else if (c instanceof ControlCommand) {\n        break;\n      }\n    }\n\n    this.OutputStreamDirty();\n  }\n\n  get outputStreamEndsInNewline() {\n    if (this.outputStream.length > 0) {\n      for (let i = this.outputStream.length - 1; i >= 0; i--) {\n        let obj = this.outputStream[i];\n        if (obj instanceof ControlCommand) break;\n        let text = this.outputStream[i];\n        if (text instanceof StringValue) {\n          if (text.isNewline) return true;\n          else if (text.isNonWhitespace) break;\n        }\n      }\n    }\n\n    return false;\n  }\n\n  get outputStreamContainsContent() {\n    for (let content of this.outputStream) {\n      if (content instanceof StringValue) return true;\n    }\n    return false;\n  }\n\n  get inStringEvaluation() {\n    for (let i = this.outputStream.length - 1; i >= 0; i--) {\n      let cmd = asOrNull(this.outputStream[i], ControlCommand);\n      if (\n        cmd instanceof ControlCommand &&\n        cmd.commandType == ControlCommand.CommandType.BeginString\n      ) {\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n  public PushEvaluationStack(obj: InkObject | null) {\n    // var listValue = obj as ListValue;\n    let listValue = asOrNull(obj, ListValue);\n    if (listValue) {\n      // Update origin when list is has something to indicate the list origin\n      let rawList = listValue.value;\n      if (rawList === null) {\n        return throwNullException(\"rawList\");\n      }\n\n      if (rawList.originNames != null) {\n        if (!rawList.origins) rawList.origins = [];\n        rawList.origins.length = 0;\n\n        for (let n of rawList.originNames) {\n          if (this.story.listDefinitions === null)\n            return throwNullException(\"StoryState.story.listDefinitions\");\n          let def = this.story.listDefinitions.TryListGetDefinition(n, null);\n          if (def.result === null)\n            return throwNullException(\"StoryState def.result\");\n          if (rawList.origins.indexOf(def.result) < 0)\n            rawList.origins.push(def.result);\n        }\n      }\n    }\n\n    if (obj === null) {\n      return throwNullException(\"obj\");\n    }\n    this.evaluationStack.push(obj);\n  }\n\n  public PopEvaluationStack(): InkObject;\n  public PopEvaluationStack(numberOfObjects: number): InkObject[];\n  public PopEvaluationStack(numberOfObjects?: number) {\n    if (typeof numberOfObjects === \"undefined\") {\n      let obj = this.evaluationStack.pop();\n      return nullIfUndefined(obj);\n    } else {\n      if (numberOfObjects > this.evaluationStack.length) {\n        throw new Error(\"trying to pop too many objects\");\n      }\n\n      let popped = this.evaluationStack.splice(\n        this.evaluationStack.length - numberOfObjects,\n        numberOfObjects\n      );\n      return nullIfUndefined(popped);\n    }\n  }\n\n  public PeekEvaluationStack() {\n    return this.evaluationStack[this.evaluationStack.length - 1];\n  }\n\n  public ForceEnd() {\n    this.callStack.Reset();\n\n    this._currentFlow.currentChoices.length = 0;\n\n    this.currentPointer = Pointer.Null;\n    this.previousPointer = Pointer.Null;\n\n    this.didSafeExit = true;\n  }\n\n  public TrimWhitespaceFromFunctionEnd() {\n    Debug.Assert(this.callStack.currentElement.type == PushPopType.Function);\n    let functionStartPoint =\n      this.callStack.currentElement.functionStartInOutputStream;\n\n    if (functionStartPoint == -1) {\n      functionStartPoint = 0;\n    }\n\n    for (let i = this.outputStream.length - 1; i >= functionStartPoint; i--) {\n      let obj = this.outputStream[i];\n      let txt = asOrNull(obj, StringValue);\n      let cmd = asOrNull(obj, ControlCommand);\n\n      if (txt == null) continue;\n      if (cmd) break;\n\n      if (txt.isNewline || txt.isInlineWhitespace) {\n        this.outputStream.splice(i, 1);\n        this.OutputStreamDirty();\n      } else {\n        break;\n      }\n    }\n  }\n\n  public PopCallStack(popType: PushPopType | null = null) {\n    if (this.callStack.currentElement.type == PushPopType.Function)\n      this.TrimWhitespaceFromFunctionEnd();\n\n    this.callStack.Pop(popType);\n  }\n\n  public SetChosenPath(path: Path, incrementingTurnIndex: boolean) {\n    // Changing direction, assume we need to clear current set of choices\n    this._currentFlow.currentChoices.length = 0;\n\n    let newPointer = this.story.PointerAtPath(path);\n    if (!newPointer.isNull && newPointer.index == -1) newPointer.index = 0;\n\n    this.currentPointer = newPointer;\n\n    if (incrementingTurnIndex) {\n      this.currentTurnIndex++;\n    }\n  }\n\n  public StartFunctionEvaluationFromGame(\n    funcContainer: Container,\n    args: any[]\n  ) {\n    this.callStack.Push(\n      PushPopType.FunctionEvaluationFromGame,\n      this.evaluationStack.length\n    );\n    this.callStack.currentElement.currentPointer =\n      Pointer.StartOf(funcContainer);\n\n    this.PassArgumentsToEvaluationStack(args);\n  }\n\n  public PassArgumentsToEvaluationStack(args: any[] | null) {\n    if (args !== null) {\n      for (let i = 0; i < args.length; i++) {\n        if (\n          !(typeof args[i] === \"number\" || typeof args[i] === \"string\") ||\n          args[i] instanceof InkList\n        ) {\n          throw new Error(\n            \"ink arguments when calling EvaluateFunction / ChoosePathStringWithParameters must be\" +\n            \"number, string or InkList. Argument was \" +\n            (nullIfUndefined(arguments[i]) === null)\n              ? \"null\"\n              : arguments[i].constructor.name\n          );\n        }\n\n        this.PushEvaluationStack(Value.Create(args[i]));\n      }\n    }\n  }\n\n  public TryExitFunctionEvaluationFromGame() {\n    if (\n      this.callStack.currentElement.type ==\n      PushPopType.FunctionEvaluationFromGame\n    ) {\n      this.currentPointer = Pointer.Null;\n      this.didSafeExit = true;\n      return true;\n    }\n\n    return false;\n  }\n\n  public CompleteFunctionEvaluationFromGame() {\n    if (\n      this.callStack.currentElement.type !=\n      PushPopType.FunctionEvaluationFromGame\n    ) {\n      throw new Error(\n        \"Expected external function evaluation to be complete. Stack trace: \" +\n          this.callStack.callStackTrace\n      );\n    }\n\n    let originalEvaluationStackHeight =\n      this.callStack.currentElement.evaluationStackHeightWhenPushed;\n\n    let returnedObj: InkObject | null = null;\n    while (this.evaluationStack.length > originalEvaluationStackHeight) {\n      let poppedObj = this.PopEvaluationStack();\n      if (returnedObj === null) returnedObj = poppedObj;\n    }\n\n    this.PopCallStack(PushPopType.FunctionEvaluationFromGame);\n\n    if (returnedObj) {\n      if (returnedObj instanceof Void) return null;\n\n      // Some kind of value, if not void\n      // var returnVal = returnedObj as Runtime.Value;\n      let returnVal = asOrThrows(returnedObj, Value);\n\n      // DivertTargets get returned as the string of components\n      // (rather than a Path, which isn't public)\n      if (returnVal.valueType == ValueType.DivertTarget) {\n        return returnVal.valueObject.toString();\n      }\n\n      // Other types can just have their exact object type:\n      // int, float, string. VariablePointers get returned as strings.\n      return returnVal.valueObject;\n    }\n\n    return null;\n  }\n\n  public AddError(message: string, isWarning: boolean) {\n    if (!isWarning) {\n      if (this._currentErrors == null) this._currentErrors = [];\n      this._currentErrors.push(message);\n    } else {\n      if (this._currentWarnings == null) this._currentWarnings = [];\n      this._currentWarnings.push(message);\n    }\n  }\n\n  public OutputStreamDirty() {\n    this._outputStreamTextDirty = true;\n    this._outputStreamTagsDirty = true;\n  }\n\n  private _visitCounts: Map<string, number>;\n  private _turnIndices: Map<string, number>;\n\n  private _outputStreamTextDirty = true;\n  private _outputStreamTagsDirty = true;\n\n  private _patch: StatePatch | null = null;\n\n  private _currentFlow: Flow;\n  private _namedFlows: Map<string, Flow> | null = null;\n  private readonly kDefaultFlowName = \"DEFAULT_FLOW\";\n}\n","// This is simple replacement of the Stopwatch class from the .NET Framework.\n// The original class can count time with much more accuracy than the Javascript version.\n// It might be worth considering using `window.performance` in the browser\n// or `process.hrtime()` in node.\nexport class Stopwatch {\n  private startTime: number | undefined;\n\n  constructor() {\n    this.startTime = undefined;\n  }\n\n  get ElapsedMilliseconds(): number {\n    if (typeof this.startTime === \"undefined\") {\n      return 0;\n    }\n    return new Date().getTime() - this.startTime;\n  }\n\n  public Start() {\n    this.startTime = new Date().getTime();\n  }\n  public Stop() {\n    this.startTime = undefined;\n  }\n}\n","import { Container } from \"./Container\";\nimport { InkObject } from \"./Object\";\nimport { JsonSerialisation } from \"./JsonSerialisation\";\nimport { StoryState } from \"./StoryState\";\nimport { ControlCommand } from \"./ControlCommand\";\nimport { PushPopType } from \"./PushPop\";\nimport { ChoicePoint } from \"./ChoicePoint\";\nimport { Choice } from \"./Choice\";\nimport { Divert } from \"./Divert\";\nimport {\n  Value,\n  StringValue,\n  IntValue,\n  DivertTargetValue,\n  VariablePointerValue,\n  ListValue,\n} from \"./Value\";\nimport { Path } from \"./Path\";\nimport { Void } from \"./Void\";\nimport { Tag } from \"./Tag\";\nimport { VariableAssignment } from \"./VariableAssignment\";\nimport { VariableReference } from \"./VariableReference\";\nimport { NativeFunctionCall } from \"./NativeFunctionCall\";\nimport { StoryException } from \"./StoryException\";\nimport { PRNG } from \"./PRNG\";\nimport { StringBuilder } from \"./StringBuilder\";\nimport { ListDefinitionsOrigin } from \"./ListDefinitionsOrigin\";\nimport { ListDefinition } from \"./ListDefinition\";\nimport { Stopwatch } from \"./StopWatch\";\nimport { Pointer } from \"./Pointer\";\nimport { InkList, InkListItem, KeyValuePair } from \"./InkList\";\nimport { asOrNull, asOrThrows } from \"./TypeAssertion\";\nimport { DebugMetadata } from \"./DebugMetadata\";\nimport { throwNullException } from \"./NullException\";\nimport { SimpleJson } from \"./SimpleJson\";\nimport { ErrorHandler, ErrorType } from \"./Error\";\n\nexport { InkList } from \"./InkList\";\n\nif (!Number.isInteger) {\n  Number.isInteger = function isInteger(nVal: any) {\n    return (\n      typeof nVal === \"number\" &&\n      isFinite(nVal) &&\n      nVal > -9007199254740992 &&\n      nVal < 9007199254740992 &&\n      Math.floor(nVal) === nVal\n    );\n  };\n}\n\nexport class Story extends InkObject {\n  public static inkVersionCurrent = 20;\n\n  public inkVersionMinimumCompatible = 18;\n\n  get currentChoices() {\n    let choices: Choice[] = [];\n\n    if (this._state === null) {\n      return throwNullException(\"this._state\");\n    }\n    for (let c of this._state.currentChoices) {\n      if (!c.isInvisibleDefault) {\n        c.index = choices.length;\n        choices.push(c);\n      }\n    }\n\n    return choices;\n  }\n\n  get currentText() {\n    this.IfAsyncWeCant(\"call currentText since it's a work in progress\");\n    return this.state.currentText;\n  }\n\n  get currentTags() {\n    this.IfAsyncWeCant(\"call currentTags since it's a work in progress\");\n    return this.state.currentTags;\n  }\n\n  get currentErrors() {\n    return this.state.currentErrors;\n  }\n\n  get currentWarnings() {\n    return this.state.currentWarnings;\n  }\n\n  get currentFlowName() {\n    return this.state.currentFlowName;\n  }\n\n  get hasError() {\n    return this.state.hasError;\n  }\n\n  get hasWarning() {\n    return this.state.hasWarning;\n  }\n\n  get variablesState() {\n    return this.state.variablesState;\n  }\n\n  get listDefinitions() {\n    return this._listDefinitions;\n  }\n\n  get state() {\n    return this._state;\n  }\n\n  public onError: ErrorHandler | null = null;\n\n  public onDidContinue: (() => void) | null = null;\n\n  public onMakeChoice: ((arg1: Choice) => void) | null = null;\n\n  public onEvaluateFunction: ((arg1: string, arg2: any[]) => void) | null =\n    null;\n\n  public onCompleteEvaluateFunction:\n    | ((arg1: string, arg2: any[], arg3: string, arg4: any) => void)\n    | null = null;\n\n  public onChoosePathString: ((arg1: string, arg2: any[]) => void) | null =\n    null;\n\n  // TODO: Implement Profiler\n  public StartProfiling() {\n    /* */\n  }\n  public EndProfiling() {\n    /* */\n  }\n\n  constructor(contentContainer: Container, lists: ListDefinition[] | null);\n  constructor(jsonString: string);\n  constructor(json: Record<string, any>);\n  constructor() {\n    super();\n\n    // Discrimination between constructors\n    let contentContainer: Container;\n    let lists: ListDefinition[] | null = null;\n    let json: Record<string, any> | null = null;\n\n    if (arguments[0] instanceof Container) {\n      contentContainer = arguments[0] as Container;\n\n      if (typeof arguments[1] !== \"undefined\") {\n        lists = arguments[1] as ListDefinition[];\n      }\n\n      // ------ Story (Container contentContainer, List<Runtime.ListDefinition> lists = null)\n      this._mainContentContainer = contentContainer;\n      // ------\n    } else {\n      if (typeof arguments[0] === \"string\") {\n        let jsonString = arguments[0] as string;\n        json = SimpleJson.TextToDictionary(jsonString);\n      } else {\n        json = arguments[0] as Record<string, any>;\n      }\n    }\n\n    // ------ Story (Container contentContainer, List<Runtime.ListDefinition> lists = null)\n    if (lists != null) this._listDefinitions = new ListDefinitionsOrigin(lists);\n\n    this._externals = new Map();\n    // ------\n\n    // ------ Story(string jsonString) : this((Container)null)\n    if (json !== null) {\n      let rootObject: Record<string, any> = json;\n\n      let versionObj = rootObject[\"inkVersion\"];\n      if (versionObj == null)\n        throw new Error(\n          \"ink version number not found. Are you sure it's a valid .ink.json file?\"\n        );\n\n      let formatFromFile = parseInt(versionObj);\n      if (formatFromFile > Story.inkVersionCurrent) {\n        throw new Error(\n          \"Version of ink used to build story was newer than the current version of the engine\"\n        );\n      } else if (formatFromFile < this.inkVersionMinimumCompatible) {\n        throw new Error(\n          \"Version of ink used to build story is too old to be loaded by this version of the engine\"\n        );\n      } else if (formatFromFile != Story.inkVersionCurrent) {\n        console.warn(\n          \"WARNING: Version of ink used to build story doesn't match current version of engine. Non-critical, but recommend synchronising.\"\n        );\n      }\n\n      let rootToken = rootObject[\"root\"];\n      if (rootToken == null)\n        throw new Error(\n          \"Root node for ink not found. Are you sure it's a valid .ink.json file?\"\n        );\n\n      let listDefsObj;\n      if ((listDefsObj = rootObject[\"listDefs\"])) {\n        this._listDefinitions =\n          JsonSerialisation.JTokenToListDefinitions(listDefsObj);\n      }\n\n      this._mainContentContainer = asOrThrows(\n        JsonSerialisation.JTokenToRuntimeObject(rootToken),\n        Container\n      );\n\n      this.ResetState();\n    }\n    // ------\n  }\n\n  // Merge together `public string ToJson()` and `void ToJson(SimpleJson.Writer writer)`.\n  // Will only return a value if writer was not provided.\n  public ToJson(writer?: SimpleJson.Writer): string | void {\n    let shouldReturn = false;\n\n    if (!writer) {\n      shouldReturn = true;\n      writer = new SimpleJson.Writer();\n    }\n\n    writer.WriteObjectStart();\n\n    writer.WriteIntProperty(\"inkVersion\", Story.inkVersionCurrent);\n\n    writer.WriteProperty(\"root\", (w) =>\n      JsonSerialisation.WriteRuntimeContainer(w, this._mainContentContainer)\n    );\n\n    if (this._listDefinitions != null) {\n      writer.WritePropertyStart(\"listDefs\");\n      writer.WriteObjectStart();\n\n      for (let def of this._listDefinitions.lists) {\n        writer.WritePropertyStart(def.name);\n        writer.WriteObjectStart();\n\n        for (let [key, value] of def.items) {\n          let item = InkListItem.fromSerializedKey(key);\n          let val = value;\n          writer.WriteIntProperty(item.itemName, val);\n        }\n\n        writer.WriteObjectEnd();\n        writer.WritePropertyEnd();\n      }\n\n      writer.WriteObjectEnd();\n      writer.WritePropertyEnd();\n    }\n\n    writer.WriteObjectEnd();\n\n    if (shouldReturn) return writer.toString();\n  }\n\n  public ResetState() {\n    this.IfAsyncWeCant(\"ResetState\");\n\n    this._state = new StoryState(this);\n    this._state.variablesState.ObserveVariableChange(\n      this.VariableStateDidChangeEvent.bind(this)\n    );\n\n    this.ResetGlobals();\n  }\n\n  public ResetErrors() {\n    if (this._state === null) {\n      return throwNullException(\"this._state\");\n    }\n    this._state.ResetErrors();\n  }\n\n  public ResetCallstack() {\n    this.IfAsyncWeCant(\"ResetCallstack\");\n    if (this._state === null) {\n      return throwNullException(\"this._state\");\n    }\n    this._state.ForceEnd();\n  }\n\n  public ResetGlobals() {\n    if (this._mainContentContainer.namedContent.get(\"global decl\")) {\n      let originalPointer = this.state.currentPointer.copy();\n\n      this.ChoosePath(new Path(\"global decl\"), false);\n\n      this.ContinueInternal();\n\n      this.state.currentPointer = originalPointer;\n    }\n\n    this.state.variablesState.SnapshotDefaultGlobals();\n  }\n\n  public SwitchFlow(flowName: string) {\n    this.IfAsyncWeCant(\"switch flow\");\n    if (this._asyncSaving) {\n      throw new Error(\n        \"Story is already in background saving mode, can't switch flow to \" +\n          flowName\n      );\n    }\n\n    this.state.SwitchFlow_Internal(flowName);\n  }\n\n  public RemoveFlow(flowName: string) {\n    this.state.RemoveFlow_Internal(flowName);\n  }\n\n  public SwitchToDefaultFlow() {\n    this.state.SwitchToDefaultFlow_Internal();\n  }\n\n  public Continue() {\n    this.ContinueAsync(0);\n    return this.currentText;\n  }\n\n  get canContinue() {\n    return this.state.canContinue;\n  }\n\n  get asyncContinueComplete() {\n    return !this._asyncContinueActive;\n  }\n\n  public ContinueAsync(millisecsLimitAsync: number) {\n    if (!this._hasValidatedExternals) this.ValidateExternalBindings();\n\n    this.ContinueInternal(millisecsLimitAsync);\n  }\n\n  public ContinueInternal(millisecsLimitAsync = 0) {\n    if (this._profiler != null) this._profiler.PreContinue();\n\n    let isAsyncTimeLimited = millisecsLimitAsync > 0;\n    this._recursiveContinueCount++;\n\n    if (!this._asyncContinueActive) {\n      this._asyncContinueActive = isAsyncTimeLimited;\n\n      if (!this.canContinue) {\n        throw new Error(\n          \"Can't continue - should check canContinue before calling Continue\"\n        );\n      }\n\n      this._state.didSafeExit = false;\n      this._state.ResetOutput();\n\n      if (this._recursiveContinueCount == 1)\n        this._state.variablesState.batchObservingVariableChanges = true;\n    }\n\n    let durationStopwatch = new Stopwatch();\n    durationStopwatch.Start();\n\n    let outputStreamEndsInNewline = false;\n    this._sawLookaheadUnsafeFunctionAfterNewline = false;\n    do {\n      try {\n        outputStreamEndsInNewline = this.ContinueSingleStep();\n      } catch (e) {\n        if (!(e instanceof StoryException)) throw e;\n\n        this.AddError(e.message, undefined, e.useEndLineNumber);\n        break;\n      }\n\n      if (outputStreamEndsInNewline) break;\n\n      if (\n        this._asyncContinueActive &&\n        durationStopwatch.ElapsedMilliseconds > millisecsLimitAsync\n      ) {\n        break;\n      }\n    } while (this.canContinue);\n\n    durationStopwatch.Stop();\n\n    if (outputStreamEndsInNewline || !this.canContinue) {\n      if (this._stateSnapshotAtLastNewline !== null) {\n        this.RestoreStateSnapshot();\n      }\n\n      if (!this.canContinue) {\n        if (this.state.callStack.canPopThread)\n          this.AddError(\n            \"Thread available to pop, threads should always be flat by the end of evaluation?\"\n          );\n\n        if (\n          this.state.generatedChoices.length == 0 &&\n          !this.state.didSafeExit &&\n          this._temporaryEvaluationContainer == null\n        ) {\n          if (this.state.callStack.CanPop(PushPopType.Tunnel))\n            this.AddError(\n              \"unexpectedly reached end of content. Do you need a '->->' to return from a tunnel?\"\n            );\n          else if (this.state.callStack.CanPop(PushPopType.Function))\n            this.AddError(\n              \"unexpectedly reached end of content. Do you need a '~ return'?\"\n            );\n          else if (!this.state.callStack.canPop)\n            this.AddError(\n              \"ran out of content. Do you need a '-> DONE' or '-> END'?\"\n            );\n          else\n            this.AddError(\n              \"unexpectedly reached end of content for unknown reason. Please debug compiler!\"\n            );\n        }\n      }\n\n      this.state.didSafeExit = false;\n      this._sawLookaheadUnsafeFunctionAfterNewline = false;\n\n      if (this._recursiveContinueCount == 1)\n        this._state.variablesState.batchObservingVariableChanges = false;\n\n      this._asyncContinueActive = false;\n      if (this.onDidContinue !== null) this.onDidContinue();\n    }\n\n    this._recursiveContinueCount--;\n\n    if (this._profiler != null) this._profiler.PostContinue();\n\n    // In the following code, we're masking a lot of non-null assertion,\n    // because testing for against `hasError` or `hasWarning` makes sure\n    // the arrays are present and contain at least one element.\n    if (this.state.hasError || this.state.hasWarning) {\n      if (this.onError !== null) {\n        if (this.state.hasError) {\n          for (let err of this.state.currentErrors!) {\n            this.onError(err, ErrorType.Error);\n          }\n        }\n        if (this.state.hasWarning) {\n          for (let err of this.state.currentWarnings!) {\n            this.onError(err, ErrorType.Warning);\n          }\n        }\n        this.ResetErrors();\n      } else {\n        let sb = new StringBuilder();\n        sb.Append(\"Ink had \");\n        if (this.state.hasError) {\n          sb.Append(`${this.state.currentErrors!.length}`);\n          sb.Append(\n            this.state.currentErrors!.length == 1 ? \" error\" : \"errors\"\n          );\n          if (this.state.hasWarning) sb.Append(\" and \");\n        }\n        if (this.state.hasWarning) {\n          sb.Append(`${this.state.currentWarnings!.length}`);\n          sb.Append(\n            this.state.currentWarnings!.length == 1 ? \" warning\" : \"warnings\"\n          );\n          if (this.state.hasWarning) sb.Append(\" and \");\n        }\n        sb.Append(\n          \". It is strongly suggested that you assign an error handler to story.onError. The first issue was: \"\n        );\n        sb.Append(\n          this.state.hasError\n            ? this.state.currentErrors![0]\n            : this.state.currentWarnings![0]\n        );\n\n        throw new StoryException(sb.toString());\n      }\n    }\n  }\n\n  public ContinueSingleStep() {\n    if (this._profiler != null) this._profiler.PreStep();\n\n    this.Step();\n\n    if (this._profiler != null) this._profiler.PostStep();\n\n    if (!this.canContinue && !this.state.callStack.elementIsEvaluateFromGame) {\n      this.TryFollowDefaultInvisibleChoice();\n    }\n\n    if (this._profiler != null) this._profiler.PreSnapshot();\n\n    if (!this.state.inStringEvaluation) {\n      if (this._stateSnapshotAtLastNewline !== null) {\n        if (this._stateSnapshotAtLastNewline.currentTags === null) {\n          return throwNullException(\"this._stateAtLastNewline.currentTags\");\n        }\n        if (this.state.currentTags === null) {\n          return throwNullException(\"this.state.currentTags\");\n        }\n\n        let change = this.CalculateNewlineOutputStateChange(\n          this._stateSnapshotAtLastNewline.currentText,\n          this.state.currentText,\n          this._stateSnapshotAtLastNewline.currentTags.length,\n          this.state.currentTags.length\n        );\n\n        if (\n          change == Story.OutputStateChange.ExtendedBeyondNewline ||\n          this._sawLookaheadUnsafeFunctionAfterNewline\n        ) {\n          this.RestoreStateSnapshot();\n\n          return true;\n        } else if (change == Story.OutputStateChange.NewlineRemoved) {\n          this.DiscardSnapshot();\n        }\n      }\n\n      if (this.state.outputStreamEndsInNewline) {\n        if (this.canContinue) {\n          if (this._stateSnapshotAtLastNewline == null) this.StateSnapshot();\n        } else {\n          this.DiscardSnapshot();\n        }\n      }\n    }\n\n    if (this._profiler != null) this._profiler.PostSnapshot();\n\n    return false;\n  }\n\n  public CalculateNewlineOutputStateChange(\n    prevText: string | null,\n    currText: string | null,\n    prevTagCount: number,\n    currTagCount: number\n  ) {\n    if (prevText === null) {\n      return throwNullException(\"prevText\");\n    }\n    if (currText === null) {\n      return throwNullException(\"currText\");\n    }\n\n    let newlineStillExists =\n      currText.length >= prevText.length &&\n      currText.charAt(prevText.length - 1) == \"\\n\";\n    if (\n      prevTagCount == currTagCount &&\n      prevText.length == currText.length &&\n      newlineStillExists\n    )\n      return Story.OutputStateChange.NoChange;\n\n    if (!newlineStillExists) {\n      return Story.OutputStateChange.NewlineRemoved;\n    }\n\n    if (currTagCount > prevTagCount)\n      return Story.OutputStateChange.ExtendedBeyondNewline;\n\n    for (let i = prevText.length; i < currText.length; i++) {\n      let c = currText.charAt(i);\n      if (c != \" \" && c != \"\\t\") {\n        return Story.OutputStateChange.ExtendedBeyondNewline;\n      }\n    }\n\n    return Story.OutputStateChange.NoChange;\n  }\n\n  public ContinueMaximally() {\n    this.IfAsyncWeCant(\"ContinueMaximally\");\n\n    let sb = new StringBuilder();\n\n    while (this.canContinue) {\n      sb.Append(this.Continue());\n    }\n\n    return sb.toString();\n  }\n\n  public ContentAtPath(path: Path) {\n    return this.mainContentContainer.ContentAtPath(path);\n  }\n\n  public KnotContainerWithName(name: string) {\n    let namedContainer = this.mainContentContainer.namedContent.get(name);\n    if (namedContainer instanceof Container) return namedContainer;\n    else return null;\n  }\n\n  public PointerAtPath(path: Path) {\n    if (path.length == 0) return Pointer.Null;\n\n    let p = new Pointer();\n\n    let pathLengthToUse = path.length;\n\n    let result = null;\n    if (path.lastComponent === null) {\n      return throwNullException(\"path.lastComponent\");\n    }\n\n    if (path.lastComponent.isIndex) {\n      pathLengthToUse = path.length - 1;\n      result = this.mainContentContainer.ContentAtPath(\n        path,\n        undefined,\n        pathLengthToUse\n      );\n      p.container = result.container;\n      p.index = path.lastComponent.index;\n    } else {\n      result = this.mainContentContainer.ContentAtPath(path);\n      p.container = result.container;\n      p.index = -1;\n    }\n\n    if (\n      result.obj == null ||\n      (result.obj == this.mainContentContainer && pathLengthToUse > 0)\n    ) {\n      this.Error(\n        \"Failed to find content at path '\" +\n          path +\n          \"', and no approximation of it was possible.\"\n      );\n    } else if (result.approximate)\n      this.Warning(\n        \"Failed to find content at path '\" +\n          path +\n          \"', so it was approximated to: '\" +\n          result.obj.path +\n          \"'.\"\n      );\n\n    return p;\n  }\n\n  public StateSnapshot() {\n    this._stateSnapshotAtLastNewline = this._state;\n    this._state = this._state.CopyAndStartPatching();\n  }\n\n  public RestoreStateSnapshot() {\n    if (this._stateSnapshotAtLastNewline === null) {\n      throwNullException(\"_stateSnapshotAtLastNewline\");\n    }\n    this._stateSnapshotAtLastNewline.RestoreAfterPatch();\n\n    this._state = this._stateSnapshotAtLastNewline;\n    this._stateSnapshotAtLastNewline = null;\n\n    if (!this._asyncSaving) {\n      this._state.ApplyAnyPatch();\n    }\n  }\n\n  public DiscardSnapshot() {\n    if (!this._asyncSaving) this._state.ApplyAnyPatch();\n\n    this._stateSnapshotAtLastNewline = null;\n  }\n\n  public CopyStateForBackgroundThreadSave() {\n    this.IfAsyncWeCant(\"start saving on a background thread\");\n\n    if (this._asyncSaving)\n      throw new Error(\n        \"Story is already in background saving mode, can't call CopyStateForBackgroundThreadSave again!\"\n      );\n\n    let stateToSave = this._state;\n    this._state = this._state.CopyAndStartPatching();\n    this._asyncSaving = true;\n    return stateToSave;\n  }\n\n  public BackgroundSaveComplete() {\n    if (this._stateSnapshotAtLastNewline === null) {\n      this._state.ApplyAnyPatch();\n    }\n\n    this._asyncSaving = false;\n  }\n\n  public Step() {\n    let shouldAddToStream = true;\n\n    let pointer = this.state.currentPointer.copy();\n    if (pointer.isNull) {\n      return;\n    }\n\n    // Container containerToEnter = pointer.Resolve () as Container;\n    let containerToEnter = asOrNull(pointer.Resolve(), Container);\n\n    while (containerToEnter) {\n      this.VisitContainer(containerToEnter, true);\n\n      // No content? the most we can do is step past it\n      if (containerToEnter.content.length == 0) {\n        break;\n      }\n\n      pointer = Pointer.StartOf(containerToEnter);\n      // containerToEnter = pointer.Resolve() as Container;\n      containerToEnter = asOrNull(pointer.Resolve(), Container);\n    }\n\n    this.state.currentPointer = pointer.copy();\n\n    if (this._profiler != null) this._profiler.Step(this.state.callStack);\n\n    // Is the current content object:\n    //  - Normal content\n    //  - Or a logic/flow statement - if so, do it\n    // Stop flow if we hit a stack pop when we're unable to pop (e.g. return/done statement in knot\n    // that was diverted to rather than called as a function)\n    let currentContentObj = pointer.Resolve();\n    let isLogicOrFlowControl =\n      this.PerformLogicAndFlowControl(currentContentObj);\n\n    // Has flow been forced to end by flow control above?\n    if (this.state.currentPointer.isNull) {\n      return;\n    }\n\n    if (isLogicOrFlowControl) {\n      shouldAddToStream = false;\n    }\n\n    // Choice with condition?\n    // var choicePoint = currentContentObj as ChoicePoint;\n    let choicePoint = asOrNull(currentContentObj, ChoicePoint);\n    if (choicePoint) {\n      let choice = this.ProcessChoice(choicePoint);\n      if (choice) {\n        this.state.generatedChoices.push(choice);\n      }\n\n      currentContentObj = null;\n      shouldAddToStream = false;\n    }\n\n    // If the container has no content, then it will be\n    // the \"content\" itself, but we skip over it.\n    if (currentContentObj instanceof Container) {\n      shouldAddToStream = false;\n    }\n\n    // Content to add to evaluation stack or the output stream\n    if (shouldAddToStream) {\n      // If we're pushing a variable pointer onto the evaluation stack, ensure that it's specific\n      // to our current (possibly temporary) context index. And make a copy of the pointer\n      // so that we're not editing the original runtime object.\n      // var varPointer = currentContentObj as VariablePointerValue;\n      let varPointer = asOrNull(currentContentObj, VariablePointerValue);\n      if (varPointer && varPointer.contextIndex == -1) {\n        // Create new object so we're not overwriting the story's own data\n        let contextIdx = this.state.callStack.ContextForVariableNamed(\n          varPointer.variableName\n        );\n        currentContentObj = new VariablePointerValue(\n          varPointer.variableName,\n          contextIdx\n        );\n      }\n\n      // Expression evaluation content\n      if (this.state.inExpressionEvaluation) {\n        this.state.PushEvaluationStack(currentContentObj);\n      }\n      // Output stream content (i.e. not expression evaluation)\n      else {\n        this.state.PushToOutputStream(currentContentObj);\n      }\n    }\n\n    // Increment the content pointer, following diverts if necessary\n    this.NextContent();\n\n    // Starting a thread should be done after the increment to the content pointer,\n    // so that when returning from the thread, it returns to the content after this instruction.\n    // var controlCmd = currentContentObj as ;\n    let controlCmd = asOrNull(currentContentObj, ControlCommand);\n    if (\n      controlCmd &&\n      controlCmd.commandType == ControlCommand.CommandType.StartThread\n    ) {\n      this.state.callStack.PushThread();\n    }\n  }\n\n  public VisitContainer(container: Container, atStart: boolean) {\n    if (!container.countingAtStartOnly || atStart) {\n      if (container.visitsShouldBeCounted)\n        this.state.IncrementVisitCountForContainer(container);\n\n      if (container.turnIndexShouldBeCounted)\n        this.state.RecordTurnIndexVisitToContainer(container);\n    }\n  }\n\n  private _prevContainers: Container[] = [];\n  public VisitChangedContainersDueToDivert() {\n    let previousPointer = this.state.previousPointer.copy();\n    let pointer = this.state.currentPointer.copy();\n\n    if (pointer.isNull || pointer.index == -1) return;\n\n    this._prevContainers.length = 0;\n    if (!previousPointer.isNull) {\n      // Container prevAncestor = previousPointer.Resolve() as Container ?? previousPointer.container as Container;\n      let resolvedPreviousAncestor = previousPointer.Resolve();\n      let prevAncestor =\n        asOrNull(resolvedPreviousAncestor, Container) ||\n        asOrNull(previousPointer.container, Container);\n      while (prevAncestor) {\n        this._prevContainers.push(prevAncestor);\n        // prevAncestor = prevAncestor.parent as Container;\n        prevAncestor = asOrNull(prevAncestor.parent, Container);\n      }\n    }\n\n    let currentChildOfContainer = pointer.Resolve();\n\n    if (currentChildOfContainer == null) return;\n\n    // Container currentContainerAncestor = currentChildOfContainer.parent as Container;\n    let currentContainerAncestor = asOrNull(\n      currentChildOfContainer.parent,\n      Container\n    );\n    let allChildrenEnteredAtStart = true;\n    while (\n      currentContainerAncestor &&\n      (this._prevContainers.indexOf(currentContainerAncestor) < 0 ||\n        currentContainerAncestor.countingAtStartOnly)\n    ) {\n      // Check whether this ancestor container is being entered at the start,\n      // by checking whether the child object is the first.\n      let enteringAtStart =\n        currentContainerAncestor.content.length > 0 &&\n        currentChildOfContainer == currentContainerAncestor.content[0] &&\n        allChildrenEnteredAtStart;\n\n      if (!enteringAtStart) allChildrenEnteredAtStart = false;\n\n      // Mark a visit to this container\n      this.VisitContainer(currentContainerAncestor, enteringAtStart);\n\n      currentChildOfContainer = currentContainerAncestor;\n      // currentContainerAncestor = currentContainerAncestor.parent as Container;\n      currentContainerAncestor = asOrNull(\n        currentContainerAncestor.parent,\n        Container\n      );\n    }\n  }\n\n  public ProcessChoice(choicePoint: ChoicePoint) {\n    let showChoice = true;\n\n    // Don't create choice if choice point doesn't pass conditional\n    if (choicePoint.hasCondition) {\n      let conditionValue = this.state.PopEvaluationStack();\n      if (!this.IsTruthy(conditionValue)) {\n        showChoice = false;\n      }\n    }\n\n    let startText = \"\";\n    let choiceOnlyText = \"\";\n\n    if (choicePoint.hasChoiceOnlyContent) {\n      // var choiceOnlyStrVal = state.PopEvaluationStack () as StringValue;\n      let choiceOnlyStrVal = asOrThrows(\n        this.state.PopEvaluationStack(),\n        StringValue\n      );\n      choiceOnlyText = choiceOnlyStrVal.value || \"\";\n    }\n\n    if (choicePoint.hasStartContent) {\n      // var startStrVal = state.PopEvaluationStack () as StringValue;\n      let startStrVal = asOrThrows(\n        this.state.PopEvaluationStack(),\n        StringValue\n      );\n      startText = startStrVal.value || \"\";\n    }\n\n    // Don't create choice if player has already read this content\n    if (choicePoint.onceOnly) {\n      let visitCount = this.state.VisitCountForContainer(\n        choicePoint.choiceTarget\n      );\n      if (visitCount > 0) {\n        showChoice = false;\n      }\n    }\n\n    // We go through the full process of creating the choice above so\n    // that we consume the content for it, since otherwise it'll\n    // be shown on the output stream.\n    if (!showChoice) {\n      return null;\n    }\n\n    let choice = new Choice();\n    choice.targetPath = choicePoint.pathOnChoice;\n    choice.sourcePath = choicePoint.path.toString();\n    choice.isInvisibleDefault = choicePoint.isInvisibleDefault;\n    choice.threadAtGeneration = this.state.callStack.ForkThread();\n\n    choice.text = (startText + choiceOnlyText).replace(/^[ \\t]+|[ \\t]+$/g, \"\");\n\n    return choice;\n  }\n\n  public IsTruthy(obj: InkObject) {\n    let truthy = false;\n    if (obj instanceof Value) {\n      let val = obj;\n\n      if (val instanceof DivertTargetValue) {\n        let divTarget = val;\n        this.Error(\n          \"Shouldn't use a divert target (to \" +\n            divTarget.targetPath +\n            \") as a conditional value. Did you intend a function call 'likeThis()' or a read count check 'likeThis'? (no arrows)\"\n        );\n        return false;\n      }\n\n      return val.isTruthy;\n    }\n    return truthy;\n  }\n\n  public PerformLogicAndFlowControl(contentObj: InkObject | null) {\n    if (contentObj == null) {\n      return false;\n    }\n\n    // Divert\n    if (contentObj instanceof Divert) {\n      let currentDivert = contentObj;\n\n      if (currentDivert.isConditional) {\n        let conditionValue = this.state.PopEvaluationStack();\n\n        // False conditional? Cancel divert\n        if (!this.IsTruthy(conditionValue)) return true;\n      }\n\n      if (currentDivert.hasVariableTarget) {\n        let varName = currentDivert.variableDivertName;\n\n        let varContents =\n          this.state.variablesState.GetVariableWithName(varName);\n\n        if (varContents == null) {\n          this.Error(\n            \"Tried to divert using a target from a variable that could not be found (\" +\n              varName +\n              \")\"\n          );\n        } else if (!(varContents instanceof DivertTargetValue)) {\n          // var intContent = varContents as IntValue;\n          let intContent = asOrNull(varContents, IntValue);\n\n          let errorMessage =\n            \"Tried to divert to a target from a variable, but the variable (\" +\n            varName +\n            \") didn't contain a divert target, it \";\n          if (intContent instanceof IntValue && intContent.value == 0) {\n            errorMessage += \"was empty/null (the value 0).\";\n          } else {\n            errorMessage += \"contained '\" + varContents + \"'.\";\n          }\n\n          this.Error(errorMessage);\n        }\n\n        let target = asOrThrows(varContents, DivertTargetValue);\n        this.state.divertedPointer = this.PointerAtPath(target.targetPath);\n      } else if (currentDivert.isExternal) {\n        this.CallExternalFunction(\n          currentDivert.targetPathString,\n          currentDivert.externalArgs\n        );\n        return true;\n      } else {\n        this.state.divertedPointer = currentDivert.targetPointer.copy();\n      }\n\n      if (currentDivert.pushesToStack) {\n        this.state.callStack.Push(\n          currentDivert.stackPushType,\n          undefined,\n          this.state.outputStream.length\n        );\n      }\n\n      if (this.state.divertedPointer.isNull && !currentDivert.isExternal) {\n        if (\n          currentDivert &&\n          currentDivert.debugMetadata &&\n          currentDivert.debugMetadata.sourceName != null\n        ) {\n          this.Error(\n            \"Divert target doesn't exist: \" +\n              currentDivert.debugMetadata.sourceName\n          );\n        } else {\n          this.Error(\"Divert resolution failed: \" + currentDivert);\n        }\n      }\n\n      return true;\n    }\n\n    // Start/end an expression evaluation? Or print out the result?\n    else if (contentObj instanceof ControlCommand) {\n      let evalCommand = contentObj;\n\n      switch (evalCommand.commandType) {\n        case ControlCommand.CommandType.EvalStart:\n          this.Assert(\n            this.state.inExpressionEvaluation === false,\n            \"Already in expression evaluation?\"\n          );\n          this.state.inExpressionEvaluation = true;\n          break;\n\n        case ControlCommand.CommandType.EvalEnd:\n          this.Assert(\n            this.state.inExpressionEvaluation === true,\n            \"Not in expression evaluation mode\"\n          );\n          this.state.inExpressionEvaluation = false;\n          break;\n\n        case ControlCommand.CommandType.EvalOutput:\n          // If the expression turned out to be empty, there may not be anything on the stack\n          if (this.state.evaluationStack.length > 0) {\n            let output = this.state.PopEvaluationStack();\n\n            // Functions may evaluate to Void, in which case we skip output\n            if (!(output instanceof Void)) {\n              // TODO: Should we really always blanket convert to string?\n              // It would be okay to have numbers in the output stream the\n              // only problem is when exporting text for viewing, it skips over numbers etc.\n              let text = new StringValue(output.toString());\n\n              this.state.PushToOutputStream(text);\n            }\n          }\n          break;\n\n        case ControlCommand.CommandType.NoOp:\n          break;\n\n        case ControlCommand.CommandType.Duplicate:\n          this.state.PushEvaluationStack(this.state.PeekEvaluationStack());\n          break;\n\n        case ControlCommand.CommandType.PopEvaluatedValue:\n          this.state.PopEvaluationStack();\n          break;\n\n        case ControlCommand.CommandType.PopFunction:\n        case ControlCommand.CommandType.PopTunnel:\n          let popType =\n            evalCommand.commandType == ControlCommand.CommandType.PopFunction\n              ? PushPopType.Function\n              : PushPopType.Tunnel;\n\n          let overrideTunnelReturnTarget: DivertTargetValue | null = null;\n          if (popType == PushPopType.Tunnel) {\n            let popped = this.state.PopEvaluationStack();\n            // overrideTunnelReturnTarget = popped as DivertTargetValue;\n            overrideTunnelReturnTarget = asOrNull(popped, DivertTargetValue);\n            if (overrideTunnelReturnTarget === null) {\n              this.Assert(\n                popped instanceof Void,\n                \"Expected void if ->-> doesn't override target\"\n              );\n            }\n          }\n\n          if (this.state.TryExitFunctionEvaluationFromGame()) {\n            break;\n          } else if (\n            this.state.callStack.currentElement.type != popType ||\n            !this.state.callStack.canPop\n          ) {\n            let names: Map<PushPopType, string> = new Map();\n            names.set(\n              PushPopType.Function,\n              \"function return statement (~ return)\"\n            );\n            names.set(PushPopType.Tunnel, \"tunnel onwards statement (->->)\");\n\n            let expected = names.get(this.state.callStack.currentElement.type);\n            if (!this.state.callStack.canPop) {\n              expected = \"end of flow (-> END or choice)\";\n            }\n\n            let errorMsg =\n              \"Found \" + names.get(popType) + \", when expected \" + expected;\n\n            this.Error(errorMsg);\n          } else {\n            this.state.PopCallStack();\n\n            if (overrideTunnelReturnTarget)\n              this.state.divertedPointer = this.PointerAtPath(\n                overrideTunnelReturnTarget.targetPath\n              );\n          }\n          break;\n\n        case ControlCommand.CommandType.BeginString:\n          this.state.PushToOutputStream(evalCommand);\n\n          this.Assert(\n            this.state.inExpressionEvaluation === true,\n            \"Expected to be in an expression when evaluating a string\"\n          );\n          this.state.inExpressionEvaluation = false;\n          break;\n\n        case ControlCommand.CommandType.EndString:\n          let contentStackForString: InkObject[] = [];\n\n          let outputCountConsumed = 0;\n          for (let i = this.state.outputStream.length - 1; i >= 0; --i) {\n            let obj = this.state.outputStream[i];\n\n            outputCountConsumed++;\n\n            // var command = obj as ControlCommand;\n            let command = asOrNull(obj, ControlCommand);\n            if (\n              command &&\n              command.commandType == ControlCommand.CommandType.BeginString\n            ) {\n              break;\n            }\n\n            if (obj instanceof StringValue) {\n              contentStackForString.push(obj);\n            }\n          }\n\n          // Consume the content that was produced for this string\n          this.state.PopFromOutputStream(outputCountConsumed);\n\n          // The C# version uses a Stack for contentStackForString, but we're\n          // using a simple array, so we need to reverse it before using it\n          contentStackForString = contentStackForString.reverse();\n\n          // Build string out of the content we collected\n          let sb = new StringBuilder();\n          for (let c of contentStackForString) {\n            sb.Append(c.toString());\n          }\n\n          // Return to expression evaluation (from content mode)\n          this.state.inExpressionEvaluation = true;\n          this.state.PushEvaluationStack(new StringValue(sb.toString()));\n          break;\n\n        case ControlCommand.CommandType.ChoiceCount:\n          let choiceCount = this.state.generatedChoices.length;\n          this.state.PushEvaluationStack(new IntValue(choiceCount));\n          break;\n\n        case ControlCommand.CommandType.Turns:\n          this.state.PushEvaluationStack(\n            new IntValue(this.state.currentTurnIndex + 1)\n          );\n          break;\n\n        case ControlCommand.CommandType.TurnsSince:\n        case ControlCommand.CommandType.ReadCount:\n          let target = this.state.PopEvaluationStack();\n          if (!(target instanceof DivertTargetValue)) {\n            let extraNote = \"\";\n            if (target instanceof IntValue)\n              extraNote =\n                \". Did you accidentally pass a read count ('knot_name') instead of a target ('-> knot_name')?\";\n            this.Error(\n              \"TURNS_SINCE / READ_COUNT expected a divert target (knot, stitch, label name), but saw \" +\n                target +\n                extraNote\n            );\n            break;\n          }\n\n          // var divertTarget = target as DivertTargetValue;\n          let divertTarget = asOrThrows(target, DivertTargetValue);\n          // var container = ContentAtPath (divertTarget.targetPath).correctObj as Container;\n          let container = asOrNull(\n            this.ContentAtPath(divertTarget.targetPath).correctObj,\n            Container\n          );\n\n          let eitherCount;\n          if (container != null) {\n            if (\n              evalCommand.commandType == ControlCommand.CommandType.TurnsSince\n            )\n              eitherCount = this.state.TurnsSinceForContainer(container);\n            else eitherCount = this.state.VisitCountForContainer(container);\n          } else {\n            if (\n              evalCommand.commandType == ControlCommand.CommandType.TurnsSince\n            )\n              eitherCount = -1;\n            else eitherCount = 0;\n\n            this.Warning(\n              \"Failed to find container for \" +\n                evalCommand.toString() +\n                \" lookup at \" +\n                divertTarget.targetPath.toString()\n            );\n          }\n\n          this.state.PushEvaluationStack(new IntValue(eitherCount));\n          break;\n\n        case ControlCommand.CommandType.Random: {\n          let maxInt = asOrNull(this.state.PopEvaluationStack(), IntValue);\n          let minInt = asOrNull(this.state.PopEvaluationStack(), IntValue);\n\n          if (minInt == null || minInt instanceof IntValue === false)\n            return this.Error(\n              \"Invalid value for minimum parameter of RANDOM(min, max)\"\n            );\n\n          if (maxInt == null || minInt instanceof IntValue === false)\n            return this.Error(\n              \"Invalid value for maximum parameter of RANDOM(min, max)\"\n            );\n\n          // Originally a primitive type, but here, can be null.\n          // TODO: Replace by default value?\n          if (maxInt.value === null) {\n            return throwNullException(\"maxInt.value\");\n          }\n          if (minInt.value === null) {\n            return throwNullException(\"minInt.value\");\n          }\n\n          // This code is differs a bit from the reference implementation, since\n          // JavaScript has no true integers. Hence integer arithmetics and\n          // interger overflows don't apply here. A loss of precision can\n          // happen with big numbers however.\n          //\n          // The case where 'randomRange' is lower than zero is handled below,\n          // so there's no need to test against Number.MIN_SAFE_INTEGER.\n          let randomRange = maxInt.value - minInt.value + 1;\n          if (!isFinite(randomRange) || randomRange > Number.MAX_SAFE_INTEGER) {\n            randomRange = Number.MAX_SAFE_INTEGER;\n            this.Error(\n              \"RANDOM was called with a range that exceeds the size that ink numbers can use.\"\n            );\n          }\n          if (randomRange <= 0)\n            this.Error(\n              \"RANDOM was called with minimum as \" +\n                minInt.value +\n                \" and maximum as \" +\n                maxInt.value +\n                \". The maximum must be larger\"\n            );\n\n          let resultSeed = this.state.storySeed + this.state.previousRandom;\n          let random = new PRNG(resultSeed);\n\n          let nextRandom = random.next();\n          let chosenValue = (nextRandom % randomRange) + minInt.value;\n          this.state.PushEvaluationStack(new IntValue(chosenValue));\n\n          // Next random number (rather than keeping the Random object around)\n          this.state.previousRandom = nextRandom;\n          break;\n        }\n\n        case ControlCommand.CommandType.SeedRandom:\n          let seed = asOrNull(this.state.PopEvaluationStack(), IntValue);\n          if (seed == null || seed instanceof IntValue === false)\n            return this.Error(\"Invalid value passed to SEED_RANDOM\");\n\n          // Originally a primitive type, but here, can be null.\n          // TODO: Replace by default value?\n          if (seed.value === null) {\n            return throwNullException(\"minInt.value\");\n          }\n\n          this.state.storySeed = seed.value;\n          this.state.previousRandom = 0;\n\n          this.state.PushEvaluationStack(new Void());\n          break;\n\n        case ControlCommand.CommandType.VisitIndex:\n          let count =\n            this.state.VisitCountForContainer(\n              this.state.currentPointer.container\n            ) - 1; // index not count\n          this.state.PushEvaluationStack(new IntValue(count));\n          break;\n\n        case ControlCommand.CommandType.SequenceShuffleIndex:\n          let shuffleIndex = this.NextSequenceShuffleIndex();\n          this.state.PushEvaluationStack(new IntValue(shuffleIndex));\n          break;\n\n        case ControlCommand.CommandType.StartThread:\n          // Handled in main step function\n          break;\n\n        case ControlCommand.CommandType.Done:\n          // We may exist in the context of the initial\n          // act of creating the thread, or in the context of\n          // evaluating the content.\n          if (this.state.callStack.canPopThread) {\n            this.state.callStack.PopThread();\n          }\n\n          // In normal flow - allow safe exit without warning\n          else {\n            this.state.didSafeExit = true;\n\n            // Stop flow in current thread\n            this.state.currentPointer = Pointer.Null;\n          }\n\n          break;\n\n        // Force flow to end completely\n        case ControlCommand.CommandType.End:\n          this.state.ForceEnd();\n          break;\n\n        case ControlCommand.CommandType.ListFromInt:\n          // var intVal = state.PopEvaluationStack () as IntValue;\n          let intVal = asOrNull(this.state.PopEvaluationStack(), IntValue);\n          // var listNameVal = state.PopEvaluationStack () as StringValue;\n          let listNameVal = asOrThrows(\n            this.state.PopEvaluationStack(),\n            StringValue\n          );\n\n          if (intVal === null) {\n            throw new StoryException(\n              \"Passed non-integer when creating a list element from a numerical value.\"\n            );\n          }\n\n          let generatedListValue = null;\n\n          if (this.listDefinitions === null) {\n            return throwNullException(\"this.listDefinitions\");\n          }\n          let foundListDef = this.listDefinitions.TryListGetDefinition(\n            listNameVal.value,\n            null\n          );\n          if (foundListDef.exists) {\n            // Originally a primitive type, but here, can be null.\n            // TODO: Replace by default value?\n            if (intVal.value === null) {\n              return throwNullException(\"minInt.value\");\n            }\n\n            let foundItem = foundListDef.result!.TryGetItemWithValue(\n              intVal.value,\n              InkListItem.Null\n            );\n            if (foundItem.exists) {\n              generatedListValue = new ListValue(\n                foundItem.result!,\n                intVal.value\n              );\n            }\n          } else {\n            throw new StoryException(\n              \"Failed to find LIST called \" + listNameVal.value\n            );\n          }\n\n          if (generatedListValue == null) generatedListValue = new ListValue();\n\n          this.state.PushEvaluationStack(generatedListValue);\n          break;\n\n        case ControlCommand.CommandType.ListRange:\n          let max = asOrNull(this.state.PopEvaluationStack(), Value);\n          let min = asOrNull(this.state.PopEvaluationStack(), Value);\n\n          // var targetList = state.PopEvaluationStack () as ListValue;\n          let targetList = asOrNull(this.state.PopEvaluationStack(), ListValue);\n\n          if (targetList === null || min === null || max === null)\n            throw new StoryException(\n              \"Expected list, minimum and maximum for LIST_RANGE\"\n            );\n\n          if (targetList.value === null) {\n            return throwNullException(\"targetList.value\");\n          }\n          let result = targetList.value.ListWithSubRange(\n            min.valueObject,\n            max.valueObject\n          );\n\n          this.state.PushEvaluationStack(new ListValue(result));\n          break;\n\n        case ControlCommand.CommandType.ListRandom: {\n          let listVal = this.state.PopEvaluationStack() as ListValue;\n          if (listVal === null)\n            throw new StoryException(\"Expected list for LIST_RANDOM\");\n\n          let list = listVal.value;\n\n          let newList: InkList | null = null;\n\n          if (list === null) {\n            throw throwNullException(\"list\");\n          }\n          if (list.Count == 0) {\n            newList = new InkList();\n          } else {\n            // Generate a random index for the element to take\n            let resultSeed = this.state.storySeed + this.state.previousRandom;\n            let random = new PRNG(resultSeed);\n\n            let nextRandom = random.next();\n            let listItemIndex = nextRandom % list.Count;\n\n            // This bit is a little different from the original\n            // C# code, since iterators do not work in the same way.\n            // First, we iterate listItemIndex - 1 times, calling next().\n            // The listItemIndex-th time is made outside of the loop,\n            // in order to retrieve the value.\n            let listEnumerator = list.entries();\n            for (let i = 0; i <= listItemIndex - 1; i++) {\n              listEnumerator.next();\n            }\n            let value = listEnumerator.next().value;\n            let randomItem: KeyValuePair<InkListItem, number> = {\n              Key: InkListItem.fromSerializedKey(value[0]),\n              Value: value[1],\n            };\n\n            // Origin list is simply the origin of the one element\n            if (randomItem.Key.originName === null) {\n              return throwNullException(\"randomItem.Key.originName\");\n            }\n            newList = new InkList(randomItem.Key.originName, this);\n            newList.Add(randomItem.Key, randomItem.Value);\n\n            this.state.previousRandom = nextRandom;\n          }\n\n          this.state.PushEvaluationStack(new ListValue(newList));\n          break;\n        }\n\n        default:\n          this.Error(\"unhandled ControlCommand: \" + evalCommand);\n          break;\n      }\n\n      return true;\n    }\n\n    // Variable assignment\n    else if (contentObj instanceof VariableAssignment) {\n      let varAss = contentObj;\n      let assignedVal = this.state.PopEvaluationStack();\n\n      this.state.variablesState.Assign(varAss, assignedVal);\n\n      return true;\n    }\n\n    // Variable reference\n    else if (contentObj instanceof VariableReference) {\n      let varRef = contentObj;\n      let foundValue = null;\n\n      // Explicit read count value\n      if (varRef.pathForCount != null) {\n        let container = varRef.containerForCount;\n        let count = this.state.VisitCountForContainer(container);\n        foundValue = new IntValue(count);\n      }\n\n      // Normal variable reference\n      else {\n        foundValue = this.state.variablesState.GetVariableWithName(varRef.name);\n\n        if (foundValue == null) {\n          this.Warning(\n            \"Variable not found: '\" +\n              varRef.name +\n              \"'. Using default value of 0 (false). This can happen with temporary variables if the declaration hasn't yet been hit. Globals are always given a default value on load if a value doesn't exist in the save state.\"\n          );\n          foundValue = new IntValue(0);\n        }\n      }\n\n      this.state.PushEvaluationStack(foundValue);\n\n      return true;\n    }\n\n    // Native function call\n    else if (contentObj instanceof NativeFunctionCall) {\n      let func = contentObj;\n      let funcParams = this.state.PopEvaluationStack(func.numberOfParameters);\n      let result = func.Call(funcParams);\n      this.state.PushEvaluationStack(result);\n      return true;\n    }\n\n    // No control content, must be ordinary content\n    return false;\n  }\n\n  public ChoosePathString(\n    path: string,\n    resetCallstack = true,\n    args: any[] = []\n  ) {\n    this.IfAsyncWeCant(\"call ChoosePathString right now\");\n    if (this.onChoosePathString !== null) this.onChoosePathString(path, args);\n\n    if (resetCallstack) {\n      this.ResetCallstack();\n    } else {\n      if (this.state.callStack.currentElement.type == PushPopType.Function) {\n        let funcDetail = \"\";\n        let container =\n          this.state.callStack.currentElement.currentPointer.container;\n        if (container != null) {\n          funcDetail = \"(\" + container.path.toString() + \") \";\n        }\n        throw new Error(\n          \"Story was running a function \" +\n            funcDetail +\n            \"when you called ChoosePathString(\" +\n            path +\n            \") - this is almost certainly not not what you want! Full stack trace: \\n\" +\n            this.state.callStack.callStackTrace\n        );\n      }\n    }\n\n    this.state.PassArgumentsToEvaluationStack(args);\n    this.ChoosePath(new Path(path));\n  }\n\n  public IfAsyncWeCant(activityStr: string) {\n    if (this._asyncContinueActive)\n      throw new Error(\n        \"Can't \" +\n          activityStr +\n          \". Story is in the middle of a ContinueAsync(). Make more ContinueAsync() calls or a single Continue() call beforehand.\"\n      );\n  }\n\n  public ChoosePath(p: Path, incrementingTurnIndex: boolean = true) {\n    this.state.SetChosenPath(p, incrementingTurnIndex);\n\n    // Take a note of newly visited containers for read counts etc\n    this.VisitChangedContainersDueToDivert();\n  }\n\n  public ChooseChoiceIndex(choiceIdx: number) {\n    choiceIdx = choiceIdx;\n    let choices = this.currentChoices;\n    this.Assert(\n      choiceIdx >= 0 && choiceIdx < choices.length,\n      \"choice out of range\"\n    );\n\n    let choiceToChoose = choices[choiceIdx];\n    if (this.onMakeChoice !== null) this.onMakeChoice(choiceToChoose);\n\n    if (choiceToChoose.threadAtGeneration === null) {\n      return throwNullException(\"choiceToChoose.threadAtGeneration\");\n    }\n    if (choiceToChoose.targetPath === null) {\n      return throwNullException(\"choiceToChoose.targetPath\");\n    }\n\n    this.state.callStack.currentThread = choiceToChoose.threadAtGeneration;\n\n    this.ChoosePath(choiceToChoose.targetPath);\n  }\n\n  public HasFunction(functionName: string) {\n    try {\n      return this.KnotContainerWithName(functionName) != null;\n    } catch (e) {\n      return false;\n    }\n  }\n\n  public EvaluateFunction(\n    functionName: string,\n    args: any[] = [],\n    returnTextOutput: boolean = false\n  ): Story.EvaluateFunctionTextOutput | any {\n    // EvaluateFunction behaves slightly differently than the C# version.\n    // In C#, you can pass a (second) parameter `out textOutput` to get the\n    // text outputted by the function. This is not possible in js. Instead,\n    // we maintain the regular signature (functionName, args), plus an\n    // optional third parameter returnTextOutput. If set to true, we will\n    // return both the textOutput and the returned value, as an object.\n\n    if (this.onEvaluateFunction !== null)\n      this.onEvaluateFunction(functionName, args);\n\n    this.IfAsyncWeCant(\"evaluate a function\");\n\n    if (functionName == null) {\n      throw new Error(\"Function is null\");\n    } else if (functionName == \"\" || functionName.trim() == \"\") {\n      throw new Error(\"Function is empty or white space.\");\n    }\n\n    let funcContainer = this.KnotContainerWithName(functionName);\n    if (funcContainer == null) {\n      throw new Error(\"Function doesn't exist: '\" + functionName + \"'\");\n    }\n\n    let outputStreamBefore: InkObject[] = [];\n    outputStreamBefore.push(...this.state.outputStream);\n    this._state.ResetOutput();\n\n    this.state.StartFunctionEvaluationFromGame(funcContainer, args);\n\n    // Evaluate the function, and collect the string output\n    let stringOutput = new StringBuilder();\n    while (this.canContinue) {\n      stringOutput.Append(this.Continue());\n    }\n    let textOutput = stringOutput.toString();\n\n    this._state.ResetOutput(outputStreamBefore);\n\n    let result = this.state.CompleteFunctionEvaluationFromGame();\n    if (this.onCompleteEvaluateFunction != null)\n      this.onCompleteEvaluateFunction(functionName, args, textOutput, result);\n\n    return returnTextOutput ? { returned: result, output: textOutput } : result;\n  }\n\n  public EvaluateExpression(exprContainer: Container) {\n    let startCallStackHeight = this.state.callStack.elements.length;\n\n    this.state.callStack.Push(PushPopType.Tunnel);\n\n    this._temporaryEvaluationContainer = exprContainer;\n\n    this.state.GoToStart();\n\n    let evalStackHeight = this.state.evaluationStack.length;\n\n    this.Continue();\n\n    this._temporaryEvaluationContainer = null;\n\n    // Should have fallen off the end of the Container, which should\n    // have auto-popped, but just in case we didn't for some reason,\n    // manually pop to restore the state (including currentPath).\n    if (this.state.callStack.elements.length > startCallStackHeight) {\n      this.state.PopCallStack();\n    }\n\n    let endStackHeight = this.state.evaluationStack.length;\n    if (endStackHeight > evalStackHeight) {\n      return this.state.PopEvaluationStack();\n    } else {\n      return null;\n    }\n  }\n\n  public allowExternalFunctionFallbacks: boolean = false;\n\n  public CallExternalFunction(\n    funcName: string | null,\n    numberOfArguments: number\n  ) {\n    if (funcName === null) {\n      return throwNullException(\"funcName\");\n    }\n    let funcDef = this._externals.get(funcName);\n    let fallbackFunctionContainer = null;\n\n    let foundExternal = typeof funcDef !== \"undefined\";\n\n    if (\n      foundExternal &&\n      !funcDef!.lookAheadSafe &&\n      this._stateSnapshotAtLastNewline !== null\n    ) {\n      this._sawLookaheadUnsafeFunctionAfterNewline = true;\n      return;\n    }\n\n    if (!foundExternal) {\n      if (this.allowExternalFunctionFallbacks) {\n        fallbackFunctionContainer = this.KnotContainerWithName(funcName);\n        this.Assert(\n          fallbackFunctionContainer !== null,\n          \"Trying to call EXTERNAL function '\" +\n            funcName +\n            \"' which has not been bound, and fallback ink function could not be found.\"\n        );\n\n        // Divert direct into fallback function and we're done\n        this.state.callStack.Push(\n          PushPopType.Function,\n          undefined,\n          this.state.outputStream.length\n        );\n        this.state.divertedPointer = Pointer.StartOf(fallbackFunctionContainer);\n        return;\n      } else {\n        this.Assert(\n          false,\n          \"Trying to call EXTERNAL function '\" +\n            funcName +\n            \"' which has not been bound (and ink fallbacks disabled).\"\n        );\n      }\n    }\n\n    // Pop arguments\n    let args: any[] = [];\n    for (let i = 0; i < numberOfArguments; ++i) {\n      // var poppedObj = state.PopEvaluationStack () as Value;\n      let poppedObj = asOrThrows(this.state.PopEvaluationStack(), Value);\n      let valueObj = poppedObj.valueObject;\n      args.push(valueObj);\n    }\n\n    // Reverse arguments from the order they were popped,\n    // so they're the right way round again.\n    args.reverse();\n\n    // Run the function!\n    let funcResult = funcDef!.function(args);\n\n    // Convert return value (if any) to the a type that the ink engine can use\n    let returnObj = null;\n    if (funcResult != null) {\n      returnObj = Value.Create(funcResult);\n      this.Assert(\n        returnObj !== null,\n        \"Could not create ink value from returned object of type \" +\n          typeof funcResult\n      );\n    } else {\n      returnObj = new Void();\n    }\n\n    this.state.PushEvaluationStack(returnObj);\n  }\n\n  public BindExternalFunctionGeneral(\n    funcName: string,\n    func: Story.ExternalFunction,\n    lookaheadSafe: boolean\n  ) {\n    this.IfAsyncWeCant(\"bind an external function\");\n    this.Assert(\n      !this._externals.has(funcName),\n      \"Function '\" + funcName + \"' has already been bound.\"\n    );\n    this._externals.set(funcName, {\n      function: func,\n      lookAheadSafe: lookaheadSafe,\n    });\n  }\n\n  public TryCoerce(value: any) {\n    // We're skipping type coercition in this implementation. First of, js\n    // is loosely typed, so it's not that important. Secondly, there is no\n    // clean way (AFAIK) for the user to describe what type of parameters\n    // they expect.\n    return value;\n  }\n\n  public BindExternalFunction(\n    funcName: string,\n    func: Story.ExternalFunction,\n    lookaheadSafe: boolean\n  ) {\n    this.Assert(func != null, \"Can't bind a null function\");\n\n    this.BindExternalFunctionGeneral(\n      funcName,\n      (args: any) => {\n        this.Assert(\n          args.length >= func.length,\n          \"External function expected \" + func.length + \" arguments\"\n        );\n\n        let coercedArgs = [];\n        for (let i = 0, l = args.length; i < l; i++) {\n          coercedArgs[i] = this.TryCoerce(args[i]);\n        }\n        return func.apply(null, coercedArgs);\n      },\n      lookaheadSafe\n    );\n  }\n\n  public UnbindExternalFunction(funcName: string) {\n    this.IfAsyncWeCant(\"unbind an external a function\");\n    this.Assert(\n      this._externals.has(funcName),\n      \"Function '\" + funcName + \"' has not been bound.\"\n    );\n    this._externals.delete(funcName);\n  }\n\n  public ValidateExternalBindings(): void;\n  public ValidateExternalBindings(\n    c: Container | null,\n    missingExternals: Set<string>\n  ): void;\n  public ValidateExternalBindings(\n    o: InkObject | null,\n    missingExternals: Set<string>\n  ): void;\n  public ValidateExternalBindings() {\n    let c: Container | null = null;\n    let o: InkObject | null = null;\n    let missingExternals: Set<string> = arguments[1] || new Set();\n\n    if (arguments[0] instanceof Container) {\n      c = arguments[0];\n    }\n\n    if (arguments[0] instanceof InkObject) {\n      o = arguments[0];\n    }\n\n    if (c === null && o === null) {\n      this.ValidateExternalBindings(\n        this._mainContentContainer,\n        missingExternals\n      );\n      this._hasValidatedExternals = true;\n\n      // No problem! Validation complete\n      if (missingExternals.size == 0) {\n        this._hasValidatedExternals = true;\n      } else {\n        let message = \"Error: Missing function binding for external\";\n        message += missingExternals.size > 1 ? \"s\" : \"\";\n        message += \": '\";\n        message += Array.from(missingExternals).join(\"', '\");\n        message += \"' \";\n        message += this.allowExternalFunctionFallbacks\n          ? \", and no fallback ink function found.\"\n          : \" (ink fallbacks disabled)\";\n\n        this.Error(message);\n      }\n    } else if (c != null) {\n      for (let innerContent of c.content) {\n        let container = innerContent as Container;\n        if (container == null || !container.hasValidName)\n          this.ValidateExternalBindings(innerContent, missingExternals);\n      }\n      for (let [, value] of c.namedContent) {\n        this.ValidateExternalBindings(\n          asOrNull(value, InkObject),\n          missingExternals\n        );\n      }\n    } else if (o != null) {\n      let divert = asOrNull(o, Divert);\n      if (divert && divert.isExternal) {\n        let name = divert.targetPathString;\n        if (name === null) {\n          return throwNullException(\"name\");\n        }\n        if (!this._externals.has(name)) {\n          if (this.allowExternalFunctionFallbacks) {\n            let fallbackFound =\n              this.mainContentContainer.namedContent.has(name);\n            if (!fallbackFound) {\n              missingExternals.add(name);\n            }\n          } else {\n            missingExternals.add(name);\n          }\n        }\n      }\n    }\n  }\n\n  public ObserveVariable(\n    variableName: string,\n    observer: Story.VariableObserver\n  ) {\n    this.IfAsyncWeCant(\"observe a new variable\");\n\n    if (this._variableObservers === null) this._variableObservers = new Map();\n\n    if (!this.state.variablesState.GlobalVariableExistsWithName(variableName))\n      throw new Error(\n        \"Cannot observe variable '\" +\n          variableName +\n          \"' because it wasn't declared in the ink story.\"\n      );\n\n    if (this._variableObservers.has(variableName)) {\n      this._variableObservers.get(variableName)!.push(observer);\n    } else {\n      this._variableObservers.set(variableName, [observer]);\n    }\n  }\n\n  public ObserveVariables(\n    variableNames: string[],\n    observers: Story.VariableObserver[]\n  ) {\n    for (let i = 0, l = variableNames.length; i < l; i++) {\n      this.ObserveVariable(variableNames[i], observers[i]);\n    }\n  }\n\n  public RemoveVariableObserver(\n    observer?: Story.VariableObserver,\n    specificVariableName?: string\n  ) {\n    // A couple of things to know about this method:\n    //\n    // 1. Since `RemoveVariableObserver` is exposed to the JavaScript world,\n    //    optionality is marked as `undefined` rather than `null`.\n    //    To keep things simple, null-checks are performed using regular\n    //    equality operators, where undefined == null.\n    //\n    // 2. Since C# delegates are translated to arrays of functions,\n    //    -= becomes a call to splice and null-checks are replaced by\n    //    emptiness-checks.\n    //\n    this.IfAsyncWeCant(\"remove a variable observer\");\n\n    if (this._variableObservers === null) return;\n\n    if (specificVariableName != null) {\n      if (this._variableObservers.has(specificVariableName)) {\n        if (observer != null) {\n          let variableObservers =\n            this._variableObservers.get(specificVariableName);\n          if (variableObservers != null) {\n            variableObservers.splice(variableObservers.indexOf(observer), 1);\n            if (variableObservers.length === 0) {\n              this._variableObservers.delete(specificVariableName);\n            }\n          }\n        } else {\n          this._variableObservers.delete(specificVariableName);\n        }\n      }\n    } else if (observer != null) {\n      let keys = this._variableObservers.keys();\n      for (let varName of keys) {\n        let variableObservers = this._variableObservers.get(varName);\n        if (variableObservers != null) {\n          variableObservers.splice(variableObservers.indexOf(observer), 1);\n          if (variableObservers.length === 0) {\n            this._variableObservers.delete(varName);\n          }\n        }\n      }\n    }\n  }\n\n  public VariableStateDidChangeEvent(\n    variableName: string,\n    newValueObj: InkObject\n  ) {\n    if (this._variableObservers === null) return;\n\n    let observers = this._variableObservers.get(variableName);\n    if (typeof observers !== \"undefined\") {\n      if (!(newValueObj instanceof Value)) {\n        throw new Error(\n          \"Tried to get the value of a variable that isn't a standard type\"\n        );\n      }\n      // var val = newValueObj as Value;\n      let val = asOrThrows(newValueObj, Value);\n\n      for (let observer of observers) {\n        observer(variableName, val.valueObject);\n      }\n    }\n  }\n\n  get globalTags() {\n    return this.TagsAtStartOfFlowContainerWithPathString(\"\");\n  }\n\n  public TagsForContentAtPath(path: string) {\n    return this.TagsAtStartOfFlowContainerWithPathString(path);\n  }\n\n  public TagsAtStartOfFlowContainerWithPathString(pathString: string) {\n    let path = new Path(pathString);\n\n    let flowContainer = this.ContentAtPath(path).container;\n    if (flowContainer === null) {\n      return throwNullException(\"flowContainer\");\n    }\n    while (true) {\n      let firstContent: InkObject = flowContainer.content[0];\n      if (firstContent instanceof Container) flowContainer = firstContent;\n      else break;\n    }\n\n    let tags: string[] | null = null;\n\n    for (let c of flowContainer.content) {\n      // var tag = c as Runtime.Tag;\n      let tag = asOrNull(c, Tag);\n      if (tag) {\n        if (tags == null) tags = [];\n        tags.push(tag.text);\n      } else break;\n    }\n\n    return tags;\n  }\n\n  public BuildStringOfHierarchy() {\n    let sb = new StringBuilder();\n\n    this.mainContentContainer.BuildStringOfHierarchy(\n      sb,\n      0,\n      this.state.currentPointer.Resolve()\n    );\n\n    return sb.toString();\n  }\n\n  public BuildStringOfContainer(container: Container) {\n    let sb = new StringBuilder();\n    container.BuildStringOfHierarchy(\n      sb,\n      0,\n      this.state.currentPointer.Resolve()\n    );\n    return sb.toString();\n  }\n\n  public NextContent() {\n    this.state.previousPointer = this.state.currentPointer.copy();\n\n    if (!this.state.divertedPointer.isNull) {\n      this.state.currentPointer = this.state.divertedPointer.copy();\n      this.state.divertedPointer = Pointer.Null;\n\n      this.VisitChangedContainersDueToDivert();\n\n      if (!this.state.currentPointer.isNull) {\n        return;\n      }\n    }\n\n    let successfulPointerIncrement = this.IncrementContentPointer();\n\n    if (!successfulPointerIncrement) {\n      let didPop = false;\n\n      if (this.state.callStack.CanPop(PushPopType.Function)) {\n        this.state.PopCallStack(PushPopType.Function);\n\n        if (this.state.inExpressionEvaluation) {\n          this.state.PushEvaluationStack(new Void());\n        }\n\n        didPop = true;\n      } else if (this.state.callStack.canPopThread) {\n        this.state.callStack.PopThread();\n\n        didPop = true;\n      } else {\n        this.state.TryExitFunctionEvaluationFromGame();\n      }\n\n      if (didPop && !this.state.currentPointer.isNull) {\n        this.NextContent();\n      }\n    }\n  }\n\n  public IncrementContentPointer() {\n    let successfulIncrement = true;\n\n    let pointer = this.state.callStack.currentElement.currentPointer.copy();\n    pointer.index++;\n\n    if (pointer.container === null) {\n      return throwNullException(\"pointer.container\");\n    }\n    while (pointer.index >= pointer.container.content.length) {\n      successfulIncrement = false;\n\n      // Container nextAncestor = pointer.container.parent as Container;\n      let nextAncestor = asOrNull(pointer.container.parent, Container);\n      if (nextAncestor instanceof Container === false) {\n        break;\n      }\n\n      let indexInAncestor = nextAncestor!.content.indexOf(pointer.container);\n      if (indexInAncestor == -1) {\n        break;\n      }\n\n      pointer = new Pointer(nextAncestor, indexInAncestor);\n\n      pointer.index++;\n\n      successfulIncrement = true;\n      if (pointer.container === null) {\n        return throwNullException(\"pointer.container\");\n      }\n    }\n\n    if (!successfulIncrement) pointer = Pointer.Null;\n\n    this.state.callStack.currentElement.currentPointer = pointer.copy();\n\n    return successfulIncrement;\n  }\n\n  public TryFollowDefaultInvisibleChoice() {\n    let allChoices = this._state.currentChoices;\n\n    let invisibleChoices = allChoices.filter((c) => c.isInvisibleDefault);\n\n    if (\n      invisibleChoices.length == 0 ||\n      allChoices.length > invisibleChoices.length\n    )\n      return false;\n\n    let choice = invisibleChoices[0];\n\n    if (choice.targetPath === null) {\n      return throwNullException(\"choice.targetPath\");\n    }\n\n    if (choice.threadAtGeneration === null) {\n      return throwNullException(\"choice.threadAtGeneration\");\n    }\n\n    this.state.callStack.currentThread = choice.threadAtGeneration;\n\n    if (this._stateSnapshotAtLastNewline !== null) {\n      this.state.callStack.currentThread = this.state.callStack.ForkThread();\n    }\n\n    this.ChoosePath(choice.targetPath, false);\n\n    return true;\n  }\n\n  public NextSequenceShuffleIndex() {\n    // var numElementsIntVal = state.PopEvaluationStack () as IntValue;\n    let numElementsIntVal = asOrNull(this.state.PopEvaluationStack(), IntValue);\n    if (!(numElementsIntVal instanceof IntValue)) {\n      this.Error(\"expected number of elements in sequence for shuffle index\");\n      return 0;\n    }\n\n    let seqContainer = this.state.currentPointer.container;\n    if (seqContainer === null) {\n      return throwNullException(\"seqContainer\");\n    }\n\n    // Originally a primitive type, but here, can be null.\n    // TODO: Replace by default value?\n    if (numElementsIntVal.value === null) {\n      return throwNullException(\"numElementsIntVal.value\");\n    }\n    let numElements = numElementsIntVal.value;\n\n    // var seqCountVal = state.PopEvaluationStack () as IntValue;\n    let seqCountVal = asOrThrows(this.state.PopEvaluationStack(), IntValue);\n    let seqCount = seqCountVal.value;\n\n    // Originally a primitive type, but here, can be null.\n    // TODO: Replace by default value?\n    if (seqCount === null) {\n      return throwNullException(\"seqCount\");\n    }\n\n    let loopIndex = seqCount / numElements;\n    let iterationIndex = seqCount % numElements;\n\n    let seqPathStr = seqContainer.path.toString();\n    let sequenceHash = 0;\n    for (let i = 0, l = seqPathStr.length; i < l; i++) {\n      sequenceHash += seqPathStr.charCodeAt(i) || 0;\n    }\n    let randomSeed = sequenceHash + loopIndex + this.state.storySeed;\n    let random = new PRNG(Math.floor(randomSeed));\n\n    let unpickedIndices = [];\n    for (let i = 0; i < numElements; ++i) {\n      unpickedIndices.push(i);\n    }\n\n    for (let i = 0; i <= iterationIndex; ++i) {\n      let chosen = random.next() % unpickedIndices.length;\n      let chosenIndex = unpickedIndices[chosen];\n      unpickedIndices.splice(chosen, 1);\n\n      if (i == iterationIndex) {\n        return chosenIndex;\n      }\n    }\n\n    throw new Error(\"Should never reach here\");\n  }\n\n  public Error(message: string, useEndLineNumber = false): never {\n    let e = new StoryException(message);\n    e.useEndLineNumber = useEndLineNumber;\n    throw e;\n  }\n\n  public Warning(message: string) {\n    this.AddError(message, true);\n  }\n\n  public AddError(\n    message: string,\n    isWarning = false,\n    useEndLineNumber = false\n  ) {\n    let dm = this.currentDebugMetadata;\n\n    let errorTypeStr = isWarning ? \"WARNING\" : \"ERROR\";\n\n    if (dm != null) {\n      let lineNum = useEndLineNumber ? dm.endLineNumber : dm.startLineNumber;\n      message =\n        \"RUNTIME \" +\n        errorTypeStr +\n        \": '\" +\n        dm.fileName +\n        \"' line \" +\n        lineNum +\n        \": \" +\n        message;\n    } else if (!this.state.currentPointer.isNull) {\n      message =\n        \"RUNTIME \" +\n        errorTypeStr +\n        \": (\" +\n        this.state.currentPointer +\n        \"): \" +\n        message;\n    } else {\n      message = \"RUNTIME \" + errorTypeStr + \": \" + message;\n    }\n\n    this.state.AddError(message, isWarning);\n\n    // In a broken state don't need to know about any other errors.\n    if (!isWarning) this.state.ForceEnd();\n  }\n\n  public Assert(condition: boolean, message: string | null = null) {\n    if (condition == false) {\n      if (message == null) {\n        message = \"Story assert\";\n      }\n\n      throw new Error(message + \" \" + this.currentDebugMetadata);\n    }\n  }\n\n  get currentDebugMetadata(): DebugMetadata | null {\n    let dm: DebugMetadata | null;\n\n    let pointer = this.state.currentPointer;\n    if (!pointer.isNull && pointer.Resolve() !== null) {\n      dm = pointer.Resolve()!.debugMetadata;\n      if (dm !== null) {\n        return dm;\n      }\n    }\n\n    for (let i = this.state.callStack.elements.length - 1; i >= 0; --i) {\n      pointer = this.state.callStack.elements[i].currentPointer;\n      if (!pointer.isNull && pointer.Resolve() !== null) {\n        dm = pointer.Resolve()!.debugMetadata;\n        if (dm !== null) {\n          return dm;\n        }\n      }\n    }\n\n    for (let i = this.state.outputStream.length - 1; i >= 0; --i) {\n      let outputObj = this.state.outputStream[i];\n      dm = outputObj.debugMetadata;\n      if (dm !== null) {\n        return dm;\n      }\n    }\n\n    return null;\n  }\n\n  get mainContentContainer() {\n    if (this._temporaryEvaluationContainer) {\n      return this._temporaryEvaluationContainer;\n    } else {\n      return this._mainContentContainer;\n    }\n  }\n\n  /**\n   * `_mainContentContainer` is almost guaranteed to be set in the\n   * constructor, unless the json is malformed.\n   */\n  private _mainContentContainer!: Container;\n  private _listDefinitions: ListDefinitionsOrigin | null = null;\n\n  private _externals: Map<string, Story.ExternalFunctionDef>;\n  private _variableObservers: Map<string, Story.VariableObserver[]> | null =\n    null;\n  private _hasValidatedExternals: boolean = false;\n\n  private _temporaryEvaluationContainer: Container | null = null;\n\n  /**\n   * `state` is almost guaranteed to be set in the constructor, unless\n   * using the compiler-specific constructor which will likely not be used in\n   * the real world.\n   */\n  private _state!: StoryState;\n\n  private _asyncContinueActive: boolean = false;\n  private _stateSnapshotAtLastNewline: StoryState | null = null;\n  private _sawLookaheadUnsafeFunctionAfterNewline: boolean = false;\n\n  private _recursiveContinueCount: number = 0;\n\n  private _asyncSaving: boolean = false;\n\n  private _profiler: any | null = null; // TODO: Profiler\n}\n\nexport namespace Story {\n  export enum OutputStateChange {\n    NoChange = 0,\n    ExtendedBeyondNewline = 1,\n    NewlineRemoved = 2,\n  }\n\n  export interface EvaluateFunctionTextOutput {\n    returned: any;\n    output: string;\n  }\n\n  export interface ExternalFunctionDef {\n    function: ExternalFunction;\n    lookAheadSafe: boolean;\n  }\n\n  export type VariableObserver = (variableName: string, newValue: any) => void;\n  export type ExternalFunction = (...args: any) => any;\n}\n"],"names":["Path","constructor","this","_components","_componentsString","_isRelative","arguments","componentsString","Component","head","tail","push","concat","Array","relative","isRelative","componentCount","length","tailComps","slice","self","lastComponent","lastComponentIdx","containsNamedComponent","i","l","isIndex","path","GetComponent","index","PathByAppendingPath","pathToAppend","p","upwardMoves","isParent","join","value","substring","componentStrings","split","str","test","parseInt","toString","Equals","otherPath","PathByAppendingComponent","c","Debug","ValueType","PushPopType","ErrorType","asOrNull","obj","type","unsafeTypeAssertion","asOrThrows","Error","asINamedContentOrNull","hasValidName","name","nullIfUndefined","isEquatable","indexOrName","parentId","static","otherComp","Assert","condition","message","console","warn","trace","variable","NullException","throwNullException","InkObject","debugMetadata","_debugMetadata","parent","ownDebugMetadata","DebugLineNumberOfPath","root","rootContentContainer","targetContent","ContentAtPath","dm","startLineNumber","_path","comps","child","container","Container","namedChild","unshift","content","indexOf","ResolvePath","nearestContainer","contentContainer","ConvertPathToRelative","globalPath","ownPath","minPathLength","Math","min","lastSharedPathCompIndex","ownComp","numUpwardsMoves","newPathComps","up","ToParent","down","CompactPathString","globalPathStr","relativePathStr","ancestor","Copy","SetChild","prop","StringBuilder","string","Length","Append","AppendLine","AppendFormat","format","args","replace","match","num","InkListItem","originName","itemName","nameParts","Null","isNull","fullName","otherItem","copy","serialized","JSON","stringify","key","parse","isLikeInkListItem","inkListItem","item","hasOwnProperty","InkList","Map","super","otherList","_originNames","originNames","origins","singleOriginListName","originStory","SetInitialOriginName","listDefinitions","def","TryListGetDefinition","exists","result","singleElement","Add","Key","Value","myListItem","listValue","FindSingleItemListWithName","AddItem","itemOrItemName","origin","intVal","TryGetValueForItem","foundListDef","ContainsItemWithName","itemVal","ValueForItem","ContainsItemNamed","fromSerializedKey","ContainsKey","has","serializedKey","set","Remove","delete","Count","size","originOfMaxItem","maxOriginName","maxItem","every","initialOriginName","SetInitialOriginNames","initialOriginNames","max","minItem","inverse","list","items","all","Union","union","Intersect","intersection","Without","listToRemove","Contains","GreaterThan","GreaterThanOrEquals","LessThan","LessThanOrEquals","MaxAsList","MinAsList","ListWithSubRange","minBound","maxBound","ordered","orderedItems","minValue","maxValue","Number","MAX_SAFE_INTEGER","isInteger","subList","otherInkList","sort","x","y","localeCompare","sb","valueOf","NaN","StoryException","useEndLineNumber","tryGetValueFromMap","map","val","get","AbstractValue","preferredNumberType","Int","IntValue","Float","isNaN","FloatValue","BoolValue","Boolean","StringValue","String","DivertTargetValue","ListValue","Create","valueObject","BadCastException","targetType","valueType","isTruthy","Bool","Cast","newType","_isNewline","_isInlineWhitespace","isNewline","isInlineWhitespace","isNonWhitespace","parsedInt","defaultValue","tryParseInt","parsedFloat","parseFloat","tryParseFloat","targetPath","DivertTarget","VariablePointerValue","variableName","contextIndex","_contextIndex","VariablePointer","List","listOrSingleItem","singleValue","oldValue","newValue","oldList","newList","SearchResult","correctObj","approximate","searchResult","_content","AddContent","namedOnlyContent","namedOnlyContentDict","namedContent","inkObject","named","existingNamedOnly","AddToNamedContentOnly","countFlags","flags","visitsShouldBeCounted","CountFlags","Visits","turnIndexShouldBeCounted","Turns","countingAtStartOnly","CountStartOnly","flag","pathToFirstLeafContent","_pathToFirstLeafContent","internalPathToFirstLeafContent","components","contentObjOrList","contentList","contentObj","TryAddNamedContent","namedContentObj","AssertType","partialPathStart","partialPathLength","currentContainer","currentObj","comp","foundObj","ContentWithPathComponent","InsertContent","splice","AddContentsOfContainer","otherContainer","component","foundContent","BuildStringOfHierarchy","indentation","pointedObj","appendIndentation","onlyNamed","Glue","ControlCommand","commandType","CommandType","NotSet","_commandType","EvalStart","EvalOutput","EvalEnd","Duplicate","PopEvaluatedValue","PopFunction","PopTunnel","BeginString","EndString","NoOp","ChoiceCount","TurnsSince","ReadCount","Random","SeedRandom","VisitIndex","SequenceShuffleIndex","StartThread","Done","End","ListFromInt","ListRange","ListRandom","Pointer","Resolve","Divert","stackPushType","pushesToStack","_targetPath","targetObj","targetPointer","_targetPointer","StartOf","targetPathString","hasVariableTarget","variableDivertName","otherDivert","targetStr","isConditional","Function","ChoicePoint","onceOnly","pathOnChoice","_pathOnChoice","choiceTargetObj","choiceTarget","pathStringOnChoice","hasCondition","hasStartContent","hasChoiceOnlyContent","isInvisibleDefault","VariableReference","containerForCount","pathForCount","pathStringForCount","VariableAssignment","isNewDeclaration","isGlobal","Void","NativeFunctionCall","GenerateNativeFunctionsIfNecessary","numberOfParameters","_isPrototype","functionName","_nativeFunctions","_name","_prototype","_numberOfParameters","Call","parameters","hasList","CallBinaryListOperation","coercedParams","CoerceValuesToSingleType","coercedType","CallType","parametersOfSingleType","param1","valType","val1","paramCount","_operationFuncs","opForTypeObj","val2","opForType","resultVal","CallListIncrementOperation","v1","v2","op","asBooleanOrThrows","listIntParams","listVal","resultInkList","listItemKey","listItemValue","listItem","intOp","targetInt","itemOrigin","incrementedItem","TryGetItemWithValue","parametersIn","specialCaseList","parametersOut","inkObjectVal","castedValue","t","AddIntBinaryOp","Subtract","Multiply","Divide","floor","Mod","AddIntUnaryOp","Negate","Equal","Greater","Less","NotEquals","Not","And","Or","Max","Min","Pow","pow","Floor","Identity","Ceiling","AddFloatBinaryOp","AddFloatUnaryOp","ceil","AddStringBinaryOp","Has","includes","Hasnt","AddListBinaryOp","AddListUnaryOp","Invert","All","ListMin","ListMax","ValueOfList","divertTargetsEqual","d1","d2","divertTargetsNotEqual","AddOpToNativeFunc","AddOpFuncForType","nativeFunc","Tag","tagText","text","Choice","ListDefinition","_items","_itemNameToValues","ContainsItem","ListDefinitionsOrigin","lists","_lists","_allUnambiguousListValueCache","listOfLists","definition","JsonSerialisation","jArray","skipLast","count","jTok","runtimeObj","JTokenToRuntimeObject","writer","dictionary","WriteObjectStart","WritePropertyStart","WriteRuntimeObject","WritePropertyEnd","WriteObjectEnd","WriteArrayStart","WriteArrayEnd","dict","WriteIntProperty","WriteRuntimeContainer","divert","divTypeKey","isExternal","Tunnel","WriteProperty","externalArgs","choicePoint","boolVal","WriteBool","WriteInt","floatVal","WriteFloat","strVal","Write","WriteStringStart","WriteStringInner","WriteStringEnd","WriteInkList","divTargetVal","varPtrVal","controlCmd","_controlCommandNames","varRef","readCountPath","varAss","tag","choice","WriteChoice","jObject","token","firstChar","CallExistsWithName","CallWithName","isArray","propValue","varPtr","isDivert","divPushType","external","target","readCountVarRef","isVarAss","isGlobalVar","varName","isNewDecl","undefined","listContent","rawList","namesAsObjs","nameToVal","JObjectToChoice","JArrayToContainer","toJson","me","removes","space","k","v","some","r","withoutName","hasNameProperty","hasTerminator","namedContainer","WriteNull","JArrayToRuntimeObjList","terminatingObj","namedContentItem","namedSubContainer","jObj","sourcePath","originalThreadIndex","WritePropertyNameStart","WritePropertyNameInner","WritePropertyNameEnd","listDefJson","defsObj","allDefs","nameValueKey","nameValue","TOTAL_VALUES","CallStack","Story","storyContext","_startOfRoot","Reset","toCopy","_threads","otherThread","_threadCounter","elements","callStack","depth","currentElement","cs","callstack","currentElementIndex","currentThread","canPop","Thread","Element","SetJsonToken","jThreads","jThreadTok","jThreadObj","thread","WriteJson","w","WriteObject","PushThread","newThread","threadIndex","ForkThread","forkedThread","PopThread","canPopThread","elementIsEvaluateFromGame","FunctionEvaluationFromGame","Push","externalEvaluationStackHeight","outputStreamLengthWithPushed","element","currentPointer","evaluationStackHeightWhenPushed","functionStartInOutputStream","CanPop","Pop","pop","GetTemporaryVariableWithName","varValue","temporaryVariables","SetTemporaryVariable","declareNew","contextElement","RetainListOriginsForAssignment","ContextForVariableNamed","ThreadWithIndex","filtered","filter","callStackTrace","isCurrent","pointer","inExpressionEvaluation","jThreadCallstack","jElTok","currentContainerPathStr","jElementObj","pushPopType","currentContainerPathStrToken","threadPointerResult","Warning","el","temps","JObjectToDictionaryRuntimeObjs","clear","prevContentObjPath","prevPath","previousPointer","PointerAtPath","e","WriteDictionaryRuntimeObjs","resolvedPointer","VariablesState","listDefsOrigin","Set","_globalVariables","_callStack","_listDefsOrigin","Proxy","$","variableChangedEvent","callback","variableChangedEventCallbacks","batchObservingVariableChanges","_batchObservingVariableChanges","_changedVariablesForBatchObs","currentValue","varContents","patch","TryGetGlobal","_defaultGlobalVariables","SetGlobal","ApplyPatch","namedVarKey","namedVarValue","globals","changedVariables","add","jToken","varValKey","varValValue","loadedToken","tokenInkObject","keyValKey","keyValValue","dontSaveDefaultValues","defaultVal","RuntimeObjectsEqual","obj1","obj2","GetVariableWithName","GetRawVariableWithName","varPointer","ValueAtVariablePointer","TryGetDefaultVariableValue","GlobalVariableExistsWithName","variableValue","Assign","setGlobal","ResolveVariablePointer","existingPointer","SnapshotDefaultGlobals","AddChangedVariable","GetContextIndexOfVariableNamed","doubleRedirectionPointer","ObserveVariableChange","PRNG","seed","next","nextFloat","StatePatch","_globals","_changedVariables","_visitCounts","_turnIndices","visitCounts","turnIndices","TryGetVisitCount","SetVisitCount","SetTurnIndex","TryGetTurnIndex","SimpleJson","Reader","ToDictionary","ToArray","_rootObject","Writer","inner","StartNewObject","newObject","state","State","Property","currentCollection","currentPropertyName","propertyName","_propertyNameStack","_collectionStack","None","_jsonObject","_stateStack","StateElement","Object","innerOrContent","WriteFloatProperty","IncrementChildCount","childCount","_currentPropertyName","PropertyName","escape","_addToCurrentObject","error","POSITIVE_INFINITY","NEGATIVE_INFINITY","_currentString","currEl","Flow","story","outputStream","currentChoices","jChoiceThreadsObj","LoadFlowChoiceThreads","WriteListRuntimeObjs","hasChoiceThreads","threadAtGeneration","jChoiceThreads","foundActiveThread","jSavedChoiceThread","StoryState","_currentFlow","kDefaultFlowName","OutputStreamDirty","_evaluationStack","_variablesState","currentTurnIndex","timeSeed","Date","getTime","storySeed","previousRandom","GoToStart","ToJson","indented","LoadJson","json","TextToDictionary","LoadJsonObj","onDidLoadState","VisitCountAtPathString","pathString","visitCountOut","_patch","VisitCountForContainer","containerPathStr","count2","IncrementVisitCountForContainer","currCount","RecordTurnIndexVisitToContainer","TurnsSinceForContainer","index2","callstackDepth","canContinue","generatedChoices","currentErrors","_currentErrors","currentWarnings","_currentWarnings","variablesState","evaluationStack","_currentTurnIndex","currentPathString","hasError","hasWarning","currentText","_outputStreamTextDirty","outputObj","textContent","_currentText","CleanOutputWhitespace","currentWhitespaceStart","startOfLine","charAt","currentTags","_outputStreamTagsDirty","_currentTags","currentFlowName","mainContentContainer","SwitchFlow_Internal","flowName","_namedFlows","flow","SwitchToDefaultFlow_Internal","RemoveFlow_Internal","CopyAndStartPatching","namedFlowKey","namedFlowValue","divertedPointer","didSafeExit","RestoreAfterPatch","ApplyAnyPatch","ApplyCountChanges","newCount","isVisit","WriteIntDictionary","kInkSaveStateVersion","inkVersionCurrent","jSaveVersion","kMinCompatibleLoadVersion","flowsObj","flowsObjDict","keys","flowsObjDictEntries","entries","namedFlowObjKey","namedFlowObjValue","flowObj","currFlowName","currentDivertTargetPath","divertPath","JObjectToIntDictionary","ResetErrors","ResetOutput","objs","PushToOutputStream","listText","TrySplittingHeadTailWhitespace","textObj","PushToOutputStreamIndividual","PopFromOutputStream","single","headFirstNewlineIdx","headLastNewlineIdx","tailLastNewlineIdx","tailFirstNewlineIdx","listTexts","innerStrStart","innerStrEnd","leadingSpaces","innerStrText","numSpaces","trailingSpaces","glue","includeInOutput","TrimNewlinesFromOutputStream","functionTrimIndex","glueTrimIndex","o","trimIndex","RemoveExistingGlue","callStackElements","outputStreamEndsInNewline","outputStreamContainsContent","removeWhitespaceFrom","cmd","txt","inStringEvaluation","PushEvaluationStack","n","PopEvaluationStack","numberOfObjects","PeekEvaluationStack","ForceEnd","TrimWhitespaceFromFunctionEnd","functionStartPoint","PopCallStack","popType","SetChosenPath","incrementingTurnIndex","newPointer","StartFunctionEvaluationFromGame","funcContainer","PassArgumentsToEvaluationStack","TryExitFunctionEvaluationFromGame","CompleteFunctionEvaluationFromGame","originalEvaluationStackHeight","returnedObj","poppedObj","returnVal","AddError","isWarning","Stopwatch","startTime","ElapsedMilliseconds","Start","Stop","nVal","isFinite","_mainContentContainer","jsonString","_listDefinitions","_externals","rootObject","versionObj","formatFromFile","inkVersionMinimumCompatible","listDefsObj","rootToken","JTokenToListDefinitions","ResetState","choices","_state","IfAsyncWeCant","StartProfiling","EndProfiling","shouldReturn","VariableStateDidChangeEvent","bind","ResetGlobals","ResetCallstack","originalPointer","ChoosePath","ContinueInternal","SwitchFlow","_asyncSaving","RemoveFlow","SwitchToDefaultFlow","Continue","ContinueAsync","asyncContinueComplete","_asyncContinueActive","millisecsLimitAsync","_hasValidatedExternals","ValidateExternalBindings","_profiler","PreContinue","isAsyncTimeLimited","_recursiveContinueCount","durationStopwatch","_sawLookaheadUnsafeFunctionAfterNewline","ContinueSingleStep","_stateSnapshotAtLastNewline","RestoreStateSnapshot","_temporaryEvaluationContainer","onDidContinue","PostContinue","onError","err","PreStep","Step","PostStep","TryFollowDefaultInvisibleChoice","PreSnapshot","change","CalculateNewlineOutputStateChange","OutputStateChange","ExtendedBeyondNewline","NewlineRemoved","DiscardSnapshot","StateSnapshot","PostSnapshot","prevText","currText","prevTagCount","currTagCount","newlineStillExists","NoChange","ContinueMaximally","KnotContainerWithName","pathLengthToUse","CopyStateForBackgroundThreadSave","stateToSave","BackgroundSaveComplete","shouldAddToStream","containerToEnter","VisitContainer","currentContentObj","isLogicOrFlowControl","PerformLogicAndFlowControl","ProcessChoice","contextIdx","NextContent","atStart","VisitChangedContainersDueToDivert","_prevContainers","prevAncestor","currentChildOfContainer","currentContainerAncestor","allChildrenEnteredAtStart","enteringAtStart","showChoice","conditionValue","IsTruthy","startText","choiceOnlyText","divTarget","currentDivert","intContent","errorMessage","CallExternalFunction","sourceName","evalCommand","output","overrideTunnelReturnTarget","popped","names","expected","errorMsg","contentStackForString","outputCountConsumed","command","reverse","choiceCount","extraNote","eitherCount","divertTarget","maxInt","minInt","randomRange","resultSeed","nextRandom","chosenValue","shuffleIndex","NextSequenceShuffleIndex","listNameVal","generatedListValue","foundItem","targetList","listItemIndex","listEnumerator","randomItem","assignedVal","foundValue","func","funcParams","ChoosePathString","resetCallstack","onChoosePathString","funcDetail","activityStr","ChooseChoiceIndex","choiceIdx","choiceToChoose","onMakeChoice","HasFunction","EvaluateFunction","returnTextOutput","onEvaluateFunction","trim","outputStreamBefore","stringOutput","textOutput","onCompleteEvaluateFunction","returned","EvaluateExpression","exprContainer","startCallStackHeight","evalStackHeight","funcName","numberOfArguments","funcDef","fallbackFunctionContainer","foundExternal","lookAheadSafe","allowExternalFunctionFallbacks","valueObj","funcResult","function","returnObj","BindExternalFunctionGeneral","lookaheadSafe","TryCoerce","BindExternalFunction","coercedArgs","apply","UnbindExternalFunction","missingExternals","from","innerContent","ObserveVariable","observer","_variableObservers","ObserveVariables","variableNames","observers","RemoveVariableObserver","specificVariableName","variableObservers","newValueObj","globalTags","TagsAtStartOfFlowContainerWithPathString","TagsForContentAtPath","flowContainer","firstContent","tags","BuildStringOfContainer","IncrementContentPointer","didPop","successfulIncrement","nextAncestor","indexInAncestor","allChoices","invisibleChoices","numElementsIntVal","seqContainer","numElements","seqCount","loopIndex","iterationIndex","seqPathStr","sequenceHash","charCodeAt","randomSeed","random","unpickedIndices","chosen","chosenIndex","currentDebugMetadata","errorTypeStr","lineNum","endLineNumber","fileName"],"mappings":"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"}